{
  "id": "0371e11999f8375e6512271a1decda78",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.4",
  "solcLongVersion": "0.8.4+commit.c7e474f2",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/verify/IBoolaContractV.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface Common {\r\n  enum State { GENERATED, COLLECTED, RECYCLED }\r\n  enum Category { COLLECTOR, GENERATOR, RECYCLER, BINOWNER, SOLD }\r\n  enum Share { COLLECTOR, GENERATOR, TEAM }\r\n\r\n  error UserAlreadyExist();\r\n  error UserAlreadyNotExist();\r\n  error InvalidBinID();\r\n  error EmptyBin();\r\n  error CannotDeleteBinInEngagedMode();\r\n  error InvalidWasteId();\r\n  error NothingToWithdraw();\r\n  error MaxWasteTransportExceeded();\r\n\r\n  struct WasteData {\r\n    bytes32 value;\r\n    address collector;\r\n    address generator;\r\n    address recycler;\r\n    State state;\r\n  }\r\n\r\n  struct Profile {\r\n    uint32 transactionTime;\r\n    uint wasteCount;\r\n    bool approval;\r\n    bool isRegistered;\r\n    WasteData[] purchased;\r\n  }\r\n\r\n  struct BinData {\r\n    WasteData[] bin;\r\n    address owner;\r\n  }\r\n\r\n  struct Empty {\r\n    uint[] wasteIds;\r\n    string[] wastedata;\r\n  }\r\n\r\n}\r\n\r\nlibrary IBoolaLib {\r\n  /**\r\n    @dev Sign up new collector\r\n      @param self - Storage\r\n      @param newCollector - Address of new Collector to add.\r\n   */\r\n\r\n  function registerCollector(mapping (Common.Category=>mapping(address=>Common.Profile)) storage self, address newCollector) internal {\r\n    Common.Category _c = Common.Category.COLLECTOR;\r\n    self[_c][newCollector].transactionTime = _now();\r\n    self[_c][newCollector].wasteCount = 0;\r\n    self[_c][newCollector].approval = false;\r\n    self[_c][newCollector].isRegistered = true;\r\n  }\r\n\r\n  /**\r\n    @dev Dual function: \r\n            o Recycles collected waste.\r\n            o Generate new waste.\r\n   */\r\n  function portToMap(\r\n    mapping (Common.State=>Common.WasteData[]) storage self, \r\n    Common.WasteData memory inWaste,\r\n    Common.State state\r\n  ) internal {\r\n    self[state].push(Common.WasteData(\r\n        inWaste.value,\r\n        inWaste.collector,\r\n        inWaste.generator,\r\n        inWaste.recycler,\r\n        state\r\n      )\r\n    );\r\n  }\r\n\r\n  ///@dev Moves waste to bin\r\n  function portToArray(Common.BinData[] storage self, uint binId, Common.WasteData memory inWaste, Common.State state) internal {\r\n    self[binId].bin.push(Common.WasteData(\r\n      inWaste.value,\r\n      inWaste.collector,\r\n      inWaste.generator,\r\n      inWaste.recycler,\r\n      state\r\n    )\r\n    );\r\n  }\r\n\r\n  ///@dev Removes waste at 'wasteId' from bin at 'binId' in bin array at hashmap 'self'\r\n  function popFromMapping(mapping (Common.State=>Common.WasteData[]) storage self, uint wasteId, Common.State state) internal returns(Common.WasteData memory _waste) {\r\n    _waste = self[state][wasteId];\r\n    delete self[state][wasteId];\r\n  }\r\n\r\n  ///@dev Removes waste at 'wasteId' from bin at 'binId' in bin array 'self'\r\n  function popFromArray(Common.BinData[] storage self, uint binId, uint wasteId) internal returns(Common.WasteData memory _waste) {\r\n    _waste = self[binId].bin[wasteId];\r\n    delete self[binId].bin[wasteId];\r\n  }\r\n\r\n  /**\r\n    @dev Sets collectors status to either true or false\r\n    @param value - Value to set status to.\r\n    @param who - User to set status for.\r\n    @param self - storage.\r\n      Note : If value is true, collector's status must be false vice versa.\r\n   */\r\n  function setStatus(mapping (Common.Category=>mapping(address=>Common.Profile)) storage self, address who, bool value, Common.Category cat) internal {\r\n    bool prevStatus = _previousStatus(self, who, cat);\r\n    if(value) {\r\n      if(prevStatus) revert Common.UserAlreadyExist();\r\n      self[cat][who].approval = true;\r\n    } else {\r\n      if(!prevStatus) revert Common.UserAlreadyNotExist();\r\n      self[cat][who].approval = false;\r\n    }\r\n  }\r\n\r\n  function _previousStatus(mapping (Common.Category=>mapping(address=>Common.Profile)) storage self, address who, Common.Category cat) private view returns(bool) {\r\n    return self[cat][who].approval;\r\n  }\r\n\r\n  /**\r\n    @dev Registers new bin with owner.\r\n        @param owner - Bin Owner\r\n        @param self - Storage\r\n        @return newId \r\n   */\r\n  function registerNewBin(Common.BinData[] storage self, address owner) internal returns(uint newId) {\r\n    newId = self.length;\r\n    self.push();\r\n    self[newId].owner = owner;\r\n  }\r\n\r\n  /**\r\n    @dev Removes bin from bin array.\r\n      @notice binId must be less than the bin array at any time since arrays are zero-based.\r\n      @param self - Storage\r\n   */\r\n  function removeBin(Common.BinData[] storage self, uint binId) internal {\r\n    (uint len, Common.BinData memory wasteBin)  = (self.length, self[binId]);\r\n    if(wasteBin.bin.length == 0) revert Common.EmptyBin();\r\n    for(uint i = 0; i < len; i++) {\r\n      if(wasteBin.bin[i].state < Common.State.RECYCLED) {\r\n        revert Common.CannotDeleteBinInEngagedMode();\r\n      }\r\n    } \r\n    delete self[binId];\r\n  }\r\n\r\n  function split(mapping (Common.Share=>uint8) storage self, uint amount) internal view returns(uint collector, uint generator, uint team) {\r\n    collector = (self[Common.Share.COLLECTOR] * amount) / 100;\r\n    generator = (self[Common.Share.GENERATOR] * amount) / 100;\r\n    team = (self[Common.Share.TEAM] * amount) / 100;\r\n\r\n  }\r\n\r\n  function _now() internal view returns(uint32) { return uint32(block.timestamp); }\r\n\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Main\r\n * @author Bobeu: https://github.com/bobeu\r\n * A smart contract that will tokenize the disposal and collection of waste. \r\n    Users get a token when they dispose of their waste in a waste bin, collectors \r\n    get token for collecting waste and taking them to the waste recyclers \r\n\r\n    The process of tokenization happens when the waste drops in the waste bin. Every\r\n    waste bin has a unique wallet ID which will receive the token at the end of evacuation.\r\n    The owners of the waste bin will have a DAO. \r\n\r\n    *Wallet \r\n    *Token (iBoola token) which would be paired against either Avalanche, Celo or Polygon \r\n    *New users get 10 $IBT after sign up \r\n    *Community of waste bins will have a DAO \r\n    Waste generators get 10% collectors get 65 while the iBoola team gets 25% \r\n    Decimals: use standard 18 decimals \r\n\r\n    Mintable: not mintable\r\n\r\n    Ownership privilege :  30% locked for 5 years, 20% for dev team 45% for  initial circulation, \r\n    5% for presale \r\n\r\n    PSEUDO\r\n    ======\r\n    Parties:\r\n        o Waste generators.\r\n        o Collectors.\r\n        o Recyclers.\r\n\r\n    o When waste is disposed or evacuated, then reward collectors.\r\n    o Each waste bin has a unique identifer and an owner.\r\n    o On sign up, user gets 10 $IBT Token.\r\n    o Waste collectors own a DAO.\r\n    o Waste bin owners own a DAO.\r\n    o Reward sharing formula Note - It is configurable. The owner account is able to \r\n        set each of these fields.\r\n        - Waste generators 10%.\r\n        - Collectors 65%.\r\n        - Team 25%.\r\n */\r\ncontract IBoolaContractV is Context, Common, Ownable {\r\n\r\n    ///@dev New sign up reward\r\n    uint public newSignUpReward;\r\n\r\n    ///@dev iBoola Token\r\n    address public token;\r\n\r\n    ///@dev Total waste generated to date\r\n    uint256 public totalWasteGenerated;\r\n\r\n    ///@dev Collector reward\r\n    uint public collectorReward;\r\n\r\n    ///@dev Total bin registered to date\r\n    uint public binCounter;\r\n\r\n    ///@dev Price of recycled waste\r\n    uint public price;\r\n\r\n    /**\r\n        @dev Array of bins \r\n            { Contain bins which contain collected wastes which contains wastedata}\r\n            @notice Bins in this list are owned by addresses.\r\n    */\r\n    BinData[] public bins;\r\n    \r\n    mapping (Share=>uint8) public formula;\r\n    \r\n\r\n    /**\r\n        @dev Mapping of Generated and Recycled Waste State -> binId (binCounter) -> WasteData\r\n        Keys type: \r\n            o State\r\n            o uint256\r\n\r\n        value:\r\n           array of struct(s) \r\n     */\r\n    mapping (State=>WasteData[]) private _garbages;\r\n    \r\n    /**\r\n        @dev Mapping of Waste State -> user -> profile\r\n        Keys type: \r\n            o State\r\n            o address\r\n\r\n        value:\r\n            struct \r\n     */\r\n    mapping (Category=>mapping(address=>Profile)) profiles;\r\n\r\n    /**\r\n        @dev Sign up fees for different category.\r\n            @notice - It can be configured to suit any category.\r\n     */\r\n    mapping (Category=>uint256) public signUpFees;\r\n\r\n    ///@dev Rewards\r\n    // mapping(address=>uint) public rewards;\r\n\r\n\r\n    modifier validateWasteId(uint binId, uint wasteId, State state, string memory errorMessage) {\r\n        if(binId >= bins.length) revert InvalidBinID();\r\n        if(state == State.COLLECTED) {\r\n            if(wasteId >= bins[binId].bin.length) revert InvalidWasteId();\r\n        }\r\n        require(bins[binId].bin[wasteId].state == state, errorMessage);\r\n        _;\r\n    }\r\n\r\n    ///Checks user's existence\r\n    modifier isApproved(Category cat, address who) {\r\n        if(!_getApproval(cat, who)) revert UserAlreadyNotExist();\r\n        _;\r\n    }\r\n\r\n    ///@dev Validates category\r\n    modifier validateCategory(uint8 cat) {\r\n        require(cat < 4, \"Invalid category\");\r\n        _;\r\n    }\r\n\r\n    //Checks that the size of wastes not greater than 50\r\n    modifier validateSize(uint[] memory wasteIDs, string[] memory wastedata) {\r\n        (uint8 low, uint8 high) = (0, 50);\r\n        wastedata.length == 0 ? require(\r\n            wasteIDs.length > low && wasteIDs.length <= high, \r\n            \"invalid\"\r\n        ) : require(wastedata.length > low && wastedata.length <= high, \"invalid\");\r\n        _;\r\n    }\r\n\r\n    constructor (address _token) { \r\n        token = _token;\r\n        newSignUpReward = 10 * (10 ** 18);\r\n        profiles[Category.BINOWNER][_msgSender()].approval = true;\r\n        formula[Share.COLLECTOR] = 65;\r\n        formula[Share.GENERATOR] = 10;\r\n        formula[Share.TEAM] = 25;\r\n    }\r\n\r\n    /**\r\n        @notice Sign up function. \r\n                o Caller must not already be a member. \r\n    */\r\n    function signUpAsWasteCollector() public {\r\n       require(!profiles[Category.COLLECTOR][_msgSender()].isRegistered, \"Already sign up\");\r\n       IBoolaLib.registerCollector(profiles, _msgSender());\r\n       IERC20(token).approve(_msgSender(), newSignUpReward);\r\n    }\r\n\r\n    /**\r\n        @dev Adds new bin.\r\n            @notice Caller must already be approves as BinOwner .\r\n    */\r\n    function addNewBin() public payable isApproved(Category.BINOWNER, _msgSender()) {\r\n        IBoolaLib.registerNewBin(bins, _msgSender());\r\n        binCounter ++;\r\n    }\r\n\r\n    /**\r\n        @dev Removes bin at binId.\r\n            @notice Caller must already be approves as BinOwner .\r\n    */\r\n    function removeBin(uint binId) public isApproved(Category.BINOWNER, _msgSender()) {\r\n        address _owner = _getBinOwner(binId);\r\n        if(_msgSender() != owner()) require(_msgSender() == _owner, \"Not Authorized\");\r\n        \r\n        IBoolaLib.removeBin(bins, binId);\r\n    }\r\n\r\n    /**@dev Returns list of wastes under each 'State'\r\n        i.e Generated waste data, Collected waste data, ...rest\r\n    */\r\n    function garbages(uint8 _category) public view returns(WasteData[] memory) {\r\n        require(_category < 3, \"Invalid selecetor\");\r\n        return _garbages[State(_category)];\r\n    }\r\n\r\n    ///@dev Return owner of bin at binId. \r\n    function _getBinOwner(uint binId) internal view returns(address) {\r\n        return bins[binId].owner;\r\n    }\r\n\r\n    /**\r\n        @dev Whitelist user\r\n            Note Admin privilege.\r\n                cat should reference the Category enum.\r\n     */\r\n    function whitelistuser(address who, uint8 category) public onlyOwner validateCategory(category) {\r\n        IBoolaLib.setStatus(profiles, who, true, Category(category));\r\n    }\r\n\r\n    /**\r\n        @dev Blacklist user\r\n            Note Admin privilege.\r\n                cat should reference the Category enum.\r\n     */\r\n    function blacklistUser(address who, uint8 category) public onlyOwner validateCategory(category){\r\n        IBoolaLib.setStatus(profiles, who, false, Category(category));\r\n    }\r\n\r\n    /**\r\n        @dev Set new fee\r\n            @notice To perfectly select the right category,\r\n                category parameter should not be greater than 4.\r\n     */\r\n    function setFee(uint8 category, uint newFee) public onlyOwner {\r\n        require(category < 4, \"Invalid category\");\r\n        signUpFees[Category(category)] = newFee;\r\n    }\r\n\r\n    /**\r\n        @dev Generates new waste. \r\n        @notice Each waste is unique to another.\r\n            Note To successfully generate waste, bin id must be provided.\r\n                    This represents the destination where wastes are dumped.\r\n     */\r\n    function generateWaste(string memory _data) public isApproved(Category.GENERATOR, _msgSender()) {\r\n        State state = State.GENERATED;\r\n        totalWasteGenerated ++;\r\n        uint nonce = totalWasteGenerated;\r\n        IBoolaLib.portToMap(\r\n            _garbages, \r\n             WasteData(\r\n                keccak256(abi.encodePacked(bytes(_data), nonce)), \r\n                address(0), \r\n                _msgSender(), \r\n                address(0),\r\n                state\r\n            ), \r\n            state\r\n        );\r\n    }\r\n\r\n    function _empty() internal pure returns(Empty memory empty) {\r\n        uint[] memory wasteIds = new uint[](0);\r\n        string[] memory wastedata = new string[](0);\r\n        empty = Empty(wasteIds, wastedata);\r\n    }\r\n\r\n    ///@dev Generates multiple waste data\r\n    function generateMultipleWaste(string[] memory data) public validateSize(_empty().wasteIds, data) {\r\n        for (uint i=0; i < data.length; i++) {\r\n            generateWaste(data[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n        @dev Gets approval for user 'who'\r\n            @param cat - Category of user e.g COLLECTOR etc\r\n            @param who - Address of user.\r\n    */\r\n    function _getApproval(Category cat, address who) internal view returns(bool) {\r\n        return profiles[cat][who].approval;\r\n    }\r\n\r\n    /**\r\n        @dev Collect waste.\r\n            Note : Only generated waste can be collected\r\n            @param binId - Bin where the waste is located.\r\n            @param wasteId - Which waste to collect.\r\n                    Note - Every waste is unique to another.\r\n                            To make purchase of manure easy, wastes are recycled\r\n                            in 50s.\r\n     */\r\n    function recycle(uint binId, uint wasteId) internal isApproved(Category.RECYCLER, _msgSender()) validateWasteId(binId, wasteId, State.COLLECTED, \"Invalid waste pointer\") {\r\n        WasteData memory outWaste = IBoolaLib.popFromArray(bins, binId, wasteId);\r\n        IBoolaLib.portToMap(_garbages, outWaste, State.RECYCLED);\r\n        uint amount = collectorReward;\r\n\r\n        (uint collector, uint generator, uint team) = IBoolaLib.split(formula, amount);\r\n        IERC20(token).approve(outWaste.collector, collector);\r\n        IERC20(token).approve(outWaste.generator, generator);\r\n        IERC20(token).approve(address(this), team);\r\n\r\n    }\r\n\r\n    ///@notice Can recycle wastes greater than 0 but less than 51\r\n    function recycleMultiple(uint binId, uint[] memory wasteIds) public validateSize(wasteIds, _empty().wastedata) {\r\n        for (uint i = 0; i < wasteIds.length; i++) {\r\n            recycle(binId, wasteIds[i]);\r\n        }\r\n    }\r\n\r\n\r\n    /**@notice Withdraw reward if any {IBoola Token}\r\n        Note - Caller must have previous reward otherwise it fails.\r\n     */\r\n    function withdraw() public {\r\n        uint rewardBal = IERC20(token).allowance(address(this),_msgSender());\r\n        if(rewardBal == 0) revert NothingToWithdraw();\r\n        IERC20(token).transferFrom(address(this), _msgSender(), rewardBal);\r\n    }\r\n\r\n    /**\r\n        @dev Collect waste for disposal. \r\n            Note: Caller must be an approved waste collector.\r\n                must supply the following:\r\n                    o @param binId - Location of bin to deposit collected waste. ie bin index\r\n                    o @param wasteId - Identifier for waste collected.\r\n     */\r\n\r\n    function collectWaste(uint binId, uint wasteId) public isApproved(Category.COLLECTOR, _msgSender()) validateWasteId(binId, wasteId, State.GENERATED, \"Invalid waste pointer\") {\r\n        require(profiles[Category.COLLECTOR][_msgSender()].isRegistered,\"Not allowed\");\r\n\r\n        WasteData memory outWaste = IBoolaLib.popFromMapping(_garbages, wasteId, State.GENERATED);\r\n        IBoolaLib.portToArray(bins, binId, outWaste, State.COLLECTED);\r\n\r\n    }\r\n\r\n    //See `collectWaste()` except that this runs mulitple time.\r\n    function collectMultipleWaste(uint binId, uint[] memory wasteIds) public validateSize(wasteIds,_empty().wastedata) {\r\n        for (uint i = 0; i < wasteIds.length; i++) {\r\n            collectWaste(binId, wasteIds[i]);\r\n        }\r\n    }\r\n\r\n    /**@notice Buy recycled waste in form of manure\r\n        NOTE: Only recycled waste can be bought.\r\n        If available manure cannot cover requested volume, buyer simply \r\n        purchased available volume.\r\n     */\r\n    function buyRecycled(uint volume) public payable {\r\n        uint len = _garbages[State.RECYCLED].length;\r\n        uint actualVolume;\r\n        State _s = State.RECYCLED;\r\n        require(len > 0 && len >= volume, \"Not available\");\r\n        for(uint i = 0; i < volume; i++) {\r\n            WasteData memory wd = _garbages[_s][i];\r\n            if(wd.recycler != address(0)) {\r\n                actualVolume ++;\r\n                profiles[Category.SOLD][_msgSender()].purchased.push(WasteData(\r\n                    wd.value,\r\n                    wd.collector,\r\n                    wd.generator,\r\n                    wd.recycler,\r\n                    wd.state\r\n                ));\r\n                delete _garbages[_s][i];\r\n            }\r\n        }\r\n        uint amtToPay = price * actualVolume;\r\n        require(msg.value >= amtToPay, \"IValue\");\r\n        \r\n     }\r\n\r\n    ///@dev Sets new price for recycled waste.\r\n    function setPrice(uint newPrice) public onlyOwner {\r\n        price = newPrice;\r\n    }\r\n\r\n\r\n    ///@dev Sets new sign up reward. Note With access modifier\r\n    function setSignUpReward(uint newReward) public onlyOwner{\r\n        newSignUpReward = newReward;\r\n    }\r\n\r\n    ///@dev Sets new sign up reward. Note With access modifier\r\n    function setCollectorUpReward(uint newReward) public onlyOwner{\r\n        collectorReward = newReward;\r\n    }\r\n\r\n\r\n}\r\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata",
            "devdoc",
            "userdoc",
            "storageLayout",
            "evm.gasEstimates"
          ],
          "": [
            "ast"
          ]
        }
      },
      "metadata": {
        "useLiteralContent": true
      }
    }
  },
  "output": {
    "contracts": {
      "contracts/verify/IBoolaContractV.sol": {
        "Common": {
          "abi": [
            {
              "inputs": [],
              "name": "CannotDeleteBinInEngagedMode",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "EmptyBin",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidBinID",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidWasteId",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "MaxWasteTransportExceeded",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "NothingToWithdraw",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "UserAlreadyExist",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "UserAlreadyNotExist",
              "type": "error"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CannotDeleteBinInEngagedMode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyBin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBinID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWasteId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxWasteTransportExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserAlreadyExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserAlreadyNotExist\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verify/IBoolaContractV.sol\":\"Common\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verify/IBoolaContractV.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ninterface Common {\\r\\n  enum State { GENERATED, COLLECTED, RECYCLED }\\r\\n  enum Category { COLLECTOR, GENERATOR, RECYCLER, BINOWNER, SOLD }\\r\\n  enum Share { COLLECTOR, GENERATOR, TEAM }\\r\\n\\r\\n  error UserAlreadyExist();\\r\\n  error UserAlreadyNotExist();\\r\\n  error InvalidBinID();\\r\\n  error EmptyBin();\\r\\n  error CannotDeleteBinInEngagedMode();\\r\\n  error InvalidWasteId();\\r\\n  error NothingToWithdraw();\\r\\n  error MaxWasteTransportExceeded();\\r\\n\\r\\n  struct WasteData {\\r\\n    bytes32 value;\\r\\n    address collector;\\r\\n    address generator;\\r\\n    address recycler;\\r\\n    State state;\\r\\n  }\\r\\n\\r\\n  struct Profile {\\r\\n    uint32 transactionTime;\\r\\n    uint wasteCount;\\r\\n    bool approval;\\r\\n    bool isRegistered;\\r\\n    WasteData[] purchased;\\r\\n  }\\r\\n\\r\\n  struct BinData {\\r\\n    WasteData[] bin;\\r\\n    address owner;\\r\\n  }\\r\\n\\r\\n  struct Empty {\\r\\n    uint[] wasteIds;\\r\\n    string[] wastedata;\\r\\n  }\\r\\n\\r\\n}\\r\\n\\r\\nlibrary IBoolaLib {\\r\\n  /**\\r\\n    @dev Sign up new collector\\r\\n      @param self - Storage\\r\\n      @param newCollector - Address of new Collector to add.\\r\\n   */\\r\\n\\r\\n  function registerCollector(mapping (Common.Category=>mapping(address=>Common.Profile)) storage self, address newCollector) internal {\\r\\n    Common.Category _c = Common.Category.COLLECTOR;\\r\\n    self[_c][newCollector].transactionTime = _now();\\r\\n    self[_c][newCollector].wasteCount = 0;\\r\\n    self[_c][newCollector].approval = false;\\r\\n    self[_c][newCollector].isRegistered = true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Dual function: \\r\\n            o Recycles collected waste.\\r\\n            o Generate new waste.\\r\\n   */\\r\\n  function portToMap(\\r\\n    mapping (Common.State=>Common.WasteData[]) storage self, \\r\\n    Common.WasteData memory inWaste,\\r\\n    Common.State state\\r\\n  ) internal {\\r\\n    self[state].push(Common.WasteData(\\r\\n        inWaste.value,\\r\\n        inWaste.collector,\\r\\n        inWaste.generator,\\r\\n        inWaste.recycler,\\r\\n        state\\r\\n      )\\r\\n    );\\r\\n  }\\r\\n\\r\\n  ///@dev Moves waste to bin\\r\\n  function portToArray(Common.BinData[] storage self, uint binId, Common.WasteData memory inWaste, Common.State state) internal {\\r\\n    self[binId].bin.push(Common.WasteData(\\r\\n      inWaste.value,\\r\\n      inWaste.collector,\\r\\n      inWaste.generator,\\r\\n      inWaste.recycler,\\r\\n      state\\r\\n    )\\r\\n    );\\r\\n  }\\r\\n\\r\\n  ///@dev Removes waste at 'wasteId' from bin at 'binId' in bin array at hashmap 'self'\\r\\n  function popFromMapping(mapping (Common.State=>Common.WasteData[]) storage self, uint wasteId, Common.State state) internal returns(Common.WasteData memory _waste) {\\r\\n    _waste = self[state][wasteId];\\r\\n    delete self[state][wasteId];\\r\\n  }\\r\\n\\r\\n  ///@dev Removes waste at 'wasteId' from bin at 'binId' in bin array 'self'\\r\\n  function popFromArray(Common.BinData[] storage self, uint binId, uint wasteId) internal returns(Common.WasteData memory _waste) {\\r\\n    _waste = self[binId].bin[wasteId];\\r\\n    delete self[binId].bin[wasteId];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Sets collectors status to either true or false\\r\\n    @param value - Value to set status to.\\r\\n    @param who - User to set status for.\\r\\n    @param self - storage.\\r\\n      Note : If value is true, collector's status must be false vice versa.\\r\\n   */\\r\\n  function setStatus(mapping (Common.Category=>mapping(address=>Common.Profile)) storage self, address who, bool value, Common.Category cat) internal {\\r\\n    bool prevStatus = _previousStatus(self, who, cat);\\r\\n    if(value) {\\r\\n      if(prevStatus) revert Common.UserAlreadyExist();\\r\\n      self[cat][who].approval = true;\\r\\n    } else {\\r\\n      if(!prevStatus) revert Common.UserAlreadyNotExist();\\r\\n      self[cat][who].approval = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _previousStatus(mapping (Common.Category=>mapping(address=>Common.Profile)) storage self, address who, Common.Category cat) private view returns(bool) {\\r\\n    return self[cat][who].approval;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Registers new bin with owner.\\r\\n        @param owner - Bin Owner\\r\\n        @param self - Storage\\r\\n        @return newId \\r\\n   */\\r\\n  function registerNewBin(Common.BinData[] storage self, address owner) internal returns(uint newId) {\\r\\n    newId = self.length;\\r\\n    self.push();\\r\\n    self[newId].owner = owner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Removes bin from bin array.\\r\\n      @notice binId must be less than the bin array at any time since arrays are zero-based.\\r\\n      @param self - Storage\\r\\n   */\\r\\n  function removeBin(Common.BinData[] storage self, uint binId) internal {\\r\\n    (uint len, Common.BinData memory wasteBin)  = (self.length, self[binId]);\\r\\n    if(wasteBin.bin.length == 0) revert Common.EmptyBin();\\r\\n    for(uint i = 0; i < len; i++) {\\r\\n      if(wasteBin.bin[i].state < Common.State.RECYCLED) {\\r\\n        revert Common.CannotDeleteBinInEngagedMode();\\r\\n      }\\r\\n    } \\r\\n    delete self[binId];\\r\\n  }\\r\\n\\r\\n  function split(mapping (Common.Share=>uint8) storage self, uint amount) internal view returns(uint collector, uint generator, uint team) {\\r\\n    collector = (self[Common.Share.COLLECTOR] * amount) / 100;\\r\\n    generator = (self[Common.Share.GENERATOR] * amount) / 100;\\r\\n    team = (self[Common.Share.TEAM] * amount) / 100;\\r\\n\\r\\n  }\\r\\n\\r\\n  function _now() internal view returns(uint32) { return uint32(block.timestamp); }\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Main\\r\\n * @author Bobeu: https://github.com/bobeu\\r\\n * A smart contract that will tokenize the disposal and collection of waste. \\r\\n    Users get a token when they dispose of their waste in a waste bin, collectors \\r\\n    get token for collecting waste and taking them to the waste recyclers \\r\\n\\r\\n    The process of tokenization happens when the waste drops in the waste bin. Every\\r\\n    waste bin has a unique wallet ID which will receive the token at the end of evacuation.\\r\\n    The owners of the waste bin will have a DAO. \\r\\n\\r\\n    *Wallet \\r\\n    *Token (iBoola token) which would be paired against either Avalanche, Celo or Polygon \\r\\n    *New users get 10 $IBT after sign up \\r\\n    *Community of waste bins will have a DAO \\r\\n    Waste generators get 10% collectors get 65 while the iBoola team gets 25% \\r\\n    Decimals: use standard 18 decimals \\r\\n\\r\\n    Mintable: not mintable\\r\\n\\r\\n    Ownership privilege :  30% locked for 5 years, 20% for dev team 45% for  initial circulation, \\r\\n    5% for presale \\r\\n\\r\\n    PSEUDO\\r\\n    ======\\r\\n    Parties:\\r\\n        o Waste generators.\\r\\n        o Collectors.\\r\\n        o Recyclers.\\r\\n\\r\\n    o When waste is disposed or evacuated, then reward collectors.\\r\\n    o Each waste bin has a unique identifer and an owner.\\r\\n    o On sign up, user gets 10 $IBT Token.\\r\\n    o Waste collectors own a DAO.\\r\\n    o Waste bin owners own a DAO.\\r\\n    o Reward sharing formula Note - It is configurable. The owner account is able to \\r\\n        set each of these fields.\\r\\n        - Waste generators 10%.\\r\\n        - Collectors 65%.\\r\\n        - Team 25%.\\r\\n */\\r\\ncontract IBoolaContractV is Context, Common, Ownable {\\r\\n\\r\\n    ///@dev New sign up reward\\r\\n    uint public newSignUpReward;\\r\\n\\r\\n    ///@dev iBoola Token\\r\\n    address public token;\\r\\n\\r\\n    ///@dev Total waste generated to date\\r\\n    uint256 public totalWasteGenerated;\\r\\n\\r\\n    ///@dev Collector reward\\r\\n    uint public collectorReward;\\r\\n\\r\\n    ///@dev Total bin registered to date\\r\\n    uint public binCounter;\\r\\n\\r\\n    ///@dev Price of recycled waste\\r\\n    uint public price;\\r\\n\\r\\n    /**\\r\\n        @dev Array of bins \\r\\n            { Contain bins which contain collected wastes which contains wastedata}\\r\\n            @notice Bins in this list are owned by addresses.\\r\\n    */\\r\\n    BinData[] public bins;\\r\\n    \\r\\n    mapping (Share=>uint8) public formula;\\r\\n    \\r\\n\\r\\n    /**\\r\\n        @dev Mapping of Generated and Recycled Waste State -> binId (binCounter) -> WasteData\\r\\n        Keys type: \\r\\n            o State\\r\\n            o uint256\\r\\n\\r\\n        value:\\r\\n           array of struct(s) \\r\\n     */\\r\\n    mapping (State=>WasteData[]) private _garbages;\\r\\n    \\r\\n    /**\\r\\n        @dev Mapping of Waste State -> user -> profile\\r\\n        Keys type: \\r\\n            o State\\r\\n            o address\\r\\n\\r\\n        value:\\r\\n            struct \\r\\n     */\\r\\n    mapping (Category=>mapping(address=>Profile)) profiles;\\r\\n\\r\\n    /**\\r\\n        @dev Sign up fees for different category.\\r\\n            @notice - It can be configured to suit any category.\\r\\n     */\\r\\n    mapping (Category=>uint256) public signUpFees;\\r\\n\\r\\n    ///@dev Rewards\\r\\n    // mapping(address=>uint) public rewards;\\r\\n\\r\\n\\r\\n    modifier validateWasteId(uint binId, uint wasteId, State state, string memory errorMessage) {\\r\\n        if(binId >= bins.length) revert InvalidBinID();\\r\\n        if(state == State.COLLECTED) {\\r\\n            if(wasteId >= bins[binId].bin.length) revert InvalidWasteId();\\r\\n        }\\r\\n        require(bins[binId].bin[wasteId].state == state, errorMessage);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    ///Checks user's existence\\r\\n    modifier isApproved(Category cat, address who) {\\r\\n        if(!_getApproval(cat, who)) revert UserAlreadyNotExist();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    ///@dev Validates category\\r\\n    modifier validateCategory(uint8 cat) {\\r\\n        require(cat < 4, \\\"Invalid category\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    //Checks that the size of wastes not greater than 50\\r\\n    modifier validateSize(uint[] memory wasteIDs, string[] memory wastedata) {\\r\\n        (uint8 low, uint8 high) = (0, 50);\\r\\n        wastedata.length == 0 ? require(\\r\\n            wasteIDs.length > low && wasteIDs.length <= high, \\r\\n            \\\"invalid\\\"\\r\\n        ) : require(wastedata.length > low && wastedata.length <= high, \\\"invalid\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor (address _token) { \\r\\n        token = _token;\\r\\n        newSignUpReward = 10 * (10 ** 18);\\r\\n        profiles[Category.BINOWNER][_msgSender()].approval = true;\\r\\n        formula[Share.COLLECTOR] = 65;\\r\\n        formula[Share.GENERATOR] = 10;\\r\\n        formula[Share.TEAM] = 25;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Sign up function. \\r\\n                o Caller must not already be a member. \\r\\n    */\\r\\n    function signUpAsWasteCollector() public {\\r\\n       require(!profiles[Category.COLLECTOR][_msgSender()].isRegistered, \\\"Already sign up\\\");\\r\\n       IBoolaLib.registerCollector(profiles, _msgSender());\\r\\n       IERC20(token).approve(_msgSender(), newSignUpReward);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Adds new bin.\\r\\n            @notice Caller must already be approves as BinOwner .\\r\\n    */\\r\\n    function addNewBin() public payable isApproved(Category.BINOWNER, _msgSender()) {\\r\\n        IBoolaLib.registerNewBin(bins, _msgSender());\\r\\n        binCounter ++;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Removes bin at binId.\\r\\n            @notice Caller must already be approves as BinOwner .\\r\\n    */\\r\\n    function removeBin(uint binId) public isApproved(Category.BINOWNER, _msgSender()) {\\r\\n        address _owner = _getBinOwner(binId);\\r\\n        if(_msgSender() != owner()) require(_msgSender() == _owner, \\\"Not Authorized\\\");\\r\\n        \\r\\n        IBoolaLib.removeBin(bins, binId);\\r\\n    }\\r\\n\\r\\n    /**@dev Returns list of wastes under each 'State'\\r\\n        i.e Generated waste data, Collected waste data, ...rest\\r\\n    */\\r\\n    function garbages(uint8 _category) public view returns(WasteData[] memory) {\\r\\n        require(_category < 3, \\\"Invalid selecetor\\\");\\r\\n        return _garbages[State(_category)];\\r\\n    }\\r\\n\\r\\n    ///@dev Return owner of bin at binId. \\r\\n    function _getBinOwner(uint binId) internal view returns(address) {\\r\\n        return bins[binId].owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Whitelist user\\r\\n            Note Admin privilege.\\r\\n                cat should reference the Category enum.\\r\\n     */\\r\\n    function whitelistuser(address who, uint8 category) public onlyOwner validateCategory(category) {\\r\\n        IBoolaLib.setStatus(profiles, who, true, Category(category));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Blacklist user\\r\\n            Note Admin privilege.\\r\\n                cat should reference the Category enum.\\r\\n     */\\r\\n    function blacklistUser(address who, uint8 category) public onlyOwner validateCategory(category){\\r\\n        IBoolaLib.setStatus(profiles, who, false, Category(category));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Set new fee\\r\\n            @notice To perfectly select the right category,\\r\\n                category parameter should not be greater than 4.\\r\\n     */\\r\\n    function setFee(uint8 category, uint newFee) public onlyOwner {\\r\\n        require(category < 4, \\\"Invalid category\\\");\\r\\n        signUpFees[Category(category)] = newFee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Generates new waste. \\r\\n        @notice Each waste is unique to another.\\r\\n            Note To successfully generate waste, bin id must be provided.\\r\\n                    This represents the destination where wastes are dumped.\\r\\n     */\\r\\n    function generateWaste(string memory _data) public isApproved(Category.GENERATOR, _msgSender()) {\\r\\n        State state = State.GENERATED;\\r\\n        totalWasteGenerated ++;\\r\\n        uint nonce = totalWasteGenerated;\\r\\n        IBoolaLib.portToMap(\\r\\n            _garbages, \\r\\n             WasteData(\\r\\n                keccak256(abi.encodePacked(bytes(_data), nonce)), \\r\\n                address(0), \\r\\n                _msgSender(), \\r\\n                address(0),\\r\\n                state\\r\\n            ), \\r\\n            state\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _empty() internal pure returns(Empty memory empty) {\\r\\n        uint[] memory wasteIds = new uint[](0);\\r\\n        string[] memory wastedata = new string[](0);\\r\\n        empty = Empty(wasteIds, wastedata);\\r\\n    }\\r\\n\\r\\n    ///@dev Generates multiple waste data\\r\\n    function generateMultipleWaste(string[] memory data) public validateSize(_empty().wasteIds, data) {\\r\\n        for (uint i=0; i < data.length; i++) {\\r\\n            generateWaste(data[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Gets approval for user 'who'\\r\\n            @param cat - Category of user e.g COLLECTOR etc\\r\\n            @param who - Address of user.\\r\\n    */\\r\\n    function _getApproval(Category cat, address who) internal view returns(bool) {\\r\\n        return profiles[cat][who].approval;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Collect waste.\\r\\n            Note : Only generated waste can be collected\\r\\n            @param binId - Bin where the waste is located.\\r\\n            @param wasteId - Which waste to collect.\\r\\n                    Note - Every waste is unique to another.\\r\\n                            To make purchase of manure easy, wastes are recycled\\r\\n                            in 50s.\\r\\n     */\\r\\n    function recycle(uint binId, uint wasteId) internal isApproved(Category.RECYCLER, _msgSender()) validateWasteId(binId, wasteId, State.COLLECTED, \\\"Invalid waste pointer\\\") {\\r\\n        WasteData memory outWaste = IBoolaLib.popFromArray(bins, binId, wasteId);\\r\\n        IBoolaLib.portToMap(_garbages, outWaste, State.RECYCLED);\\r\\n        uint amount = collectorReward;\\r\\n\\r\\n        (uint collector, uint generator, uint team) = IBoolaLib.split(formula, amount);\\r\\n        IERC20(token).approve(outWaste.collector, collector);\\r\\n        IERC20(token).approve(outWaste.generator, generator);\\r\\n        IERC20(token).approve(address(this), team);\\r\\n\\r\\n    }\\r\\n\\r\\n    ///@notice Can recycle wastes greater than 0 but less than 51\\r\\n    function recycleMultiple(uint binId, uint[] memory wasteIds) public validateSize(wasteIds, _empty().wastedata) {\\r\\n        for (uint i = 0; i < wasteIds.length; i++) {\\r\\n            recycle(binId, wasteIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /**@notice Withdraw reward if any {IBoola Token}\\r\\n        Note - Caller must have previous reward otherwise it fails.\\r\\n     */\\r\\n    function withdraw() public {\\r\\n        uint rewardBal = IERC20(token).allowance(address(this),_msgSender());\\r\\n        if(rewardBal == 0) revert NothingToWithdraw();\\r\\n        IERC20(token).transferFrom(address(this), _msgSender(), rewardBal);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Collect waste for disposal. \\r\\n            Note: Caller must be an approved waste collector.\\r\\n                must supply the following:\\r\\n                    o @param binId - Location of bin to deposit collected waste. ie bin index\\r\\n                    o @param wasteId - Identifier for waste collected.\\r\\n     */\\r\\n\\r\\n    function collectWaste(uint binId, uint wasteId) public isApproved(Category.COLLECTOR, _msgSender()) validateWasteId(binId, wasteId, State.GENERATED, \\\"Invalid waste pointer\\\") {\\r\\n        require(profiles[Category.COLLECTOR][_msgSender()].isRegistered,\\\"Not allowed\\\");\\r\\n\\r\\n        WasteData memory outWaste = IBoolaLib.popFromMapping(_garbages, wasteId, State.GENERATED);\\r\\n        IBoolaLib.portToArray(bins, binId, outWaste, State.COLLECTED);\\r\\n\\r\\n    }\\r\\n\\r\\n    //See `collectWaste()` except that this runs mulitple time.\\r\\n    function collectMultipleWaste(uint binId, uint[] memory wasteIds) public validateSize(wasteIds,_empty().wastedata) {\\r\\n        for (uint i = 0; i < wasteIds.length; i++) {\\r\\n            collectWaste(binId, wasteIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**@notice Buy recycled waste in form of manure\\r\\n        NOTE: Only recycled waste can be bought.\\r\\n        If available manure cannot cover requested volume, buyer simply \\r\\n        purchased available volume.\\r\\n     */\\r\\n    function buyRecycled(uint volume) public payable {\\r\\n        uint len = _garbages[State.RECYCLED].length;\\r\\n        uint actualVolume;\\r\\n        State _s = State.RECYCLED;\\r\\n        require(len > 0 && len >= volume, \\\"Not available\\\");\\r\\n        for(uint i = 0; i < volume; i++) {\\r\\n            WasteData memory wd = _garbages[_s][i];\\r\\n            if(wd.recycler != address(0)) {\\r\\n                actualVolume ++;\\r\\n                profiles[Category.SOLD][_msgSender()].purchased.push(WasteData(\\r\\n                    wd.value,\\r\\n                    wd.collector,\\r\\n                    wd.generator,\\r\\n                    wd.recycler,\\r\\n                    wd.state\\r\\n                ));\\r\\n                delete _garbages[_s][i];\\r\\n            }\\r\\n        }\\r\\n        uint amtToPay = price * actualVolume;\\r\\n        require(msg.value >= amtToPay, \\\"IValue\\\");\\r\\n        \\r\\n     }\\r\\n\\r\\n    ///@dev Sets new price for recycled waste.\\r\\n    function setPrice(uint newPrice) public onlyOwner {\\r\\n        price = newPrice;\\r\\n    }\\r\\n\\r\\n\\r\\n    ///@dev Sets new sign up reward. Note With access modifier\\r\\n    function setSignUpReward(uint newReward) public onlyOwner{\\r\\n        newSignUpReward = newReward;\\r\\n    }\\r\\n\\r\\n    ///@dev Sets new sign up reward. Note With access modifier\\r\\n    function setCollectorUpReward(uint newReward) public onlyOwner{\\r\\n        collectorReward = newReward;\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xe9c6308cd0170828d91de300dc117779f7ca18bab2c009fcd3acb91a0473f54c\",\"license\":\"GPL-3.0\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "Context": {
          "abi": [],
          "devdoc": {
            "details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verify/IBoolaContractV.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verify/IBoolaContractV.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ninterface Common {\\r\\n  enum State { GENERATED, COLLECTED, RECYCLED }\\r\\n  enum Category { COLLECTOR, GENERATOR, RECYCLER, BINOWNER, SOLD }\\r\\n  enum Share { COLLECTOR, GENERATOR, TEAM }\\r\\n\\r\\n  error UserAlreadyExist();\\r\\n  error UserAlreadyNotExist();\\r\\n  error InvalidBinID();\\r\\n  error EmptyBin();\\r\\n  error CannotDeleteBinInEngagedMode();\\r\\n  error InvalidWasteId();\\r\\n  error NothingToWithdraw();\\r\\n  error MaxWasteTransportExceeded();\\r\\n\\r\\n  struct WasteData {\\r\\n    bytes32 value;\\r\\n    address collector;\\r\\n    address generator;\\r\\n    address recycler;\\r\\n    State state;\\r\\n  }\\r\\n\\r\\n  struct Profile {\\r\\n    uint32 transactionTime;\\r\\n    uint wasteCount;\\r\\n    bool approval;\\r\\n    bool isRegistered;\\r\\n    WasteData[] purchased;\\r\\n  }\\r\\n\\r\\n  struct BinData {\\r\\n    WasteData[] bin;\\r\\n    address owner;\\r\\n  }\\r\\n\\r\\n  struct Empty {\\r\\n    uint[] wasteIds;\\r\\n    string[] wastedata;\\r\\n  }\\r\\n\\r\\n}\\r\\n\\r\\nlibrary IBoolaLib {\\r\\n  /**\\r\\n    @dev Sign up new collector\\r\\n      @param self - Storage\\r\\n      @param newCollector - Address of new Collector to add.\\r\\n   */\\r\\n\\r\\n  function registerCollector(mapping (Common.Category=>mapping(address=>Common.Profile)) storage self, address newCollector) internal {\\r\\n    Common.Category _c = Common.Category.COLLECTOR;\\r\\n    self[_c][newCollector].transactionTime = _now();\\r\\n    self[_c][newCollector].wasteCount = 0;\\r\\n    self[_c][newCollector].approval = false;\\r\\n    self[_c][newCollector].isRegistered = true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Dual function: \\r\\n            o Recycles collected waste.\\r\\n            o Generate new waste.\\r\\n   */\\r\\n  function portToMap(\\r\\n    mapping (Common.State=>Common.WasteData[]) storage self, \\r\\n    Common.WasteData memory inWaste,\\r\\n    Common.State state\\r\\n  ) internal {\\r\\n    self[state].push(Common.WasteData(\\r\\n        inWaste.value,\\r\\n        inWaste.collector,\\r\\n        inWaste.generator,\\r\\n        inWaste.recycler,\\r\\n        state\\r\\n      )\\r\\n    );\\r\\n  }\\r\\n\\r\\n  ///@dev Moves waste to bin\\r\\n  function portToArray(Common.BinData[] storage self, uint binId, Common.WasteData memory inWaste, Common.State state) internal {\\r\\n    self[binId].bin.push(Common.WasteData(\\r\\n      inWaste.value,\\r\\n      inWaste.collector,\\r\\n      inWaste.generator,\\r\\n      inWaste.recycler,\\r\\n      state\\r\\n    )\\r\\n    );\\r\\n  }\\r\\n\\r\\n  ///@dev Removes waste at 'wasteId' from bin at 'binId' in bin array at hashmap 'self'\\r\\n  function popFromMapping(mapping (Common.State=>Common.WasteData[]) storage self, uint wasteId, Common.State state) internal returns(Common.WasteData memory _waste) {\\r\\n    _waste = self[state][wasteId];\\r\\n    delete self[state][wasteId];\\r\\n  }\\r\\n\\r\\n  ///@dev Removes waste at 'wasteId' from bin at 'binId' in bin array 'self'\\r\\n  function popFromArray(Common.BinData[] storage self, uint binId, uint wasteId) internal returns(Common.WasteData memory _waste) {\\r\\n    _waste = self[binId].bin[wasteId];\\r\\n    delete self[binId].bin[wasteId];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Sets collectors status to either true or false\\r\\n    @param value - Value to set status to.\\r\\n    @param who - User to set status for.\\r\\n    @param self - storage.\\r\\n      Note : If value is true, collector's status must be false vice versa.\\r\\n   */\\r\\n  function setStatus(mapping (Common.Category=>mapping(address=>Common.Profile)) storage self, address who, bool value, Common.Category cat) internal {\\r\\n    bool prevStatus = _previousStatus(self, who, cat);\\r\\n    if(value) {\\r\\n      if(prevStatus) revert Common.UserAlreadyExist();\\r\\n      self[cat][who].approval = true;\\r\\n    } else {\\r\\n      if(!prevStatus) revert Common.UserAlreadyNotExist();\\r\\n      self[cat][who].approval = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _previousStatus(mapping (Common.Category=>mapping(address=>Common.Profile)) storage self, address who, Common.Category cat) private view returns(bool) {\\r\\n    return self[cat][who].approval;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Registers new bin with owner.\\r\\n        @param owner - Bin Owner\\r\\n        @param self - Storage\\r\\n        @return newId \\r\\n   */\\r\\n  function registerNewBin(Common.BinData[] storage self, address owner) internal returns(uint newId) {\\r\\n    newId = self.length;\\r\\n    self.push();\\r\\n    self[newId].owner = owner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Removes bin from bin array.\\r\\n      @notice binId must be less than the bin array at any time since arrays are zero-based.\\r\\n      @param self - Storage\\r\\n   */\\r\\n  function removeBin(Common.BinData[] storage self, uint binId) internal {\\r\\n    (uint len, Common.BinData memory wasteBin)  = (self.length, self[binId]);\\r\\n    if(wasteBin.bin.length == 0) revert Common.EmptyBin();\\r\\n    for(uint i = 0; i < len; i++) {\\r\\n      if(wasteBin.bin[i].state < Common.State.RECYCLED) {\\r\\n        revert Common.CannotDeleteBinInEngagedMode();\\r\\n      }\\r\\n    } \\r\\n    delete self[binId];\\r\\n  }\\r\\n\\r\\n  function split(mapping (Common.Share=>uint8) storage self, uint amount) internal view returns(uint collector, uint generator, uint team) {\\r\\n    collector = (self[Common.Share.COLLECTOR] * amount) / 100;\\r\\n    generator = (self[Common.Share.GENERATOR] * amount) / 100;\\r\\n    team = (self[Common.Share.TEAM] * amount) / 100;\\r\\n\\r\\n  }\\r\\n\\r\\n  function _now() internal view returns(uint32) { return uint32(block.timestamp); }\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Main\\r\\n * @author Bobeu: https://github.com/bobeu\\r\\n * A smart contract that will tokenize the disposal and collection of waste. \\r\\n    Users get a token when they dispose of their waste in a waste bin, collectors \\r\\n    get token for collecting waste and taking them to the waste recyclers \\r\\n\\r\\n    The process of tokenization happens when the waste drops in the waste bin. Every\\r\\n    waste bin has a unique wallet ID which will receive the token at the end of evacuation.\\r\\n    The owners of the waste bin will have a DAO. \\r\\n\\r\\n    *Wallet \\r\\n    *Token (iBoola token) which would be paired against either Avalanche, Celo or Polygon \\r\\n    *New users get 10 $IBT after sign up \\r\\n    *Community of waste bins will have a DAO \\r\\n    Waste generators get 10% collectors get 65 while the iBoola team gets 25% \\r\\n    Decimals: use standard 18 decimals \\r\\n\\r\\n    Mintable: not mintable\\r\\n\\r\\n    Ownership privilege :  30% locked for 5 years, 20% for dev team 45% for  initial circulation, \\r\\n    5% for presale \\r\\n\\r\\n    PSEUDO\\r\\n    ======\\r\\n    Parties:\\r\\n        o Waste generators.\\r\\n        o Collectors.\\r\\n        o Recyclers.\\r\\n\\r\\n    o When waste is disposed or evacuated, then reward collectors.\\r\\n    o Each waste bin has a unique identifer and an owner.\\r\\n    o On sign up, user gets 10 $IBT Token.\\r\\n    o Waste collectors own a DAO.\\r\\n    o Waste bin owners own a DAO.\\r\\n    o Reward sharing formula Note - It is configurable. The owner account is able to \\r\\n        set each of these fields.\\r\\n        - Waste generators 10%.\\r\\n        - Collectors 65%.\\r\\n        - Team 25%.\\r\\n */\\r\\ncontract IBoolaContractV is Context, Common, Ownable {\\r\\n\\r\\n    ///@dev New sign up reward\\r\\n    uint public newSignUpReward;\\r\\n\\r\\n    ///@dev iBoola Token\\r\\n    address public token;\\r\\n\\r\\n    ///@dev Total waste generated to date\\r\\n    uint256 public totalWasteGenerated;\\r\\n\\r\\n    ///@dev Collector reward\\r\\n    uint public collectorReward;\\r\\n\\r\\n    ///@dev Total bin registered to date\\r\\n    uint public binCounter;\\r\\n\\r\\n    ///@dev Price of recycled waste\\r\\n    uint public price;\\r\\n\\r\\n    /**\\r\\n        @dev Array of bins \\r\\n            { Contain bins which contain collected wastes which contains wastedata}\\r\\n            @notice Bins in this list are owned by addresses.\\r\\n    */\\r\\n    BinData[] public bins;\\r\\n    \\r\\n    mapping (Share=>uint8) public formula;\\r\\n    \\r\\n\\r\\n    /**\\r\\n        @dev Mapping of Generated and Recycled Waste State -> binId (binCounter) -> WasteData\\r\\n        Keys type: \\r\\n            o State\\r\\n            o uint256\\r\\n\\r\\n        value:\\r\\n           array of struct(s) \\r\\n     */\\r\\n    mapping (State=>WasteData[]) private _garbages;\\r\\n    \\r\\n    /**\\r\\n        @dev Mapping of Waste State -> user -> profile\\r\\n        Keys type: \\r\\n            o State\\r\\n            o address\\r\\n\\r\\n        value:\\r\\n            struct \\r\\n     */\\r\\n    mapping (Category=>mapping(address=>Profile)) profiles;\\r\\n\\r\\n    /**\\r\\n        @dev Sign up fees for different category.\\r\\n            @notice - It can be configured to suit any category.\\r\\n     */\\r\\n    mapping (Category=>uint256) public signUpFees;\\r\\n\\r\\n    ///@dev Rewards\\r\\n    // mapping(address=>uint) public rewards;\\r\\n\\r\\n\\r\\n    modifier validateWasteId(uint binId, uint wasteId, State state, string memory errorMessage) {\\r\\n        if(binId >= bins.length) revert InvalidBinID();\\r\\n        if(state == State.COLLECTED) {\\r\\n            if(wasteId >= bins[binId].bin.length) revert InvalidWasteId();\\r\\n        }\\r\\n        require(bins[binId].bin[wasteId].state == state, errorMessage);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    ///Checks user's existence\\r\\n    modifier isApproved(Category cat, address who) {\\r\\n        if(!_getApproval(cat, who)) revert UserAlreadyNotExist();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    ///@dev Validates category\\r\\n    modifier validateCategory(uint8 cat) {\\r\\n        require(cat < 4, \\\"Invalid category\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    //Checks that the size of wastes not greater than 50\\r\\n    modifier validateSize(uint[] memory wasteIDs, string[] memory wastedata) {\\r\\n        (uint8 low, uint8 high) = (0, 50);\\r\\n        wastedata.length == 0 ? require(\\r\\n            wasteIDs.length > low && wasteIDs.length <= high, \\r\\n            \\\"invalid\\\"\\r\\n        ) : require(wastedata.length > low && wastedata.length <= high, \\\"invalid\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor (address _token) { \\r\\n        token = _token;\\r\\n        newSignUpReward = 10 * (10 ** 18);\\r\\n        profiles[Category.BINOWNER][_msgSender()].approval = true;\\r\\n        formula[Share.COLLECTOR] = 65;\\r\\n        formula[Share.GENERATOR] = 10;\\r\\n        formula[Share.TEAM] = 25;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Sign up function. \\r\\n                o Caller must not already be a member. \\r\\n    */\\r\\n    function signUpAsWasteCollector() public {\\r\\n       require(!profiles[Category.COLLECTOR][_msgSender()].isRegistered, \\\"Already sign up\\\");\\r\\n       IBoolaLib.registerCollector(profiles, _msgSender());\\r\\n       IERC20(token).approve(_msgSender(), newSignUpReward);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Adds new bin.\\r\\n            @notice Caller must already be approves as BinOwner .\\r\\n    */\\r\\n    function addNewBin() public payable isApproved(Category.BINOWNER, _msgSender()) {\\r\\n        IBoolaLib.registerNewBin(bins, _msgSender());\\r\\n        binCounter ++;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Removes bin at binId.\\r\\n            @notice Caller must already be approves as BinOwner .\\r\\n    */\\r\\n    function removeBin(uint binId) public isApproved(Category.BINOWNER, _msgSender()) {\\r\\n        address _owner = _getBinOwner(binId);\\r\\n        if(_msgSender() != owner()) require(_msgSender() == _owner, \\\"Not Authorized\\\");\\r\\n        \\r\\n        IBoolaLib.removeBin(bins, binId);\\r\\n    }\\r\\n\\r\\n    /**@dev Returns list of wastes under each 'State'\\r\\n        i.e Generated waste data, Collected waste data, ...rest\\r\\n    */\\r\\n    function garbages(uint8 _category) public view returns(WasteData[] memory) {\\r\\n        require(_category < 3, \\\"Invalid selecetor\\\");\\r\\n        return _garbages[State(_category)];\\r\\n    }\\r\\n\\r\\n    ///@dev Return owner of bin at binId. \\r\\n    function _getBinOwner(uint binId) internal view returns(address) {\\r\\n        return bins[binId].owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Whitelist user\\r\\n            Note Admin privilege.\\r\\n                cat should reference the Category enum.\\r\\n     */\\r\\n    function whitelistuser(address who, uint8 category) public onlyOwner validateCategory(category) {\\r\\n        IBoolaLib.setStatus(profiles, who, true, Category(category));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Blacklist user\\r\\n            Note Admin privilege.\\r\\n                cat should reference the Category enum.\\r\\n     */\\r\\n    function blacklistUser(address who, uint8 category) public onlyOwner validateCategory(category){\\r\\n        IBoolaLib.setStatus(profiles, who, false, Category(category));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Set new fee\\r\\n            @notice To perfectly select the right category,\\r\\n                category parameter should not be greater than 4.\\r\\n     */\\r\\n    function setFee(uint8 category, uint newFee) public onlyOwner {\\r\\n        require(category < 4, \\\"Invalid category\\\");\\r\\n        signUpFees[Category(category)] = newFee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Generates new waste. \\r\\n        @notice Each waste is unique to another.\\r\\n            Note To successfully generate waste, bin id must be provided.\\r\\n                    This represents the destination where wastes are dumped.\\r\\n     */\\r\\n    function generateWaste(string memory _data) public isApproved(Category.GENERATOR, _msgSender()) {\\r\\n        State state = State.GENERATED;\\r\\n        totalWasteGenerated ++;\\r\\n        uint nonce = totalWasteGenerated;\\r\\n        IBoolaLib.portToMap(\\r\\n            _garbages, \\r\\n             WasteData(\\r\\n                keccak256(abi.encodePacked(bytes(_data), nonce)), \\r\\n                address(0), \\r\\n                _msgSender(), \\r\\n                address(0),\\r\\n                state\\r\\n            ), \\r\\n            state\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _empty() internal pure returns(Empty memory empty) {\\r\\n        uint[] memory wasteIds = new uint[](0);\\r\\n        string[] memory wastedata = new string[](0);\\r\\n        empty = Empty(wasteIds, wastedata);\\r\\n    }\\r\\n\\r\\n    ///@dev Generates multiple waste data\\r\\n    function generateMultipleWaste(string[] memory data) public validateSize(_empty().wasteIds, data) {\\r\\n        for (uint i=0; i < data.length; i++) {\\r\\n            generateWaste(data[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Gets approval for user 'who'\\r\\n            @param cat - Category of user e.g COLLECTOR etc\\r\\n            @param who - Address of user.\\r\\n    */\\r\\n    function _getApproval(Category cat, address who) internal view returns(bool) {\\r\\n        return profiles[cat][who].approval;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Collect waste.\\r\\n            Note : Only generated waste can be collected\\r\\n            @param binId - Bin where the waste is located.\\r\\n            @param wasteId - Which waste to collect.\\r\\n                    Note - Every waste is unique to another.\\r\\n                            To make purchase of manure easy, wastes are recycled\\r\\n                            in 50s.\\r\\n     */\\r\\n    function recycle(uint binId, uint wasteId) internal isApproved(Category.RECYCLER, _msgSender()) validateWasteId(binId, wasteId, State.COLLECTED, \\\"Invalid waste pointer\\\") {\\r\\n        WasteData memory outWaste = IBoolaLib.popFromArray(bins, binId, wasteId);\\r\\n        IBoolaLib.portToMap(_garbages, outWaste, State.RECYCLED);\\r\\n        uint amount = collectorReward;\\r\\n\\r\\n        (uint collector, uint generator, uint team) = IBoolaLib.split(formula, amount);\\r\\n        IERC20(token).approve(outWaste.collector, collector);\\r\\n        IERC20(token).approve(outWaste.generator, generator);\\r\\n        IERC20(token).approve(address(this), team);\\r\\n\\r\\n    }\\r\\n\\r\\n    ///@notice Can recycle wastes greater than 0 but less than 51\\r\\n    function recycleMultiple(uint binId, uint[] memory wasteIds) public validateSize(wasteIds, _empty().wastedata) {\\r\\n        for (uint i = 0; i < wasteIds.length; i++) {\\r\\n            recycle(binId, wasteIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /**@notice Withdraw reward if any {IBoola Token}\\r\\n        Note - Caller must have previous reward otherwise it fails.\\r\\n     */\\r\\n    function withdraw() public {\\r\\n        uint rewardBal = IERC20(token).allowance(address(this),_msgSender());\\r\\n        if(rewardBal == 0) revert NothingToWithdraw();\\r\\n        IERC20(token).transferFrom(address(this), _msgSender(), rewardBal);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Collect waste for disposal. \\r\\n            Note: Caller must be an approved waste collector.\\r\\n                must supply the following:\\r\\n                    o @param binId - Location of bin to deposit collected waste. ie bin index\\r\\n                    o @param wasteId - Identifier for waste collected.\\r\\n     */\\r\\n\\r\\n    function collectWaste(uint binId, uint wasteId) public isApproved(Category.COLLECTOR, _msgSender()) validateWasteId(binId, wasteId, State.GENERATED, \\\"Invalid waste pointer\\\") {\\r\\n        require(profiles[Category.COLLECTOR][_msgSender()].isRegistered,\\\"Not allowed\\\");\\r\\n\\r\\n        WasteData memory outWaste = IBoolaLib.popFromMapping(_garbages, wasteId, State.GENERATED);\\r\\n        IBoolaLib.portToArray(bins, binId, outWaste, State.COLLECTED);\\r\\n\\r\\n    }\\r\\n\\r\\n    //See `collectWaste()` except that this runs mulitple time.\\r\\n    function collectMultipleWaste(uint binId, uint[] memory wasteIds) public validateSize(wasteIds,_empty().wastedata) {\\r\\n        for (uint i = 0; i < wasteIds.length; i++) {\\r\\n            collectWaste(binId, wasteIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**@notice Buy recycled waste in form of manure\\r\\n        NOTE: Only recycled waste can be bought.\\r\\n        If available manure cannot cover requested volume, buyer simply \\r\\n        purchased available volume.\\r\\n     */\\r\\n    function buyRecycled(uint volume) public payable {\\r\\n        uint len = _garbages[State.RECYCLED].length;\\r\\n        uint actualVolume;\\r\\n        State _s = State.RECYCLED;\\r\\n        require(len > 0 && len >= volume, \\\"Not available\\\");\\r\\n        for(uint i = 0; i < volume; i++) {\\r\\n            WasteData memory wd = _garbages[_s][i];\\r\\n            if(wd.recycler != address(0)) {\\r\\n                actualVolume ++;\\r\\n                profiles[Category.SOLD][_msgSender()].purchased.push(WasteData(\\r\\n                    wd.value,\\r\\n                    wd.collector,\\r\\n                    wd.generator,\\r\\n                    wd.recycler,\\r\\n                    wd.state\\r\\n                ));\\r\\n                delete _garbages[_s][i];\\r\\n            }\\r\\n        }\\r\\n        uint amtToPay = price * actualVolume;\\r\\n        require(msg.value >= amtToPay, \\\"IValue\\\");\\r\\n        \\r\\n     }\\r\\n\\r\\n    ///@dev Sets new price for recycled waste.\\r\\n    function setPrice(uint newPrice) public onlyOwner {\\r\\n        price = newPrice;\\r\\n    }\\r\\n\\r\\n\\r\\n    ///@dev Sets new sign up reward. Note With access modifier\\r\\n    function setSignUpReward(uint newReward) public onlyOwner{\\r\\n        newSignUpReward = newReward;\\r\\n    }\\r\\n\\r\\n    ///@dev Sets new sign up reward. Note With access modifier\\r\\n    function setCollectorUpReward(uint newReward) public onlyOwner{\\r\\n        collectorReward = newReward;\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xe9c6308cd0170828d91de300dc117779f7ca18bab2c009fcd3acb91a0473f54c\",\"license\":\"GPL-3.0\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "IBoolaContractV": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_token",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "inputs": [],
              "name": "CannotDeleteBinInEngagedMode",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "EmptyBin",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidBinID",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidWasteId",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "MaxWasteTransportExceeded",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "NothingToWithdraw",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "UserAlreadyExist",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "UserAlreadyNotExist",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "addNewBin",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "binCounter",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "bins",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "who",
                  "type": "address"
                },
                {
                  "internalType": "uint8",
                  "name": "category",
                  "type": "uint8"
                }
              ],
              "name": "blacklistUser",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "volume",
                  "type": "uint256"
                }
              ],
              "name": "buyRecycled",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "binId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256[]",
                  "name": "wasteIds",
                  "type": "uint256[]"
                }
              ],
              "name": "collectMultipleWaste",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "binId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "wasteId",
                  "type": "uint256"
                }
              ],
              "name": "collectWaste",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "collectorReward",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "enum Common.Share",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "name": "formula",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint8",
                  "name": "_category",
                  "type": "uint8"
                }
              ],
              "name": "garbages",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "value",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "address",
                      "name": "collector",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "generator",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "recycler",
                      "type": "address"
                    },
                    {
                      "internalType": "enum Common.State",
                      "name": "state",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Common.WasteData[]",
                  "name": "",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "string[]",
                  "name": "data",
                  "type": "string[]"
                }
              ],
              "name": "generateMultipleWaste",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "_data",
                  "type": "string"
                }
              ],
              "name": "generateWaste",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "newSignUpReward",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "price",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "binId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256[]",
                  "name": "wasteIds",
                  "type": "uint256[]"
                }
              ],
              "name": "recycleMultiple",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "binId",
                  "type": "uint256"
                }
              ],
              "name": "removeBin",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "newReward",
                  "type": "uint256"
                }
              ],
              "name": "setCollectorUpReward",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint8",
                  "name": "category",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "newFee",
                  "type": "uint256"
                }
              ],
              "name": "setFee",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "newPrice",
                  "type": "uint256"
                }
              ],
              "name": "setPrice",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "newReward",
                  "type": "uint256"
                }
              ],
              "name": "setSignUpReward",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "signUpAsWasteCollector",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "enum Common.Category",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "name": "signUpFees",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "token",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalWasteGenerated",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "who",
                  "type": "address"
                },
                {
                  "internalType": "uint8",
                  "name": "category",
                  "type": "uint8"
                }
              ],
              "name": "whitelistuser",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "withdraw",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "author": "Bobeu: https://github.com/bobeu A smart contract that will tokenize the disposal and collection of waste.  Users get a token when they dispose of their waste in a waste bin, collectors  get token for collecting waste and taking them to the waste recyclers  The process of tokenization happens when the waste drops in the waste bin. Every waste bin has a unique wallet ID which will receive the token at the end of evacuation. The owners of the waste bin will have a DAO.  Wallet  Token (iBoola token) which would be paired against either Avalanche, Celo or Polygon  New users get 10 $IBT after sign up  Community of waste bins will have a DAO  Waste generators get 10% collectors get 65 while the iBoola team gets 25%  Decimals: use standard 18 decimals  Mintable: not mintable Ownership privilege :  30% locked for 5 years, 20% for dev team 45% for  initial circulation,  5% for presale  PSEUDO ====== Parties: o Waste generators. o Collectors. o Recyclers. o When waste is disposed or evacuated, then reward collectors. o Each waste bin has a unique identifer and an owner. o On sign up, user gets 10 $IBT Token. o Waste collectors own a DAO. o Waste bin owners own a DAO. o Reward sharing formula Note - It is configurable. The owner account is able to  set each of these fields. - Waste generators 10%. - Collectors 65%. - Team 25%.",
            "kind": "dev",
            "methods": {
              "addNewBin()": {
                "details": "Adds new bin."
              },
              "blacklistUser(address,uint8)": {
                "details": "Blacklist user Note Admin privilege. cat should reference the Category enum."
              },
              "collectWaste(uint256,uint256)": {
                "details": "Collect waste for disposal.  Note: Caller must be an approved waste collector. must supply the following:",
                "params": {
                  "binId": "- Location of bin to deposit collected waste. ie bin index",
                  "wasteId": "- Identifier for waste collected."
                }
              },
              "garbages(uint8)": {
                "details": "Returns list of wastes under each 'State' i.e Generated waste data, Collected waste data, ...rest"
              },
              "generateMultipleWaste(string[])": {
                "details": "Generates multiple waste data"
              },
              "generateWaste(string)": {
                "details": "Generates new waste. "
              },
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "removeBin(uint256)": {
                "details": "Removes bin at binId."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
              },
              "setCollectorUpReward(uint256)": {
                "details": "Sets new sign up reward. Note With access modifier"
              },
              "setFee(uint8,uint256)": {
                "details": "Set new fee"
              },
              "setPrice(uint256)": {
                "details": "Sets new price for recycled waste."
              },
              "setSignUpReward(uint256)": {
                "details": "Sets new sign up reward. Note With access modifier"
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              },
              "whitelistuser(address,uint8)": {
                "details": "Whitelist user Note Admin privilege. cat should reference the Category enum."
              }
            },
            "stateVariables": {
              "_garbages": {
                "details": "Mapping of Generated and Recycled Waste State -> binId (binCounter) -> WasteData Keys type:  o State o uint256 value: array of struct(s) "
              },
              "binCounter": {
                "details": "Total bin registered to date"
              },
              "bins": {
                "details": "Array of bins  { Contain bins which contain collected wastes which contains wastedata}"
              },
              "collectorReward": {
                "details": "Collector reward"
              },
              "newSignUpReward": {
                "details": "New sign up reward"
              },
              "price": {
                "details": "Price of recycled waste"
              },
              "profiles": {
                "details": "Mapping of Waste State -> user -> profile Keys type:  o State o address value: struct "
              },
              "signUpFees": {
                "details": "Sign up fees for different category."
              },
              "token": {
                "details": "iBoola Token"
              },
              "totalWasteGenerated": {
                "details": "Total waste generated to date"
              }
            },
            "title": "Main",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:326:1",
                    "statements": [
                      {
                        "nodeType": "YulBlock",
                        "src": "6:3:1",
                        "statements": []
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "95:229:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "141:26:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "150:6:1"
                                        },
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "158:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "143:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "143:22:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "143:22:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "116:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "125:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "112:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "112:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "137:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "108:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "108:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "105:2:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "176:29:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "195:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "189:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "189:16:1"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nodeType": "YulTypedName",
                                  "src": "180:5:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "268:26:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "277:6:1"
                                        },
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "285:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "270:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "270:22:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "270:22:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "227:5:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "238:5:1"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "253:3:1",
                                                    "type": "",
                                                    "value": "160"
                                                  },
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "258:1:1",
                                                    "type": "",
                                                    "value": "1"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "shl",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "249:3:1"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "249:11:1"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "262:1:1",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sub",
                                              "nodeType": "YulIdentifier",
                                              "src": "245:3:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "245:19:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "234:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "234:31:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "224:2:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "224:42:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "217:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "217:50:1"
                              },
                              "nodeType": "YulIf",
                              "src": "214:2:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "303:15:1",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "313:5:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "303:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_address_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "61:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "72:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "84:6:1",
                            "type": ""
                          }
                        ],
                        "src": "14:310:1"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(value0, value0) }\n        value0 := value\n    }\n}",
                  "id": 1,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "linkReferences": {},
              "object": "",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x308B CODESIZE SUB DUP1 PUSH3 0x308B DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x20F JUMP JUMPDEST PUSH3 0x3F CALLER PUSH3 0x1BF JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR SWAP1 SSTORE PUSH8 0x8AC7230489E80000 PUSH1 0x1 SWAP1 DUP2 SSTORE PUSH1 0x3 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH32 0xA856840544DC26124927ADD067D799967EAC11BE13E14D82CC281EA46FA39759 SWAP1 PUSH3 0x9E CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD SWAP4 ISZERO ISZERO PUSH1 0xFF NOT SWAP5 DUP6 AND OR SWAP1 SSTORE DUP1 DUP1 MSTORE PUSH1 0x8 SWAP2 DUP3 SWAP1 MSTORE PUSH32 0x5EFF886EA0CE6CA488A3D6E336D6C0F75F46D19B42C06CE5EE98E42C96D256C7 DUP1 SLOAD SWAP1 SWAP4 AND PUSH1 0x41 OR SWAP1 SWAP3 SSTORE PUSH1 0xA SWAP2 PUSH1 0x1 PUSH1 0x2 DUP2 GT ISZERO PUSH3 0x125 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x19 PUSH1 0x8 PUSH1 0x0 PUSH1 0x2 DUP1 DUP2 GT ISZERO PUSH3 0x172 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH3 0x192 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP PUSH3 0x23F JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x221 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x238 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2E3C DUP1 PUSH3 0x24F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C1 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x93051D95 GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xC437A2F0 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xF2FDE38B GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x4E9 JUMPI DUP1 PUSH4 0xF9404506 EQ PUSH2 0x509 JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0x51F JUMPI DUP1 PUSH4 0xFFC2105C EQ PUSH2 0x53F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC437A2F0 EQ PUSH2 0x48E JUMPI DUP1 PUSH4 0xE47C294D EQ PUSH2 0x4A1 JUMPI DUP1 PUSH4 0xEA77351F EQ PUSH2 0x4C1 JUMPI DUP1 PUSH4 0xF2D03E15 EQ PUSH2 0x4C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA741C0DF GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xA741C0DF EQ PUSH2 0x3DF JUMPI DUP1 PUSH4 0xB7588280 EQ PUSH2 0x40C JUMPI DUP1 PUSH4 0xC2F0C279 EQ PUSH2 0x42C JUMPI DUP1 PUSH4 0xC3864CCE EQ PUSH2 0x46E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x93051D95 EQ PUSH2 0x389 JUMPI DUP1 PUSH4 0x955EF11A EQ PUSH2 0x3A9 JUMPI DUP1 PUSH4 0xA035B1FE EQ PUSH2 0x3C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x885C7B38 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x885C7B38 EQ PUSH2 0x2F3 JUMPI DUP1 PUSH4 0x8C6AA3F5 EQ PUSH2 0x32B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x34B JUMPI DUP1 PUSH4 0x91B7F5ED EQ PUSH2 0x369 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2A9 JUMPI DUP1 PUSH4 0x72938A14 EQ PUSH2 0x2BE JUMPI DUP1 PUSH4 0x84B038DF EQ PUSH2 0x2DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x235EB9F5 GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x235EB9F5 EQ PUSH2 0x23E JUMPI DUP1 PUSH4 0x31B59ED7 EQ PUSH2 0x254 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x274 JUMPI DUP1 PUSH4 0x41311BC3 EQ PUSH2 0x289 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x95DB2D EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0xBDD7063 EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0x1F2A4A3F EQ PUSH2 0x228 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F3 PUSH2 0x1E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A19 JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x221 CALLDATASIZE PUSH1 0x4 PUSH2 0x2AC2 JUMP JUMPDEST PUSH2 0x555 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x234 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F3 PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F3 PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x260 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x26F CALLDATASIZE PUSH1 0x4 PUSH2 0x2911 JUMP JUMPDEST PUSH2 0x63B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x69C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x295 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x2A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2AC2 JUMP JUMPDEST PUSH2 0x7E3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x8B7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x2D9 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A92 JUMP JUMPDEST PUSH2 0x8CB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x8D8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x313 PUSH2 0x30E CALLDATASIZE PUSH1 0x4 PUSH2 0x2A92 JUMP JUMPDEST PUSH2 0xA42 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x337 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x346 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B9C JUMP JUMPDEST PUSH2 0xA74 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x357 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x313 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x375 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x384 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A92 JUMP JUMPDEST PUSH2 0xB1A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x395 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x3A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A92 JUMP JUMPDEST PUSH2 0xB27 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x3C4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2943 JUMP JUMPDEST PUSH2 0xBE2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F3 PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3FF PUSH2 0x3FA CALLDATASIZE PUSH1 0x4 PUSH2 0x2B82 JUMP JUMPDEST PUSH2 0xCBB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x2BE7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x418 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x427 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A57 JUMP JUMPDEST PUSH2 0xE5F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x438 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH2 0x447 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A38 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x489 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B61 JUMP JUMPDEST PUSH2 0xF39 JUMP JUMPDEST PUSH2 0x226 PUSH2 0x49C CALLDATASIZE PUSH1 0x4 PUSH2 0x2A92 JUMP JUMPDEST PUSH2 0x11A1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x4BC CALLDATASIZE PUSH1 0x4 PUSH2 0x2911 JUMP JUMPDEST PUSH2 0x15F1 JUMP JUMPDEST PUSH2 0x226 PUSH2 0x1648 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x4E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A92 JUMP JUMPDEST PUSH2 0x1697 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x504 CALLDATASIZE PUSH1 0x4 PUSH2 0x28F0 JUMP JUMPDEST PUSH2 0x16A4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x515 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F3 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x52B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0x313 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x54B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F3 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST DUP1 PUSH2 0x55E PUSH2 0x171A JUMP JUMPDEST PUSH1 0x20 ADD MLOAD DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x32 SWAP1 ISZERO PUSH2 0x5B0 JUMPI DUP2 PUSH1 0xFF AND DUP4 MLOAD GT DUP1 ISZERO PUSH2 0x586 JUMPI POP DUP1 PUSH1 0xFF AND DUP4 MLOAD GT ISZERO JUMPDEST PUSH2 0x5AB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A2 SWAP1 PUSH2 0x2CDE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E3 JUMP JUMPDEST DUP2 PUSH1 0xFF AND DUP5 MLOAD GT DUP1 ISZERO PUSH2 0x5C7 JUMPI POP DUP1 PUSH1 0xFF AND DUP5 MLOAD GT ISZERO JUMPDEST PUSH2 0x5E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A2 SWAP1 PUSH2 0x2CDE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x632 JUMPI PUSH2 0x620 DUP8 DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x613 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x177A JUMP JUMPDEST DUP1 PUSH2 0x62A DUP2 PUSH2 0x2DBF JUMP JUMPDEST SWAP2 POP POP PUSH2 0x5E6 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x643 PUSH2 0x1B25 JUMP JUMPDEST DUP1 PUSH1 0x4 DUP2 PUSH1 0xFF AND LT PUSH2 0x667 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A2 SWAP1 PUSH2 0x2CB4 JUMP JUMPDEST PUSH2 0x697 PUSH1 0xA DUP5 PUSH1 0x1 DUP6 PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x692 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1B7F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH1 0x44 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x701 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x725 SWAP2 SWAP1 PUSH2 0x2AAA JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x745 JUMPI PUSH1 0x40 MLOAD PUSH4 0x686827B PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23B872DD ADDRESS CALLER PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7BB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7DF SWAP2 SWAP1 PUSH2 0x29F9 JUMP JUMPDEST POP POP JUMP JUMPDEST DUP1 PUSH2 0x7EC PUSH2 0x171A JUMP JUMPDEST PUSH1 0x20 ADD MLOAD DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x32 SWAP1 ISZERO PUSH2 0x835 JUMPI DUP2 PUSH1 0xFF AND DUP4 MLOAD GT DUP1 ISZERO PUSH2 0x814 JUMPI POP DUP1 PUSH1 0xFF AND DUP4 MLOAD GT ISZERO JUMPDEST PUSH2 0x830 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A2 SWAP1 PUSH2 0x2CDE JUMP JUMPDEST PUSH2 0x868 JUMP JUMPDEST DUP2 PUSH1 0xFF AND DUP5 MLOAD GT DUP1 ISZERO PUSH2 0x84C JUMPI POP DUP1 PUSH1 0xFF AND DUP5 MLOAD GT ISZERO JUMPDEST PUSH2 0x868 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A2 SWAP1 PUSH2 0x2CDE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x632 JUMPI PUSH2 0x8A5 DUP8 DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x898 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xF39 JUMP JUMPDEST DUP1 PUSH2 0x8AF DUP2 PUSH2 0x2DBF JUMP JUMPDEST SWAP2 POP POP PUSH2 0x86B JUMP JUMPDEST PUSH2 0x8BF PUSH2 0x1B25 JUMP JUMPDEST PUSH2 0x8C9 PUSH1 0x0 PUSH2 0x1CD7 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x8D3 PUSH2 0x1B25 JUMP JUMPDEST PUSH1 0x4 SSTORE JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x13DA86008BA1C6922DAEE3E07DB95305EF49EBCED9F5467A0B8613FCC6B343E3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x951 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x416C7265616479207369676E20757 PUSH1 0x8C SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5A2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x13DA86008BA1C6922DAEE3E07DB95305EF49EBCED9F5467A0B8613FCC6B343E3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH4 0xFFFFFFFF NOT AND TIMESTAMP PUSH4 0xFFFFFFFF AND OR DUP2 SSTORE PUSH1 0x1 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0x100 PUSH2 0xFFFF NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x95EA7B3 CALLER PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA1B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA3F SWAP2 SWAP1 PUSH2 0x29F9 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x7 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xA52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x1 PUSH1 0x2 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH2 0xA7C PUSH2 0x1B25 JUMP JUMPDEST PUSH1 0x4 DUP3 PUSH1 0xFF AND LT PUSH2 0xA9F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A2 SWAP1 PUSH2 0x2CB4 JUMP JUMPDEST DUP1 PUSH1 0xB PUSH1 0x0 DUP5 PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xAC7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xAE6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xB05 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SSTORE POP POP JUMP JUMPDEST PUSH2 0xB22 PUSH2 0x1B25 JUMP JUMPDEST PUSH1 0x6 SSTORE JUMP JUMPDEST PUSH1 0x3 CALLER PUSH2 0xB34 DUP3 DUP3 PUSH2 0x1D27 JUMP JUMPDEST PUSH2 0xB51 JUMPI PUSH1 0x40 MLOAD PUSH4 0xAA6318D3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB5C DUP5 PUSH2 0x1DA1 JUMP JUMPDEST SWAP1 POP PUSH2 0xB70 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xBD1 JUMPI CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ PUSH2 0xBD1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x139BDD08105D5D1A1BDC9A5E9959 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5A2 JUMP JUMPDEST PUSH2 0xBDC PUSH1 0x7 DUP6 PUSH2 0x1DE7 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0xBEA PUSH2 0x171A JUMP JUMPDEST MLOAD DUP2 MLOAD DUP3 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x32 SWAP1 ISZERO PUSH2 0xC32 JUMPI DUP2 PUSH1 0xFF AND DUP4 MLOAD GT DUP1 ISZERO PUSH2 0xC11 JUMPI POP DUP1 PUSH1 0xFF AND DUP4 MLOAD GT ISZERO JUMPDEST PUSH2 0xC2D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A2 SWAP1 PUSH2 0x2CDE JUMP JUMPDEST PUSH2 0xC65 JUMP JUMPDEST DUP2 PUSH1 0xFF AND DUP5 MLOAD GT DUP1 ISZERO PUSH2 0xC49 JUMPI POP DUP1 PUSH1 0xFF AND DUP5 MLOAD GT ISZERO JUMPDEST PUSH2 0xC65 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A2 SWAP1 PUSH2 0x2CDE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0xCB3 JUMPI PUSH2 0xCA1 DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xC94 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xE5F JUMP JUMPDEST DUP1 PUSH2 0xCAB DUP2 PUSH2 0x2DBF JUMP JUMPDEST SWAP2 POP POP PUSH2 0xC68 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP3 PUSH1 0xFF AND LT PUSH2 0xD04 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x24B73B30B634B21039B2B632B1B2BA37B9 PUSH1 0x79 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5A2 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x0 DUP4 PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xD2B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xD4A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xD69 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0xE54 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x4 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x2 DUP1 DUP3 ADD SLOAD DUP6 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP2 ADD SLOAD SWAP4 DUP5 AND PUSH1 0x60 DUP5 ADD MSTORE SWAP2 SWAP3 PUSH1 0x80 DUP5 ADD SWAP2 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND SWAP1 DUP2 GT ISZERO PUSH2 0xE22 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xE41 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xD97 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 CALLER PUSH2 0xE6C DUP3 DUP3 PUSH2 0x1D27 JUMP JUMPDEST PUSH2 0xE89 JUMPI PUSH1 0x40 MLOAD PUSH4 0xAA6318D3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x0 SWAP2 DUP3 PUSH2 0xE9A DUP4 PUSH2 0x2DBF JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x3 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0xF32 SWAP1 PUSH1 0x9 SWAP1 DUP1 PUSH2 0xEC3 DUP10 DUP7 PUSH1 0xC0 DUP5 ADD PUSH2 0x2BC5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xEF5 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD DUP6 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xF2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 MSTORE DUP5 PUSH2 0x2028 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0xF46 DUP3 DUP3 PUSH2 0x1D27 JUMP JUMPDEST PUSH2 0xF63 JUMPI PUSH1 0x40 MLOAD PUSH4 0xAA6318D3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP4 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x15 DUP2 MSTORE PUSH1 0x20 ADD PUSH21 0x24B73B30B634B2103BB0B9BA32903837B4B73A32B9 PUSH1 0x59 SHL DUP2 MSTORE POP PUSH1 0x7 DUP1 SLOAD SWAP1 POP DUP5 LT PUSH2 0xFBA JUMPI PUSH1 0x40 MLOAD PUSH4 0x83204183 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xFDC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ ISZERO PUSH2 0x1033 JUMPI PUSH1 0x7 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x1003 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 SWAP1 SWAP2 MUL ADD SLOAD DUP4 LT PUSH2 0x1033 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E849FFB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1053 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x7 DUP6 DUP2 SLOAD DUP2 LT PUSH2 0x1074 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x10A4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x10E2 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ DUP2 SWAP1 PUSH2 0x1102 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A2 SWAP2 SWAP1 PUSH2 0x2C81 JUMP JUMPDEST POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x13DA86008BA1C6922DAEE3E07DB95305EF49EBCED9F5467A0B8613FCC6B343E3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1177 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x139BDD08185B1B1BDDD959 PUSH1 0xAA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5A2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1186 PUSH1 0x9 DUP10 PUSH1 0x0 PUSH2 0x21A2 JUMP JUMPDEST SWAP1 POP PUSH2 0x1196 PUSH1 0x7 DUP11 DUP4 PUSH1 0x1 PUSH2 0x23A2 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH32 0x6CDE3CEA4B3A3FB2488B2808BAE7556F4A405E50F65E1794383BC026131B13C3 SLOAD SWAP2 DUP3 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x11DF JUMPI POP DUP4 DUP4 LT ISZERO JUMPDEST PUSH2 0x121B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x4E6F7420617661696C61626C65 PUSH1 0x98 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5A2 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x15A5 JUMPI PUSH1 0x0 PUSH1 0x9 PUSH1 0x0 DUP5 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x124C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x126B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1298 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x4 SWAP4 SWAP1 SWAP4 MUL SWAP1 SWAP2 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x2 DUP1 DUP3 ADD SLOAD DUP6 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP2 ADD SLOAD SWAP4 DUP5 AND PUSH1 0x60 DUP5 ADD MSTORE SWAP2 SWAP3 PUSH1 0x80 DUP5 ADD SWAP2 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND SWAP1 DUP2 GT ISZERO PUSH2 0x131D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x133C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 MSTORE POP PUSH1 0x60 DUP2 ADD MLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x1592 JUMPI DUP4 PUSH2 0x135F DUP2 PUSH2 0x2DBF JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE SWAP1 SWAP6 POP PUSH32 0xE1EB2B2161A492C07C5A334E48012567CBA93EC021043F53C1955516A3C5A841 SWAP2 POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP4 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x80 ADD MLOAD PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1427 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 MSTORE DUP2 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP5 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0x4 SWAP1 SWAP4 MUL ADD SWAP2 DUP3 SSTORE SWAP3 DUP3 ADD MLOAD SWAP3 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x2 DUP1 DUP5 ADD DUP1 SLOAD DUP5 AND SWAP3 DUP8 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x3 DUP5 ADD DUP1 SLOAD SWAP4 DUP5 AND SWAP2 SWAP1 SWAP7 AND SWAP1 DUP2 OR DUP7 SSTORE PUSH1 0x80 DUP6 ADD MLOAD SWAP5 SWAP6 SWAP4 SWAP5 SWAP4 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND OR SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DUP5 SWAP1 DUP2 GT ISZERO PUSH2 0x14D7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MUL OR SWAP1 SSTORE POP POP POP PUSH1 0x9 PUSH1 0x0 DUP5 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1502 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1521 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x154E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 PUSH1 0x4 SWAP1 SWAP2 MUL ADD SWAP1 DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP3 ADD DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND SWAP1 SSTORE JUMPDEST POP DUP1 PUSH2 0x159D DUP2 PUSH2 0x2DBF JUMP JUMPDEST SWAP2 POP POP PUSH2 0x121E JUMP JUMPDEST POP PUSH1 0x0 DUP3 PUSH1 0x6 SLOAD PUSH2 0x15B6 SWAP2 SWAP1 PUSH2 0x2D74 JUMP JUMPDEST SWAP1 POP DUP1 CALLVALUE LT ISZERO PUSH2 0xF32 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x6 PUSH1 0x24 DUP3 ADD MSTORE PUSH6 0x4956616C7565 PUSH1 0xD0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5A2 JUMP JUMPDEST PUSH2 0x15F9 PUSH2 0x1B25 JUMP JUMPDEST DUP1 PUSH1 0x4 DUP2 PUSH1 0xFF AND LT PUSH2 0x161D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A2 SWAP1 PUSH2 0x2CB4 JUMP JUMPDEST PUSH2 0x697 PUSH1 0xA DUP5 PUSH1 0x0 DUP6 PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x692 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x3 CALLER PUSH2 0x1655 DUP3 DUP3 PUSH2 0x1D27 JUMP JUMPDEST PUSH2 0x1672 JUMPI PUSH1 0x40 MLOAD PUSH4 0xAA6318D3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x167D PUSH1 0x7 CALLER PUSH2 0x24FE JUMP JUMPDEST POP PUSH1 0x5 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x168E DUP4 PUSH2 0x2DBF JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP POP POP JUMP JUMPDEST PUSH2 0x169F PUSH2 0x1B25 JUMP JUMPDEST PUSH1 0x1 SSTORE JUMP JUMPDEST PUSH2 0x16AC PUSH2 0x1B25 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1711 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5A2 JUMP JUMPDEST PUSH2 0xA3F DUP2 PUSH2 0x1CD7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x60 DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE SWAP2 DUP2 ADD DUP3 DUP2 MSTORE DUP2 DUP6 ADD SWAP1 SWAP5 MSTORE SWAP2 SWAP3 DUP2 PUSH2 0x1761 JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x174C JUMPI SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 CALLER PUSH2 0x1787 DUP3 DUP3 PUSH2 0x1D27 JUMP JUMPDEST PUSH2 0x17A4 JUMPI PUSH1 0x40 MLOAD PUSH4 0xAA6318D3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP4 PUSH1 0x1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x15 DUP2 MSTORE PUSH1 0x20 ADD PUSH21 0x24B73B30B634B2103BB0B9BA32903837B4B73A32B9 PUSH1 0x59 SHL DUP2 MSTORE POP PUSH1 0x7 DUP1 SLOAD SWAP1 POP DUP5 LT PUSH2 0x17FB JUMPI PUSH1 0x40 MLOAD PUSH4 0x83204183 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x181D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ ISZERO PUSH2 0x1874 JUMPI PUSH1 0x7 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x1844 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 SWAP1 SWAP2 MUL ADD SLOAD DUP4 LT PUSH2 0x1874 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E849FFB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1894 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x7 DUP6 DUP2 SLOAD DUP2 LT PUSH2 0x18B5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x18E5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1923 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ DUP2 SWAP1 PUSH2 0x1943 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A2 SWAP2 SWAP1 PUSH2 0x2C81 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x1952 PUSH1 0x7 DUP11 DUP11 PUSH2 0x2569 JUMP JUMPDEST SWAP1 POP PUSH2 0x1961 PUSH1 0x9 DUP3 PUSH1 0x2 PUSH2 0x2028 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 DUP1 DUP1 PUSH2 0x1973 PUSH1 0x8 DUP6 PUSH2 0x26E2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x20 DUP10 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE SWAP5 SWAP8 POP SWAP3 SWAP6 POP SWAP1 SWAP4 POP AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x19E1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A05 SWAP2 SWAP1 PUSH2 0x29F9 JUMP JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x40 DUP7 DUP2 ADD MLOAD SWAP1 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE SWAP2 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A6C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A90 SWAP2 SWAP1 PUSH2 0x29F9 JUMP JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1ADD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1AF1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B15 SWAP2 SWAP1 PUSH2 0x29F9 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x8C9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5A2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B8C DUP6 DUP6 DUP5 PUSH2 0x2777 JUMP JUMPDEST SWAP1 POP DUP3 ISZERO PUSH2 0x1C34 JUMPI DUP1 ISZERO PUSH2 0x1BB3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3EE20B69 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP6 PUSH1 0x0 DUP5 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1BD8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1BF7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP3 MSTORE SWAP1 SWAP3 MSTORE SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0xF32 JUMP JUMPDEST DUP1 PUSH2 0x1C52 JUMPI PUSH1 0x40 MLOAD PUSH4 0xAA6318D3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 DUP5 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1C77 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1C96 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP3 MSTORE SWAP1 SWAP3 MSTORE SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH1 0xFF NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA PUSH1 0x0 DUP5 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1D4D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1D6C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP3 MSTORE SWAP1 SWAP3 MSTORE SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1DC4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x1 PUSH1 0x2 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP5 DUP5 DUP3 DUP2 LT PUSH2 0x1E0D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x1F08 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x4 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x2 DUP1 DUP3 ADD SLOAD DUP6 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP2 ADD SLOAD SWAP4 DUP5 AND PUSH1 0x60 DUP5 ADD MSTORE SWAP2 SWAP3 PUSH1 0x80 DUP5 ADD SWAP2 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND SWAP1 DUP2 GT ISZERO PUSH2 0x1ED6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1EF5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1E4B JUMP JUMPDEST POP POP POP SWAP1 DUP3 MSTORE POP PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE DUP1 MLOAD MLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH2 0x1F4A JUMPI PUSH1 0x40 MLOAD PUSH4 0x347682F5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1FD5 JUMPI PUSH1 0x2 DUP3 MLOAD DUP1 MLOAD DUP4 SWAP1 DUP2 LT PUSH2 0x1F79 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1FA4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST LT ISZERO PUSH2 0x1FC3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3F00676B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x1FCD DUP2 PUSH2 0x2DBF JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1F4D JUMP JUMPDEST POP DUP4 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x1FF6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 PUSH1 0x2 SWAP1 SWAP2 MUL ADD SWAP1 PUSH2 0x2010 DUP3 DUP3 PUSH2 0x27F1 JUMP JUMPDEST POP PUSH1 0x1 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x0 DUP3 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x204B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x206A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x20E6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 MSTORE DUP2 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP5 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0x4 SWAP1 SWAP4 MUL ADD SWAP2 DUP3 SSTORE SWAP3 DUP3 ADD MLOAD SWAP3 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x2 DUP1 DUP5 ADD DUP1 SLOAD DUP5 AND SWAP3 DUP8 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x3 DUP5 ADD DUP1 SLOAD SWAP4 DUP5 AND SWAP2 SWAP1 SWAP7 AND SWAP1 DUP2 OR DUP7 SSTORE PUSH1 0x80 DUP6 ADD MLOAD SWAP5 SWAP6 SWAP4 SWAP5 SWAP4 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND OR SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DUP5 SWAP1 DUP2 GT ISZERO PUSH2 0x2196 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MUL OR SWAP1 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x21D1 PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH1 0x80 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP4 PUSH1 0x0 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x21F4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x2213 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x2240 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x4 SWAP4 SWAP1 SWAP4 MUL SWAP1 SWAP2 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x2 DUP1 DUP3 ADD SLOAD DUP6 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP2 ADD SLOAD SWAP4 DUP5 AND PUSH1 0x60 DUP5 ADD MSTORE SWAP2 SWAP3 PUSH1 0x80 DUP5 ADD SWAP2 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND SWAP1 DUP2 GT ISZERO PUSH2 0x22C5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x22E4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 MSTORE POP SWAP1 POP DUP4 PUSH1 0x0 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x230C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x232B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x2358 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 PUSH1 0x4 SWAP1 SWAP2 MUL ADD SWAP1 DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP3 ADD DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND SWAP1 SSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP4 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x23C2 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x2441 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 MSTORE DUP2 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP5 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0x4 SWAP1 SWAP4 MUL ADD SWAP2 DUP3 SSTORE SWAP3 DUP3 ADD MLOAD SWAP3 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x2 DUP1 DUP5 ADD DUP1 SLOAD DUP5 AND SWAP3 DUP8 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x3 DUP5 ADD DUP1 SLOAD SWAP4 DUP5 AND SWAP2 SWAP1 SWAP7 AND SWAP1 DUP2 OR DUP7 SSTORE PUSH1 0x80 DUP6 ADD MLOAD SWAP5 SWAP6 SWAP4 SWAP5 SWAP4 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND OR SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DUP5 SWAP1 DUP2 GT ISZERO PUSH2 0x24F1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 DUP2 ADD DUP1 DUP5 SSTORE PUSH1 0x0 DUP5 SWAP1 MSTORE DUP3 SWAP1 DUP5 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x252E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2598 PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH1 0x80 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP4 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x25B8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x25E8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x4 SWAP4 SWAP1 SWAP4 MUL SWAP1 SWAP2 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x2 DUP1 DUP3 ADD SLOAD DUP6 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP2 ADD SLOAD SWAP4 DUP5 AND PUSH1 0x60 DUP5 ADD MSTORE SWAP2 SWAP3 PUSH1 0x80 DUP5 ADD SWAP2 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND SWAP1 DUP2 GT ISZERO PUSH2 0x266D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x268C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE POP POP SWAP1 POP DUP4 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x26B2 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2358 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP1 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP2 SWAP1 DUP2 SWAP1 PUSH1 0x64 SWAP1 PUSH2 0x2706 SWAP1 DUP7 SWAP1 PUSH1 0xFF AND PUSH2 0x2D74 JUMP JUMPDEST PUSH2 0x2710 SWAP2 SWAP1 PUSH2 0x2D54 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP8 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP4 POP PUSH1 0x64 SWAP1 PUSH2 0x2735 SWAP1 DUP7 SWAP1 PUSH1 0xFF AND PUSH2 0x2D74 JUMP JUMPDEST PUSH2 0x273F SWAP2 SWAP1 PUSH2 0x2D54 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP8 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP3 POP PUSH1 0x64 SWAP1 PUSH2 0x2764 SWAP1 DUP7 SWAP1 PUSH1 0xFF AND PUSH2 0x2D74 JUMP JUMPDEST PUSH2 0x276E SWAP2 SWAP1 PUSH2 0x2D54 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x0 DUP4 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x279C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x27BB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP3 MSTORE SWAP1 SWAP3 MSTORE SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x0 DUP3 SSTORE PUSH1 0x4 MUL SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA3F SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x2854 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP3 ADD DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x3 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND SWAP1 SSTORE PUSH1 0x4 ADD PUSH2 0x280E JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x286F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2884 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x289E JUMPI PUSH2 0x289E PUSH2 0x2DF0 JUMP JUMPDEST PUSH2 0x28B1 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x2CFF JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x28C5 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP1 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x286F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2901 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x290A DUP3 PUSH2 0x2858 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2923 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x292C DUP4 PUSH2 0x2858 JUMP JUMPDEST SWAP2 POP PUSH2 0x293A PUSH1 0x20 DUP5 ADD PUSH2 0x28DF JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2955 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x296C JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x297F JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2992 PUSH2 0x298D DUP3 PUSH2 0x2D30 JUMP JUMPDEST PUSH2 0x2CFF JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE DUP6 DUP3 ADD SWAP2 POP DUP6 DUP6 ADD DUP10 DUP8 DUP6 PUSH1 0x5 SHL DUP9 ADD ADD GT ISZERO PUSH2 0x29B1 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x29EA JUMPI DUP2 CALLDATALOAD DUP7 DUP2 GT ISZERO PUSH2 0x29C9 JUMPI DUP10 DUP11 REVERT JUMPDEST PUSH2 0x29D7 DUP13 DUP11 DUP4 DUP12 ADD ADD PUSH2 0x2874 JUMP JUMPDEST DUP6 MSTORE POP SWAP3 DUP8 ADD SWAP3 SWAP1 DUP8 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x29B3 JUMP JUMPDEST POP SWAP1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A0A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x290A JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A2A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x5 DUP2 LT PUSH2 0x290A JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A49 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x3 DUP2 LT PUSH2 0x290A JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A68 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2A7E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x2A8A DUP5 DUP3 DUP6 ADD PUSH2 0x2874 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2AA3 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2ABB JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2AD4 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP1 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2AF2 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 ADD PUSH1 0x1F DUP2 ADD DUP7 SGT PUSH2 0x2B02 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x2B10 PUSH2 0x298D DUP3 PUSH2 0x2D30 JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE DUP5 DUP3 ADD SWAP2 POP DUP5 DUP5 ADD DUP10 DUP7 DUP6 PUSH1 0x5 SHL DUP8 ADD ADD GT ISZERO PUSH2 0x2B2F JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x2B51 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x2B33 JUMP JUMPDEST POP DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2B73 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2B93 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x290A DUP3 PUSH2 0x28DF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2BAE JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x2BB7 DUP4 PUSH2 0x28DF JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x2BD7 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x2D93 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP2 DUP3 MSTORE POP PUSH1 0x20 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP7 DUP5 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2C74 JUMPI DUP2 MLOAD DUP1 MLOAD DUP6 MSTORE DUP7 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP9 DUP8 ADD MSTORE DUP7 DUP3 ADD MLOAD DUP2 AND DUP8 DUP8 ADD MSTORE PUSH1 0x60 DUP1 DUP4 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP7 ADD MSTORE PUSH1 0x80 SWAP1 DUP2 ADD MLOAD SWAP1 PUSH1 0x3 DUP3 LT PUSH2 0x2C5F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST DUP6 ADD MSTORE PUSH1 0xA0 SWAP1 SWAP4 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2C04 JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2CA0 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2D93 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH16 0x496E76616C69642063617465676F7279 PUSH1 0x80 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x7 SWAP1 DUP3 ADD MSTORE PUSH7 0x1A5B9D985B1A59 PUSH1 0xCA SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2D28 JUMPI PUSH2 0x2D28 PUSH2 0x2DF0 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2D4A JUMPI PUSH2 0x2D4A PUSH2 0x2DF0 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2D6F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x2D8E JUMPI PUSH2 0x2D8E PUSH2 0x2DDA JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2DAE JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2D96 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xBDC JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x2DD3 JUMPI PUSH2 0x2DD3 PUSH2 0x2DDA JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH27 0xD4ECE5FA1A7ED713DA19E10D238F70CF12843D968B19FFD5F9CCF8 EXP 0x4C 0xAD 0x23 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ",
              "sourceMap": "12772:11498:0:-:0;;;15426:290;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9453:32;8519:10;9453:18;:32::i;:::-;15467:5;:14;;-1:-1:-1;;;;;;15467:14:0;-1:-1:-1;;;;;15467:14:0;;;;;15510:15;-1:-1:-1;15492:33:0;;;15545:17;-1:-1:-1;15536:27:0;;;:8;:27;;;;15564:12;8519:10;;8439:98;15564:12;-1:-1:-1;;;;;15536:41:0;;;;;;;;;;;;;-1:-1:-1;15536:41:0;;;:50;;:57;;;;;-1:-1:-1;;15536:57:0;;;;;;15604:24;;;:7;:24;;;;;:29;;;;;15631:2;15604:29;;;;15671:2;;-1:-1:-1;15644:24:0;;;;;;-1:-1:-1;;;15644:24:0;;;;;;;;;;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;15706:2;15684:7;:19;15692:10;15684:19;;;;;;-1:-1:-1;;;15684:19:0;;;;;;;;;;;;;;;-1:-1:-1;;;15684:19:0;;;;;;;;;;;;;;;;;;;;;:24;;;;;;;;;;;;;;;;;;15426:290;12772:11498;;10999:191;11073:16;11092:6;;-1:-1:-1;;;;;11109:17:0;;;-1:-1:-1;;;;;;11109:17:0;;;;;;11142:40;;11092:6;;;;;;;11142:40;;11073:16;11142:40;10999:191;;:::o;14:310:1:-;84:6;137:2;125:9;116:7;112:23;108:32;105:2;;;158:6;150;143:22;105:2;189:16;;-1:-1:-1;;;;;234:31:1;;224:42;;214:2;;285:6;277;270:22;214:2;313:5;95:229;-1:-1:-1;;;95:229:1:o;:::-;12772:11498:0;;;;;;"
            },
            "deployedBytecode": {
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:14580:1",
                    "statements": [
                      {
                        "nodeType": "YulBlock",
                        "src": "6:3:1",
                        "statements": []
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "63:124:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "73:29:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "95:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "82:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "82:20:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value",
                                  "nodeType": "YulIdentifier",
                                  "src": "73:5:1"
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "165:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "174:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "177:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "167:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "167:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "167:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "124:5:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "135:5:1"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "150:3:1",
                                                    "type": "",
                                                    "value": "160"
                                                  },
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "155:1:1",
                                                    "type": "",
                                                    "value": "1"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "shl",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "146:3:1"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "146:11:1"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "159:1:1",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sub",
                                              "nodeType": "YulIdentifier",
                                              "src": "142:3:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "142:19:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "131:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "131:31:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "121:2:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "121:42:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "114:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "114:50:1"
                              },
                              "nodeType": "YulIf",
                              "src": "111:2:1"
                            }
                          ]
                        },
                        "name": "abi_decode_address",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "offset",
                            "nodeType": "YulTypedName",
                            "src": "42:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "53:5:1",
                            "type": ""
                          }
                        ],
                        "src": "14:173:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "245:498:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "294:24:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "array",
                                          "nodeType": "YulIdentifier",
                                          "src": "303:5:1"
                                        },
                                        {
                                          "name": "array",
                                          "nodeType": "YulIdentifier",
                                          "src": "310:5:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "296:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "296:20:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "296:20:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "offset",
                                            "nodeType": "YulIdentifier",
                                            "src": "273:6:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "281:4:1",
                                            "type": "",
                                            "value": "0x1f"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "269:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "269:17:1"
                                      },
                                      {
                                        "name": "end",
                                        "nodeType": "YulIdentifier",
                                        "src": "288:3:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "slt",
                                      "nodeType": "YulIdentifier",
                                      "src": "265:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "265:27:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "258:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "258:35:1"
                              },
                              "nodeType": "YulIf",
                              "src": "255:2:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "327:30:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "350:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "337:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "337:20:1"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulTypedName",
                                  "src": "331:2:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "396:22:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x41",
                                        "nodeType": "YulIdentifier",
                                        "src": "398:16:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "398:18:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "398:18:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "372:2:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "376:18:1",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "369:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "369:26:1"
                              },
                              "nodeType": "YulIf",
                              "src": "366:2:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "427:70:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "470:2:1"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "474:4:1",
                                                "type": "",
                                                "value": "0x1f"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "466:3:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "466:13:1"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "485:2:1",
                                                "type": "",
                                                "value": "31"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "not",
                                              "nodeType": "YulIdentifier",
                                              "src": "481:3:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "481:7:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "462:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "462:27:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "491:4:1",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "458:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "458:38:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "allocate_memory",
                                  "nodeType": "YulIdentifier",
                                  "src": "442:15:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "442:55:1"
                              },
                              "variables": [
                                {
                                  "name": "array_1",
                                  "nodeType": "YulTypedName",
                                  "src": "431:7:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "array_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "513:7:1"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "522:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "506:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "506:19:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "506:19:1"
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "573:24:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "array",
                                          "nodeType": "YulIdentifier",
                                          "src": "582:5:1"
                                        },
                                        {
                                          "name": "array",
                                          "nodeType": "YulIdentifier",
                                          "src": "589:5:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "575:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "575:20:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "575:20:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "offset",
                                            "nodeType": "YulIdentifier",
                                            "src": "548:6:1"
                                          },
                                          {
                                            "name": "_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "556:2:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "544:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "544:15:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "561:4:1",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "540:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "540:26:1"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "568:3:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "537:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "537:35:1"
                              },
                              "nodeType": "YulIf",
                              "src": "534:2:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "array_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "623:7:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "632:4:1",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "619:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "619:18:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "643:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "651:4:1",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "639:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "639:17:1"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "658:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldatacopy",
                                  "nodeType": "YulIdentifier",
                                  "src": "606:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "606:55:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "606:55:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "array_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "685:7:1"
                                          },
                                          {
                                            "name": "_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "694:2:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "681:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "681:16:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "699:4:1",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "677:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "677:27:1"
                                  },
                                  {
                                    "name": "array",
                                    "nodeType": "YulIdentifier",
                                    "src": "706:5:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "670:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "670:42:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "670:42:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "721:16:1",
                              "value": {
                                "name": "array_1",
                                "nodeType": "YulIdentifier",
                                "src": "730:7:1"
                              },
                              "variableNames": [
                                {
                                  "name": "array",
                                  "nodeType": "YulIdentifier",
                                  "src": "721:5:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_string",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "offset",
                            "nodeType": "YulTypedName",
                            "src": "219:6:1",
                            "type": ""
                          },
                          {
                            "name": "end",
                            "nodeType": "YulTypedName",
                            "src": "227:3:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "array",
                            "nodeType": "YulTypedName",
                            "src": "235:5:1",
                            "type": ""
                          }
                        ],
                        "src": "192:551:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "795:109:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "805:29:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "827:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "814:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "814:20:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value",
                                  "nodeType": "YulIdentifier",
                                  "src": "805:5:1"
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "882:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "891:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "894:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "884:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "884:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "884:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "856:5:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "867:5:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "874:4:1",
                                            "type": "",
                                            "value": "0xff"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "863:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "863:16:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "853:2:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "853:27:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "846:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "846:35:1"
                              },
                              "nodeType": "YulIf",
                              "src": "843:2:1"
                            }
                          ]
                        },
                        "name": "abi_decode_uint8",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "offset",
                            "nodeType": "YulTypedName",
                            "src": "774:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "785:5:1",
                            "type": ""
                          }
                        ],
                        "src": "748:156:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "979:126:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1025:26:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "1034:6:1"
                                        },
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "1042:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1027:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1027:22:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1027:22:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "1000:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1009:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "996:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "996:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1021:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "992:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "992:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "989:2:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1060:39:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1089:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "1070:18:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1070:29:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "1060:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_address",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "945:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "956:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "968:6:1",
                            "type": ""
                          }
                        ],
                        "src": "909:196:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1195:181:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1241:26:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "value1",
                                          "nodeType": "YulIdentifier",
                                          "src": "1250:6:1"
                                        },
                                        {
                                          "name": "value1",
                                          "nodeType": "YulIdentifier",
                                          "src": "1258:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1243:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1243:22:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1243:22:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "1216:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1225:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "1212:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1212:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1237:2:1",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1208:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1208:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "1205:2:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1276:39:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1305:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "1286:18:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1286:29:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "1276:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1324:46:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1355:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1366:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1351:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1351:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_uint8",
                                  "nodeType": "YulIdentifier",
                                  "src": "1334:16:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1334:36:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "1324:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_addresst_uint8",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "1153:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "1164:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "1176:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "1184:6:1",
                            "type": ""
                          }
                        ],
                        "src": "1110:266:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1486:1023:1",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1496:12:1",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1506:2:1",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulTypedName",
                                  "src": "1500:2:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1553:26:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "1562:6:1"
                                        },
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "1570:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1555:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1555:22:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1555:22:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "1528:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1537:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "1524:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1524:23:1"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1549:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1520:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1520:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "1517:2:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1588:37:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1615:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1602:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1602:23:1"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "1592:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1634:28:1",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1644:18:1",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              },
                              "variables": [
                                {
                                  "name": "_2",
                                  "nodeType": "YulTypedName",
                                  "src": "1638:2:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1689:26:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "1698:6:1"
                                        },
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "1706:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1691:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1691:22:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1691:22:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "1677:6:1"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "1685:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1674:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1674:14:1"
                              },
                              "nodeType": "YulIf",
                              "src": "1671:2:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1724:32:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1738:9:1"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "1749:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1734:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1734:22:1"
                              },
                              "variables": [
                                {
                                  "name": "_3",
                                  "nodeType": "YulTypedName",
                                  "src": "1728:2:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1804:26:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "1813:6:1"
                                        },
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "1821:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1806:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1806:22:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1806:22:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "_3",
                                            "nodeType": "YulIdentifier",
                                            "src": "1783:2:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1787:4:1",
                                            "type": "",
                                            "value": "0x1f"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "1779:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1779:13:1"
                                      },
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "1794:7:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "slt",
                                      "nodeType": "YulIdentifier",
                                      "src": "1775:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1775:27:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "1768:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1768:35:1"
                              },
                              "nodeType": "YulIf",
                              "src": "1765:2:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1839:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "1862:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1849:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1849:16:1"
                              },
                              "variables": [
                                {
                                  "name": "_4",
                                  "nodeType": "YulTypedName",
                                  "src": "1843:2:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1874:70:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_4",
                                        "nodeType": "YulIdentifier",
                                        "src": "1940:2:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "array_allocation_size_array_string_dyn",
                                      "nodeType": "YulIdentifier",
                                      "src": "1901:38:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1901:42:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "allocate_memory",
                                  "nodeType": "YulIdentifier",
                                  "src": "1885:15:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1885:59:1"
                              },
                              "variables": [
                                {
                                  "name": "dst",
                                  "nodeType": "YulTypedName",
                                  "src": "1878:3:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1953:16:1",
                              "value": {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "1966:3:1"
                              },
                              "variables": [
                                {
                                  "name": "dst_1",
                                  "nodeType": "YulTypedName",
                                  "src": "1957:5:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "1985:3:1"
                                  },
                                  {
                                    "name": "_4",
                                    "nodeType": "YulIdentifier",
                                    "src": "1990:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1978:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1978:15:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1978:15:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2002:19:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "2013:3:1"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2018:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2009:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2009:12:1"
                              },
                              "variableNames": [
                                {
                                  "name": "dst",
                                  "nodeType": "YulIdentifier",
                                  "src": "2002:3:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2030:22:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "2045:2:1"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2049:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2041:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2041:11:1"
                              },
                              "variables": [
                                {
                                  "name": "src",
                                  "nodeType": "YulTypedName",
                                  "src": "2034:3:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2106:26:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "2115:6:1"
                                        },
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "2123:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2108:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2108:22:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2108:22:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "_3",
                                            "nodeType": "YulIdentifier",
                                            "src": "2075:2:1"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "2083:1:1",
                                                "type": "",
                                                "value": "5"
                                              },
                                              {
                                                "name": "_4",
                                                "nodeType": "YulIdentifier",
                                                "src": "2086:2:1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "2079:3:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2079:10:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2071:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2071:19:1"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "2092:2:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2067:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2067:28:1"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2097:7:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2064:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2064:41:1"
                              },
                              "nodeType": "YulIf",
                              "src": "2061:2:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2141:15:1",
                              "value": {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "2150:6:1"
                              },
                              "variables": [
                                {
                                  "name": "i",
                                  "nodeType": "YulTypedName",
                                  "src": "2145:1:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2210:269:1",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "2224:36:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "2256:3:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "calldataload",
                                        "nodeType": "YulIdentifier",
                                        "src": "2243:12:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2243:17:1"
                                    },
                                    "variables": [
                                      {
                                        "name": "innerOffset",
                                        "nodeType": "YulTypedName",
                                        "src": "2228:11:1",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "2296:26:1",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "value0",
                                                "nodeType": "YulIdentifier",
                                                "src": "2305:6:1"
                                              },
                                              {
                                                "name": "value0",
                                                "nodeType": "YulIdentifier",
                                                "src": "2313:6:1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "revert",
                                              "nodeType": "YulIdentifier",
                                              "src": "2298:6:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2298:22:1"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "2298:22:1"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "innerOffset",
                                          "nodeType": "YulIdentifier",
                                          "src": "2279:11:1"
                                        },
                                        {
                                          "name": "_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "2292:2:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "gt",
                                        "nodeType": "YulIdentifier",
                                        "src": "2276:2:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2276:19:1"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "2273:2:1"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "2342:3:1"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "arguments": [
                                                    {
                                                      "name": "_3",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "2373:2:1"
                                                    },
                                                    {
                                                      "name": "innerOffset",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "2377:11:1"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "add",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2369:3:1"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "2369:20:1"
                                                },
                                                {
                                                  "name": "_1",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2391:2:1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "2365:3:1"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "2365:29:1"
                                            },
                                            {
                                              "name": "dataEnd",
                                              "nodeType": "YulIdentifier",
                                              "src": "2396:7:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "abi_decode_string",
                                            "nodeType": "YulIdentifier",
                                            "src": "2347:17:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2347:57:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "2335:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2335:70:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2335:70:1"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "2418:19:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "2429:3:1"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "2434:2:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2425:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2425:12:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "dst",
                                        "nodeType": "YulIdentifier",
                                        "src": "2418:3:1"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "2450:19:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "2461:3:1"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "2466:2:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2457:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2457:12:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "src",
                                        "nodeType": "YulIdentifier",
                                        "src": "2450:3:1"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "2176:1:1"
                                  },
                                  {
                                    "name": "_4",
                                    "nodeType": "YulIdentifier",
                                    "src": "2179:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2173:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2173:9:1"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "2183:18:1",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "2185:14:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "2194:1:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2197:1:1",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2190:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2190:9:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulIdentifier",
                                        "src": "2185:1:1"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "pre": {
                                "nodeType": "YulBlock",
                                "src": "2169:3:1",
                                "statements": []
                              },
                              "src": "2165:314:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2488:15:1",
                              "value": {
                                "name": "dst_1",
                                "nodeType": "YulIdentifier",
                                "src": "2498:5:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "2488:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "1452:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "1463:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "1475:6:1",
                            "type": ""
                          }
                        ],
                        "src": "1381:1128:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2592:219:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2638:26:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "2647:6:1"
                                        },
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "2655:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2640:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2640:22:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2640:22:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "2613:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2622:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "2609:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2609:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2634:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2605:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2605:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "2602:2:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2673:29:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2692:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "2686:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2686:16:1"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nodeType": "YulTypedName",
                                  "src": "2677:5:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2755:26:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "2764:6:1"
                                        },
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "2772:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2757:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2757:22:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2757:22:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "2724:5:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "value",
                                                "nodeType": "YulIdentifier",
                                                "src": "2745:5:1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "iszero",
                                              "nodeType": "YulIdentifier",
                                              "src": "2738:6:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2738:13:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "2731:6:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2731:21:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "2721:2:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2721:32:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "2714:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2714:40:1"
                              },
                              "nodeType": "YulIf",
                              "src": "2711:2:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2790:15:1",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2800:5:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "2790:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_bool_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "2558:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "2569:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "2581:6:1",
                            "type": ""
                          }
                        ],
                        "src": "2514:297:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2897:206:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2943:26:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "2952:6:1"
                                        },
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "2960:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2945:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2945:22:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2945:22:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "2918:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2927:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "2914:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2914:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2939:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2910:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2910:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "2907:2:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2978:36:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3004:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "2991:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2991:23:1"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nodeType": "YulTypedName",
                                  "src": "2982:5:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3047:26:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "3056:6:1"
                                        },
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "3064:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "3049:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3049:22:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3049:22:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "3036:5:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3043:1:1",
                                        "type": "",
                                        "value": "5"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "3033:2:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3033:12:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "3026:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3026:20:1"
                              },
                              "nodeType": "YulIf",
                              "src": "3023:2:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3082:15:1",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3092:5:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "3082:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_enum$_Category_$11",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "2863:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "2874:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "2886:6:1",
                            "type": ""
                          }
                        ],
                        "src": "2816:287:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3186:206:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3232:26:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "3241:6:1"
                                        },
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "3249:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "3234:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3234:22:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3234:22:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "3207:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3216:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "3203:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3203:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3228:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3199:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3199:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "3196:2:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3267:36:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3293:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "3280:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3280:23:1"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nodeType": "YulTypedName",
                                  "src": "3271:5:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3336:26:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "3345:6:1"
                                        },
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "3353:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "3338:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3338:22:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3338:22:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "3325:5:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3332:1:1",
                                        "type": "",
                                        "value": "3"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "3322:2:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3322:12:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "3315:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3315:20:1"
                              },
                              "nodeType": "YulIf",
                              "src": "3312:2:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3371:15:1",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3381:5:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "3371:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_enum$_Share_$15",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "3152:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "3163:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "3175:6:1",
                            "type": ""
                          }
                        ],
                        "src": "3108:284:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3477:262:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3523:26:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "3532:6:1"
                                        },
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "3540:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "3525:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3525:22:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3525:22:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "3498:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3507:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "3494:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3494:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3519:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3490:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3490:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "3487:2:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3558:37:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3585:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "3572:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3572:23:1"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "3562:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3638:26:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "3647:6:1"
                                        },
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "3655:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "3640:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3640:22:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3640:22:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "3610:6:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3618:18:1",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3607:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3607:30:1"
                              },
                              "nodeType": "YulIf",
                              "src": "3604:2:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3673:60:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3705:9:1"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "3716:6:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3701:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3701:22:1"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3725:7:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_string",
                                  "nodeType": "YulIdentifier",
                                  "src": "3683:17:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3683:50:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "3673:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_string_memory_ptr",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "3443:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "3454:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "3466:6:1",
                            "type": ""
                          }
                        ],
                        "src": "3397:342:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3814:120:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3860:26:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "3869:6:1"
                                        },
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "3877:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "3862:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3862:22:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3862:22:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "3835:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3844:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "3831:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3831:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3856:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3827:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3827:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "3824:2:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3895:33:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3918:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "3905:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3905:23:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "3895:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "3780:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "3791:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "3803:6:1",
                            "type": ""
                          }
                        ],
                        "src": "3744:190:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4020:113:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "4066:26:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "4075:6:1"
                                        },
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "4083:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "4068:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4068:22:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4068:22:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "4041:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4050:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "4037:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4037:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4062:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "4033:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4033:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "4030:2:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4101:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4117:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "4111:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4111:16:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "4101:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "3986:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "3997:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "4009:6:1",
                            "type": ""
                          }
                        ],
                        "src": "3939:194:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4250:902:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "4296:26:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "4305:6:1"
                                        },
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "4313:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "4298:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4298:22:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4298:22:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "4271:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4280:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "4267:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4267:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4292:2:1",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "4263:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4263:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "4260:2:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4331:33:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4354:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "4341:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4341:23:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "4331:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4373:12:1",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4383:2:1",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulTypedName",
                                  "src": "4377:2:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4394:46:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4425:9:1"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "4436:2:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4421:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4421:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "4408:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4408:32:1"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "4398:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "4483:26:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "value1",
                                          "nodeType": "YulIdentifier",
                                          "src": "4492:6:1"
                                        },
                                        {
                                          "name": "value1",
                                          "nodeType": "YulIdentifier",
                                          "src": "4500:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "4485:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4485:22:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4485:22:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "4455:6:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4463:18:1",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "4452:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4452:30:1"
                              },
                              "nodeType": "YulIf",
                              "src": "4449:2:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4518:32:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4532:9:1"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "4543:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4528:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4528:22:1"
                              },
                              "variables": [
                                {
                                  "name": "_2",
                                  "nodeType": "YulTypedName",
                                  "src": "4522:2:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "4598:26:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "value1",
                                          "nodeType": "YulIdentifier",
                                          "src": "4607:6:1"
                                        },
                                        {
                                          "name": "value1",
                                          "nodeType": "YulIdentifier",
                                          "src": "4615:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "4600:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4600:22:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4600:22:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "_2",
                                            "nodeType": "YulIdentifier",
                                            "src": "4577:2:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "4581:4:1",
                                            "type": "",
                                            "value": "0x1f"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "4573:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "4573:13:1"
                                      },
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "4588:7:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "slt",
                                      "nodeType": "YulIdentifier",
                                      "src": "4569:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4569:27:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "4562:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4562:35:1"
                              },
                              "nodeType": "YulIf",
                              "src": "4559:2:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4633:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "4656:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "4643:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4643:16:1"
                              },
                              "variables": [
                                {
                                  "name": "_3",
                                  "nodeType": "YulTypedName",
                                  "src": "4637:2:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4668:70:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "4734:2:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "array_allocation_size_array_string_dyn",
                                      "nodeType": "YulIdentifier",
                                      "src": "4695:38:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4695:42:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "allocate_memory",
                                  "nodeType": "YulIdentifier",
                                  "src": "4679:15:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4679:59:1"
                              },
                              "variables": [
                                {
                                  "name": "dst",
                                  "nodeType": "YulTypedName",
                                  "src": "4672:3:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4747:16:1",
                              "value": {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "4760:3:1"
                              },
                              "variables": [
                                {
                                  "name": "dst_1",
                                  "nodeType": "YulTypedName",
                                  "src": "4751:5:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "4779:3:1"
                                  },
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "4784:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4772:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4772:15:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4772:15:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4796:19:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "4807:3:1"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4812:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4803:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4803:12:1"
                              },
                              "variableNames": [
                                {
                                  "name": "dst",
                                  "nodeType": "YulIdentifier",
                                  "src": "4796:3:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4824:22:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "4839:2:1"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4843:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4835:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4835:11:1"
                              },
                              "variables": [
                                {
                                  "name": "src",
                                  "nodeType": "YulTypedName",
                                  "src": "4828:3:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "4900:26:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "value1",
                                          "nodeType": "YulIdentifier",
                                          "src": "4909:6:1"
                                        },
                                        {
                                          "name": "value1",
                                          "nodeType": "YulIdentifier",
                                          "src": "4917:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "4902:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4902:22:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4902:22:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "_2",
                                            "nodeType": "YulIdentifier",
                                            "src": "4869:2:1"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "4877:1:1",
                                                "type": "",
                                                "value": "5"
                                              },
                                              {
                                                "name": "_3",
                                                "nodeType": "YulIdentifier",
                                                "src": "4880:2:1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "4873:3:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "4873:10:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "4865:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "4865:19:1"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "4886:2:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4861:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4861:28:1"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4891:7:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "4858:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4858:41:1"
                              },
                              "nodeType": "YulIf",
                              "src": "4855:2:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4935:15:1",
                              "value": {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "4944:6:1"
                              },
                              "variables": [
                                {
                                  "name": "i",
                                  "nodeType": "YulTypedName",
                                  "src": "4939:1:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "5004:118:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "5025:3:1"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "5043:3:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "calldataload",
                                            "nodeType": "YulIdentifier",
                                            "src": "5030:12:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "5030:17:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "5018:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5018:30:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5018:30:1"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "5061:19:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "5072:3:1"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "5077:2:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "5068:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5068:12:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "dst",
                                        "nodeType": "YulIdentifier",
                                        "src": "5061:3:1"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "5093:19:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "5104:3:1"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "5109:2:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "5100:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5100:12:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "src",
                                        "nodeType": "YulIdentifier",
                                        "src": "5093:3:1"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "4970:1:1"
                                  },
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "4973:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "4967:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4967:9:1"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "4977:18:1",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "4979:14:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "4988:1:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4991:1:1",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4984:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4984:9:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulIdentifier",
                                        "src": "4979:1:1"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "pre": {
                                "nodeType": "YulBlock",
                                "src": "4963:3:1",
                                "statements": []
                              },
                              "src": "4959:163:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5131:15:1",
                              "value": {
                                "name": "dst_1",
                                "nodeType": "YulIdentifier",
                                "src": "5141:5:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "5131:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "4208:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "4219:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "4231:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "4239:6:1",
                            "type": ""
                          }
                        ],
                        "src": "4138:1014:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "5244:171:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "5290:26:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "5299:6:1"
                                        },
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "5307:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "5292:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5292:22:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5292:22:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "5265:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5274:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "5261:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5261:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5286:2:1",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "5257:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5257:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "5254:2:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5325:33:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5348:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "5335:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5335:23:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "5325:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5367:42:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5394:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5405:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5390:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5390:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "5377:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5377:32:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "5367:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "5202:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "5213:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "5225:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "5233:6:1",
                            "type": ""
                          }
                        ],
                        "src": "5157:258:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "5488:124:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "5534:26:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "5543:6:1"
                                        },
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "5551:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "5536:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5536:22:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5536:22:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "5509:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5518:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "5505:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5505:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5530:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "5501:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5501:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "5498:2:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5569:37:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5596:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_uint8",
                                  "nodeType": "YulIdentifier",
                                  "src": "5579:16:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5579:27:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "5569:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint8",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "5454:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "5465:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "5477:6:1",
                            "type": ""
                          }
                        ],
                        "src": "5420:192:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "5702:175:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "5748:26:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "5757:6:1"
                                        },
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "5765:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "5750:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5750:22:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5750:22:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "5723:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5732:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "5719:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5719:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5744:2:1",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "5715:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5715:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "5712:2:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5783:37:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5810:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_uint8",
                                  "nodeType": "YulIdentifier",
                                  "src": "5793:16:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5793:27:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "5783:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5829:42:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5856:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5867:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5852:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5852:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "5839:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5839:32:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "5829:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint8t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "5660:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "5671:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "5683:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "5691:6:1",
                            "type": ""
                          }
                        ],
                        "src": "5617:260:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "6047:205:1",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "6057:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "6077:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "6071:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6071:13:1"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nodeType": "YulTypedName",
                                  "src": "6061:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "6119:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6127:4:1",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6115:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6115:17:1"
                                  },
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "6134:3:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "6139:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory",
                                  "nodeType": "YulIdentifier",
                                  "src": "6093:21:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6093:53:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6093:53:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "6155:29:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "6172:3:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "6177:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6168:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6168:16:1"
                              },
                              "variables": [
                                {
                                  "name": "end_1",
                                  "nodeType": "YulTypedName",
                                  "src": "6159:5:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "end_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6200:5:1"
                                  },
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6207:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6193:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6193:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6193:21:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6223:23:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "end_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6234:5:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6241:4:1",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6230:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6230:16:1"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nodeType": "YulIdentifier",
                                  "src": "6223:3:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_bytes_memory_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256__nonPadded_inplace_fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "6015:3:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "6020:6:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "6028:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nodeType": "YulTypedName",
                            "src": "6039:3:1",
                            "type": ""
                          }
                        ],
                        "src": "5882:370:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "6358:102:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "6368:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6380:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6391:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6376:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6376:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "6368:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6410:9:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "6425:6:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "6441:3:1",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "6446:1:1",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "6437:3:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "6437:11:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6450:1:1",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "6433:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6433:19:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "6421:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6421:32:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6403:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6403:51:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6403:51:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "6327:9:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "6338:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "6349:4:1",
                            "type": ""
                          }
                        ],
                        "src": "6257:203:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "6594:175:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "6604:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6616:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6627:2:1",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6612:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6612:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "6604:4:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "6639:29:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6657:3:1",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6662:1:1",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "6653:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6653:11:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6666:1:1",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6649:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6649:19:1"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulTypedName",
                                  "src": "6643:2:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6684:9:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "6699:6:1"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "6707:2:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "6695:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6695:15:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6677:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6677:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6677:34:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6731:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6742:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6727:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6727:18:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nodeType": "YulIdentifier",
                                        "src": "6751:6:1"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "6759:2:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "6747:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6747:15:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6720:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6720:43:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6720:43:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "6555:9:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "6566:6:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "6574:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "6585:4:1",
                            "type": ""
                          }
                        ],
                        "src": "6465:304:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "6931:218:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "6941:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6953:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6964:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6949:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6949:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "6941:4:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "6976:29:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6994:3:1",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6999:1:1",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "6990:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6990:11:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7003:1:1",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6986:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6986:19:1"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulTypedName",
                                  "src": "6980:2:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7021:9:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "7036:6:1"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "7044:2:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "7032:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7032:15:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "7014:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7014:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7014:34:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "7068:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7079:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7064:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7064:18:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nodeType": "YulIdentifier",
                                        "src": "7088:6:1"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "7096:2:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "7084:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7084:15:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "7057:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7057:43:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7057:43:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "7120:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7131:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7116:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7116:18:1"
                                  },
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "7136:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "7109:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7109:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7109:34:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "6884:9:1",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "6895:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "6903:6:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "6911:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "6922:4:1",
                            "type": ""
                          }
                        ],
                        "src": "6774:375:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "7283:145:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "7293:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7305:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7316:2:1",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7301:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7301:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "7293:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7335:9:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "7350:6:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "7366:3:1",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "7371:1:1",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "7362:3:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "7362:11:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7375:1:1",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "7358:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7358:19:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "7346:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7346:32:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "7328:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7328:51:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7328:51:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "7399:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7410:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7395:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7395:18:1"
                                  },
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7415:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "7388:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7388:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7388:34:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "7244:9:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "7255:6:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "7263:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "7274:4:1",
                            "type": ""
                          }
                        ],
                        "src": "7154:274:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "7634:1159:1",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7644:12:1",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7654:2:1",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulTypedName",
                                  "src": "7648:2:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7665:32:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7683:9:1"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7694:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7679:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7679:18:1"
                              },
                              "variables": [
                                {
                                  "name": "tail_1",
                                  "nodeType": "YulTypedName",
                                  "src": "7669:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7713:9:1"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7724:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "7706:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7706:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7706:21:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7736:17:1",
                              "value": {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "7747:6:1"
                              },
                              "variables": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulTypedName",
                                  "src": "7740:3:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7762:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "7782:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "7776:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7776:13:1"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nodeType": "YulTypedName",
                                  "src": "7766:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7805:6:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "7813:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "7798:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7798:22:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7798:22:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7829:12:1",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7839:2:1",
                                "type": "",
                                "value": "64"
                              },
                              "variables": [
                                {
                                  "name": "_2",
                                  "nodeType": "YulTypedName",
                                  "src": "7833:2:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "7850:25:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7861:9:1"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "7872:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7857:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7857:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "7850:3:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7884:29:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "7902:6:1"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7910:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7898:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7898:15:1"
                              },
                              "variables": [
                                {
                                  "name": "srcPtr",
                                  "nodeType": "YulTypedName",
                                  "src": "7888:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7922:13:1",
                              "value": {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "7931:4:1"
                              },
                              "variables": [
                                {
                                  "name": "i",
                                  "nodeType": "YulTypedName",
                                  "src": "7926:1:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "7993:774:1",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "8007:23:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "8023:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "8017:5:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8017:13:1"
                                    },
                                    "variables": [
                                      {
                                        "name": "_3",
                                        "nodeType": "YulTypedName",
                                        "src": "8011:2:1",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "8050:3:1"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "_3",
                                              "nodeType": "YulIdentifier",
                                              "src": "8061:2:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "8055:5:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "8055:9:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "8043:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8043:22:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "8043:22:1"
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "8078:38:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "_3",
                                              "nodeType": "YulIdentifier",
                                              "src": "8108:2:1"
                                            },
                                            {
                                              "name": "_1",
                                              "nodeType": "YulIdentifier",
                                              "src": "8112:2:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "8104:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "8104:11:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "8098:5:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8098:18:1"
                                    },
                                    "variables": [
                                      {
                                        "name": "memberValue0",
                                        "nodeType": "YulTypedName",
                                        "src": "8082:12:1",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "8129:29:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "8147:3:1",
                                              "type": "",
                                              "value": "160"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "8152:1:1",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nodeType": "YulIdentifier",
                                            "src": "8143:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "8143:11:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "8156:1:1",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sub",
                                        "nodeType": "YulIdentifier",
                                        "src": "8139:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8139:19:1"
                                    },
                                    "variables": [
                                      {
                                        "name": "_4",
                                        "nodeType": "YulTypedName",
                                        "src": "8133:2:1",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "pos",
                                              "nodeType": "YulIdentifier",
                                              "src": "8182:3:1"
                                            },
                                            {
                                              "name": "_1",
                                              "nodeType": "YulIdentifier",
                                              "src": "8187:2:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "8178:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "8178:12:1"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "memberValue0",
                                              "nodeType": "YulIdentifier",
                                              "src": "8196:12:1"
                                            },
                                            {
                                              "name": "_4",
                                              "nodeType": "YulIdentifier",
                                              "src": "8210:2:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "8192:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "8192:21:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "8171:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8171:43:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "8171:43:1"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "pos",
                                              "nodeType": "YulIdentifier",
                                              "src": "8238:3:1"
                                            },
                                            {
                                              "name": "_2",
                                              "nodeType": "YulIdentifier",
                                              "src": "8243:2:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "8234:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "8234:12:1"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "arguments": [
                                                    {
                                                      "name": "_3",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "8262:2:1"
                                                    },
                                                    {
                                                      "name": "_2",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "8266:2:1"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "add",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "8258:3:1"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "8258:11:1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "mload",
                                                "nodeType": "YulIdentifier",
                                                "src": "8252:5:1"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "8252:18:1"
                                            },
                                            {
                                              "name": "_4",
                                              "nodeType": "YulIdentifier",
                                              "src": "8272:2:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "8248:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "8248:27:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "8227:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8227:49:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "8227:49:1"
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "8289:14:1",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8299:4:1",
                                      "type": "",
                                      "value": "0x60"
                                    },
                                    "variables": [
                                      {
                                        "name": "_5",
                                        "nodeType": "YulTypedName",
                                        "src": "8293:2:1",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "pos",
                                              "nodeType": "YulIdentifier",
                                              "src": "8327:3:1"
                                            },
                                            {
                                              "name": "_5",
                                              "nodeType": "YulIdentifier",
                                              "src": "8332:2:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "8323:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "8323:12:1"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "arguments": [
                                                    {
                                                      "name": "_3",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "8351:2:1"
                                                    },
                                                    {
                                                      "name": "_5",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "8355:2:1"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "add",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "8347:3:1"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "8347:11:1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "mload",
                                                "nodeType": "YulIdentifier",
                                                "src": "8341:5:1"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "8341:18:1"
                                            },
                                            {
                                              "name": "_4",
                                              "nodeType": "YulIdentifier",
                                              "src": "8361:2:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "8337:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "8337:27:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "8316:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8316:49:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "8316:49:1"
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "8378:14:1",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8388:4:1",
                                      "type": "",
                                      "value": "0x80"
                                    },
                                    "variables": [
                                      {
                                        "name": "_6",
                                        "nodeType": "YulTypedName",
                                        "src": "8382:2:1",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "8405:40:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "_3",
                                              "nodeType": "YulIdentifier",
                                              "src": "8437:2:1"
                                            },
                                            {
                                              "name": "_6",
                                              "nodeType": "YulIdentifier",
                                              "src": "8441:2:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "8433:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "8433:11:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "8427:5:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8427:18:1"
                                    },
                                    "variables": [
                                      {
                                        "name": "memberValue0_1",
                                        "nodeType": "YulTypedName",
                                        "src": "8409:14:1",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "8503:133:1",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "tail",
                                                "nodeType": "YulIdentifier",
                                                "src": "8528:4:1"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "8538:3:1",
                                                    "type": "",
                                                    "value": "224"
                                                  },
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "8543:10:1",
                                                    "type": "",
                                                    "value": "0x4e487b71"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "shl",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "8534:3:1"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "8534:20:1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "8521:6:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "8521:34:1"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "8521:34:1"
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "8579:1:1",
                                                "type": "",
                                                "value": "4"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "8582:4:1",
                                                "type": "",
                                                "value": "0x21"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "8572:6:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "8572:15:1"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "8572:15:1"
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "tail",
                                                "nodeType": "YulIdentifier",
                                                "src": "8611:4:1"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "8617:4:1",
                                                "type": "",
                                                "value": "0x24"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "revert",
                                              "nodeType": "YulIdentifier",
                                              "src": "8604:6:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "8604:18:1"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "8604:18:1"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "memberValue0_1",
                                              "nodeType": "YulIdentifier",
                                              "src": "8471:14:1"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "8487:1:1",
                                              "type": "",
                                              "value": "3"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "lt",
                                            "nodeType": "YulIdentifier",
                                            "src": "8468:2:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "8468:21:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "iszero",
                                        "nodeType": "YulIdentifier",
                                        "src": "8461:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8461:29:1"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "8458:2:1"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "pos",
                                              "nodeType": "YulIdentifier",
                                              "src": "8660:3:1"
                                            },
                                            {
                                              "name": "_6",
                                              "nodeType": "YulIdentifier",
                                              "src": "8665:2:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "8656:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "8656:12:1"
                                        },
                                        {
                                          "name": "memberValue0_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "8670:14:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "8649:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8649:36:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "8649:36:1"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "8698:21:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "8709:3:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "8714:4:1",
                                          "type": "",
                                          "value": "0xa0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "8705:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8705:14:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "pos",
                                        "nodeType": "YulIdentifier",
                                        "src": "8698:3:1"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "8732:25:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "8746:6:1"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "8754:2:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "8742:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8742:15:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "srcPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "8732:6:1"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "7955:1:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "7958:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "7952:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7952:13:1"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "7966:18:1",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "7968:14:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "7977:1:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "7980:1:1",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "7973:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "7973:9:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulIdentifier",
                                        "src": "7968:1:1"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "pre": {
                                "nodeType": "YulBlock",
                                "src": "7948:3:1",
                                "statements": []
                              },
                              "src": "7944:823:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8776:11:1",
                              "value": {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "8784:3:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "8776:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_array$_t_struct$_WasteData_$43_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_WasteData_$43_memory_ptr_$dyn_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "7603:9:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "7614:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "7625:4:1",
                            "type": ""
                          }
                        ],
                        "src": "7433:1360:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "8919:262:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8936:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8947:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8929:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8929:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8929:21:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "8959:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "8979:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "8973:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8973:13:1"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nodeType": "YulTypedName",
                                  "src": "8963:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9006:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9017:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9002:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9002:18:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "9022:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8995:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8995:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8995:34:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "9064:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9072:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9060:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9060:15:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9081:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9092:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9077:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9077:18:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "9097:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory",
                                  "nodeType": "YulIdentifier",
                                  "src": "9038:21:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9038:66:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9038:66:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "9113:62:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9129:9:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "length",
                                                "nodeType": "YulIdentifier",
                                                "src": "9148:6:1"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "9156:2:1",
                                                "type": "",
                                                "value": "31"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "9144:3:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "9144:15:1"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "9165:2:1",
                                                "type": "",
                                                "value": "31"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "not",
                                              "nodeType": "YulIdentifier",
                                              "src": "9161:3:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "9161:7:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "9140:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "9140:29:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9125:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9125:45:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9172:2:1",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9121:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9121:54:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "9113:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "8888:9:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "8899:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "8910:4:1",
                            "type": ""
                          }
                        ],
                        "src": "8798:383:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "9360:165:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9377:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9388:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9370:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9370:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9370:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9411:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9422:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9407:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9407:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9427:2:1",
                                    "type": "",
                                    "value": "15"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9400:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9400:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9400:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9450:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9461:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9446:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9446:18:1"
                                  },
                                  {
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "9466:17:1",
                                    "type": "",
                                    "value": "Already sign up"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9439:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9439:45:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9439:45:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "9493:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9505:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9516:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9501:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9501:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "9493:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_0855ec215c237c3402a18339339aeeabd173180125b97094d2e4366ff55d9ec5__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "9337:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "9351:4:1",
                            "type": ""
                          }
                        ],
                        "src": "9186:339:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "9704:228:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9721:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9732:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9714:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9714:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9714:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9755:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9766:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9751:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9751:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9771:2:1",
                                    "type": "",
                                    "value": "38"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9744:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9744:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9744:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9794:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9805:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9790:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9790:18:1"
                                  },
                                  {
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "9810:34:1",
                                    "type": "",
                                    "value": "Ownable: new owner is the zero a"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9783:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9783:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9783:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9865:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9876:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9861:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9861:18:1"
                                  },
                                  {
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "9881:8:1",
                                    "type": "",
                                    "value": "ddress"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9854:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9854:36:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9854:36:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "9899:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9911:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9922:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9907:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9907:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "9899:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "9681:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "9695:4:1",
                            "type": ""
                          }
                        ],
                        "src": "9530:402:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "10111:164:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10128:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10139:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10121:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10121:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10121:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "10162:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10173:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10158:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10158:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10178:2:1",
                                    "type": "",
                                    "value": "14"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10151:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10151:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10151:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "10201:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10212:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10197:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10197:18:1"
                                  },
                                  {
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "10217:16:1",
                                    "type": "",
                                    "value": "Not Authorized"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10190:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10190:44:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10190:44:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "10243:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10255:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10266:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10251:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10251:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "10243:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_593fd4f5418ae095969b093812245f49eb950b9775e5afd767614f342e26d4f2__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "10088:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "10102:4:1",
                            "type": ""
                          }
                        ],
                        "src": "9937:338:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "10454:161:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10471:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10482:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10464:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10464:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10464:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "10505:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10516:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10501:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10501:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10521:2:1",
                                    "type": "",
                                    "value": "11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10494:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10494:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10494:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "10544:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10555:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10540:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10540:18:1"
                                  },
                                  {
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "10560:13:1",
                                    "type": "",
                                    "value": "Not allowed"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10533:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10533:41:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10533:41:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "10583:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10595:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10606:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10591:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10591:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "10583:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_98bb0d434888d1b812a0a4194c9568f0648e9ed0f8cbde68f7f17a68afe7b6cd__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "10431:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "10445:4:1",
                            "type": ""
                          }
                        ],
                        "src": "10280:335:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "10794:182:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10811:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10822:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10804:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10804:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10804:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "10845:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10856:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10841:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10841:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10861:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10834:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10834:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10834:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "10884:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10895:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10880:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10880:18:1"
                                  },
                                  {
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "10900:34:1",
                                    "type": "",
                                    "value": "Ownable: caller is not the owner"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10873:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10873:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10873:62:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "10944:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10956:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10967:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10952:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10952:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "10944:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "10771:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "10785:4:1",
                            "type": ""
                          }
                        ],
                        "src": "10620:356:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "11155:163:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11172:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11183:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "11165:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11165:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11165:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11206:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11217:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11202:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11202:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11222:2:1",
                                    "type": "",
                                    "value": "13"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "11195:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11195:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11195:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11245:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11256:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11241:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11241:18:1"
                                  },
                                  {
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "11261:15:1",
                                    "type": "",
                                    "value": "Not available"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "11234:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11234:43:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11234:43:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "11286:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11298:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11309:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11294:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11294:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "11286:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_b9c8b0a781ee5b87f71931d50074d05dd76b7be959de5062a78ccee2fb412519__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "11132:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "11146:4:1",
                            "type": ""
                          }
                        ],
                        "src": "10981:337:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "11497:166:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11514:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11525:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "11507:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11507:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11507:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11548:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11559:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11544:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11544:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11564:2:1",
                                    "type": "",
                                    "value": "16"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "11537:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11537:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11537:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11587:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11598:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11583:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11583:18:1"
                                  },
                                  {
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "11603:18:1",
                                    "type": "",
                                    "value": "Invalid category"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "11576:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11576:46:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11576:46:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "11631:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11643:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11654:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11639:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11639:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "11631:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_c42ca90c935df80db9ecab8e34c935bcc35abb722f6ed440da8d67e0cbd0ec47__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "11474:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "11488:4:1",
                            "type": ""
                          }
                        ],
                        "src": "11323:340:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "11842:155:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11859:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11870:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "11852:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11852:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11852:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11893:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11904:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11889:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11889:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11909:1:1",
                                    "type": "",
                                    "value": "6"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "11882:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11882:29:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11882:29:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11931:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11942:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11927:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11927:18:1"
                                  },
                                  {
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "11947:8:1",
                                    "type": "",
                                    "value": "IValue"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "11920:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11920:36:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11920:36:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "11965:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11977:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11988:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11973:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11973:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "11965:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_c6f5816ffca9f3bdafc2c13d983135d2a105150b42711b53975c78544de1fc78__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "11819:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "11833:4:1",
                            "type": ""
                          }
                        ],
                        "src": "11668:329:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "12176:167:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12193:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12204:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12186:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12186:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12186:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "12227:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12238:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12223:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12223:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12243:2:1",
                                    "type": "",
                                    "value": "17"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12216:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12216:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12216:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "12266:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12277:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12262:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12262:18:1"
                                  },
                                  {
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "12282:19:1",
                                    "type": "",
                                    "value": "Invalid selecetor"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12255:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12255:47:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12255:47:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "12311:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12323:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12334:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12319:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12319:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "12311:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_f5bbd90151df77045995fef44fa489fd73d41063f4d63aeaef7d4ef2cc0fb065__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "12153:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "12167:4:1",
                            "type": ""
                          }
                        ],
                        "src": "12002:341:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "12522:156:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12539:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12550:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12532:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12532:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12532:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "12573:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12584:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12569:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12569:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12589:1:1",
                                    "type": "",
                                    "value": "7"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12562:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12562:29:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12562:29:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "12611:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12622:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12607:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12607:18:1"
                                  },
                                  {
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "12627:9:1",
                                    "type": "",
                                    "value": "invalid"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12600:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12600:37:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12600:37:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "12646:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12658:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12669:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12654:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12654:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "12646:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_ffd7db0f9d5cdeb49c4c9eba649d4dc6d852d64671e65488e57f58584992ac68__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "12499:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "12513:4:1",
                            "type": ""
                          }
                        ],
                        "src": "12348:330:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "12784:76:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "12794:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12806:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12817:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12802:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12802:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "12794:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12836:9:1"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "12847:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12829:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12829:25:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12829:25:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "12753:9:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "12764:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "12775:4:1",
                            "type": ""
                          }
                        ],
                        "src": "12683:177:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "12962:87:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "12972:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12984:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12995:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12980:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12980:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "12972:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13014:9:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "13029:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13037:4:1",
                                        "type": "",
                                        "value": "0xff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "13025:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13025:17:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "13007:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13007:36:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13007:36:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "12931:9:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "12942:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "12953:4:1",
                            "type": ""
                          }
                        ],
                        "src": "12865:184:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "13099:230:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "13109:19:1",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13125:2:1",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "13119:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13119:9:1"
                              },
                              "variableNames": [
                                {
                                  "name": "memPtr",
                                  "nodeType": "YulIdentifier",
                                  "src": "13109:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "13137:58:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "13159:6:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "size",
                                            "nodeType": "YulIdentifier",
                                            "src": "13175:4:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "13181:2:1",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "13171:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "13171:13:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "13190:2:1",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "13186:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "13186:7:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "13167:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13167:27:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13155:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13155:40:1"
                              },
                              "variables": [
                                {
                                  "name": "newFreePtr",
                                  "nodeType": "YulTypedName",
                                  "src": "13141:10:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "13270:22:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x41",
                                        "nodeType": "YulIdentifier",
                                        "src": "13272:16:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13272:18:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "13272:18:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "newFreePtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "13213:10:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13225:18:1",
                                        "type": "",
                                        "value": "0xffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "gt",
                                      "nodeType": "YulIdentifier",
                                      "src": "13210:2:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13210:34:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "newFreePtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "13249:10:1"
                                      },
                                      {
                                        "name": "memPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "13261:6:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "13246:2:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13246:22:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "or",
                                  "nodeType": "YulIdentifier",
                                  "src": "13207:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13207:62:1"
                              },
                              "nodeType": "YulIf",
                              "src": "13204:2:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13308:2:1",
                                    "type": "",
                                    "value": "64"
                                  },
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "13312:10:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "13301:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13301:22:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13301:22:1"
                            }
                          ]
                        },
                        "name": "allocate_memory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "size",
                            "nodeType": "YulTypedName",
                            "src": "13079:4:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "memPtr",
                            "nodeType": "YulTypedName",
                            "src": "13088:6:1",
                            "type": ""
                          }
                        ],
                        "src": "13054:275:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "13402:114:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "13446:22:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x41",
                                        "nodeType": "YulIdentifier",
                                        "src": "13448:16:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13448:18:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "13448:18:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "13418:6:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13426:18:1",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "13415:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13415:30:1"
                              },
                              "nodeType": "YulIf",
                              "src": "13412:2:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "13477:33:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13493:1:1",
                                        "type": "",
                                        "value": "5"
                                      },
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "13496:6:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "13489:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13489:14:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13505:4:1",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13485:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13485:25:1"
                              },
                              "variableNames": [
                                {
                                  "name": "size",
                                  "nodeType": "YulIdentifier",
                                  "src": "13477:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "array_allocation_size_array_string_dyn",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "length",
                            "nodeType": "YulTypedName",
                            "src": "13382:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "size",
                            "nodeType": "YulTypedName",
                            "src": "13393:4:1",
                            "type": ""
                          }
                        ],
                        "src": "13334:182:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "13567:171:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "13598:111:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "r",
                                          "nodeType": "YulIdentifier",
                                          "src": "13619:1:1"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "13626:3:1",
                                              "type": "",
                                              "value": "224"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "13631:10:1",
                                              "type": "",
                                              "value": "0x4e487b71"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nodeType": "YulIdentifier",
                                            "src": "13622:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "13622:20:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "13612:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13612:31:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "13612:31:1"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "13663:1:1",
                                          "type": "",
                                          "value": "4"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "13666:4:1",
                                          "type": "",
                                          "value": "0x12"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "13656:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13656:15:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "13656:15:1"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "r",
                                          "nodeType": "YulIdentifier",
                                          "src": "13691:1:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "13694:4:1",
                                          "type": "",
                                          "value": "0x24"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "13684:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13684:15:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "13684:15:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "13587:1:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "13580:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13580:9:1"
                              },
                              "nodeType": "YulIf",
                              "src": "13577:2:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "13718:14:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "13727:1:1"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "13730:1:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "div",
                                  "nodeType": "YulIdentifier",
                                  "src": "13723:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13723:9:1"
                              },
                              "variableNames": [
                                {
                                  "name": "r",
                                  "nodeType": "YulIdentifier",
                                  "src": "13718:1:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "checked_div_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "x",
                            "nodeType": "YulTypedName",
                            "src": "13552:1:1",
                            "type": ""
                          },
                          {
                            "name": "y",
                            "nodeType": "YulTypedName",
                            "src": "13555:1:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "r",
                            "nodeType": "YulTypedName",
                            "src": "13561:1:1",
                            "type": ""
                          }
                        ],
                        "src": "13521:217:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "13795:116:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "13854:22:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "13856:16:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13856:18:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "13856:18:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "x",
                                            "nodeType": "YulIdentifier",
                                            "src": "13826:1:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "13819:6:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "13819:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "13812:6:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13812:17:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "y",
                                        "nodeType": "YulIdentifier",
                                        "src": "13834:1:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "13845:1:1",
                                                "type": "",
                                                "value": "0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "not",
                                              "nodeType": "YulIdentifier",
                                              "src": "13841:3:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "13841:6:1"
                                          },
                                          {
                                            "name": "x",
                                            "nodeType": "YulIdentifier",
                                            "src": "13849:1:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "div",
                                          "nodeType": "YulIdentifier",
                                          "src": "13837:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "13837:14:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "gt",
                                      "nodeType": "YulIdentifier",
                                      "src": "13831:2:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13831:21:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "13808:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13808:45:1"
                              },
                              "nodeType": "YulIf",
                              "src": "13805:2:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "13885:20:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "13900:1:1"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "13903:1:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mul",
                                  "nodeType": "YulIdentifier",
                                  "src": "13896:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13896:9:1"
                              },
                              "variableNames": [
                                {
                                  "name": "product",
                                  "nodeType": "YulIdentifier",
                                  "src": "13885:7:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "checked_mul_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "x",
                            "nodeType": "YulTypedName",
                            "src": "13774:1:1",
                            "type": ""
                          },
                          {
                            "name": "y",
                            "nodeType": "YulTypedName",
                            "src": "13777:1:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "product",
                            "nodeType": "YulTypedName",
                            "src": "13783:7:1",
                            "type": ""
                          }
                        ],
                        "src": "13743:168:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "13969:205:1",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "13979:10:1",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13988:1:1",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "i",
                                  "nodeType": "YulTypedName",
                                  "src": "13983:1:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "14048:63:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "dst",
                                              "nodeType": "YulIdentifier",
                                              "src": "14073:3:1"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "14078:1:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "14069:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "14069:11:1"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "src",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "14092:3:1"
                                                },
                                                {
                                                  "name": "i",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "14097:1:1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "14088:3:1"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "14088:11:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "14082:5:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "14082:18:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "14062:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14062:39:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "14062:39:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "14009:1:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "14012:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "14006:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14006:13:1"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "14020:19:1",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "14022:15:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "14031:1:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "14034:2:1",
                                          "type": "",
                                          "value": "32"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "14027:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14027:10:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulIdentifier",
                                        "src": "14022:1:1"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "pre": {
                                "nodeType": "YulBlock",
                                "src": "14002:3:1",
                                "statements": []
                              },
                              "src": "13998:113:1"
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "14137:31:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "dst",
                                              "nodeType": "YulIdentifier",
                                              "src": "14150:3:1"
                                            },
                                            {
                                              "name": "length",
                                              "nodeType": "YulIdentifier",
                                              "src": "14155:6:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "14146:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "14146:16:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "14164:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "14139:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14139:27:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "14139:27:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "14126:1:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "14129:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "14123:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14123:13:1"
                              },
                              "nodeType": "YulIf",
                              "src": "14120:2:1"
                            }
                          ]
                        },
                        "name": "copy_memory_to_memory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "src",
                            "nodeType": "YulTypedName",
                            "src": "13947:3:1",
                            "type": ""
                          },
                          {
                            "name": "dst",
                            "nodeType": "YulTypedName",
                            "src": "13952:3:1",
                            "type": ""
                          },
                          {
                            "name": "length",
                            "nodeType": "YulTypedName",
                            "src": "13957:6:1",
                            "type": ""
                          }
                        ],
                        "src": "13916:258:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "14226:88:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "14257:22:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "14259:16:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14259:18:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "14259:18:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "14242:5:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14253:1:1",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "14249:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14249:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "14239:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14239:17:1"
                              },
                              "nodeType": "YulIf",
                              "src": "14236:2:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "14288:20:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "14299:5:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14306:1:1",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14295:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14295:13:1"
                              },
                              "variableNames": [
                                {
                                  "name": "ret",
                                  "nodeType": "YulIdentifier",
                                  "src": "14288:3:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "increment_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "14208:5:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "ret",
                            "nodeType": "YulTypedName",
                            "src": "14218:3:1",
                            "type": ""
                          }
                        ],
                        "src": "14179:135:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "14351:95:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14368:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14375:3:1",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14380:10:1",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "14371:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14371:20:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "14361:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14361:31:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14361:31:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14408:1:1",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14411:4:1",
                                    "type": "",
                                    "value": "0x11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "14401:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14401:15:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14401:15:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14432:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14435:4:1",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "14425:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14425:15:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14425:15:1"
                            }
                          ]
                        },
                        "name": "panic_error_0x11",
                        "nodeType": "YulFunctionDefinition",
                        "src": "14319:127:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "14483:95:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14500:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14507:3:1",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14512:10:1",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "14503:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14503:20:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "14493:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14493:31:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14493:31:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14540:1:1",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14543:4:1",
                                    "type": "",
                                    "value": "0x41"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "14533:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14533:15:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14533:15:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14564:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14567:4:1",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "14557:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14557:15:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14557:15:1"
                            }
                          ]
                        },
                        "name": "panic_error_0x41",
                        "nodeType": "YulFunctionDefinition",
                        "src": "14451:127:1"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let _1 := calldataload(offset)\n        if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n        let array_1 := allocate_memory(add(and(add(_1, 0x1f), not(31)), 0x20))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(array, array) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), array)\n        array := array_1\n    }\n    function abi_decode_uint8(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_uint8(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_uint8(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_array$_t_string_memory_ptr_$dyn_memory_ptr(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(value0, value0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(value0, value0) }\n        let _4 := calldataload(_3)\n        let dst := allocate_memory(array_allocation_size_array_string_dyn(_4))\n        let dst_1 := dst\n        mstore(dst, _4)\n        dst := add(dst, _1)\n        let src := add(_3, _1)\n        if gt(add(add(_3, shl(5, _4)), _1), dataEnd) { revert(value0, value0) }\n        let i := value0\n        for { } lt(i, _4) { i := add(i, 1) }\n        {\n            let innerOffset := calldataload(src)\n            if gt(innerOffset, _2) { revert(value0, value0) }\n            mstore(dst, abi_decode_string(add(add(_3, innerOffset), _1), dataEnd))\n            dst := add(dst, _1)\n            src := add(src, _1)\n        }\n        value0 := dst_1\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_enum$_Category_$11(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        if iszero(lt(value, 5)) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_enum$_Share_$15(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        if iszero(lt(value, 3)) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(value0, value0) }\n        value0 := abi_decode_string(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        let _1 := 32\n        let offset := calldataload(add(headStart, _1))\n        if gt(offset, 0xffffffffffffffff) { revert(value1, value1) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(value1, value1) }\n        let _3 := calldataload(_2)\n        let dst := allocate_memory(array_allocation_size_array_string_dyn(_3))\n        let dst_1 := dst\n        mstore(dst, _3)\n        dst := add(dst, _1)\n        let src := add(_2, _1)\n        if gt(add(add(_2, shl(5, _3)), _1), dataEnd) { revert(value1, value1) }\n        let i := value1\n        for { } lt(i, _3) { i := add(i, 1) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _1)\n            src := add(src, _1)\n        }\n        value1 := dst_1\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint8(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_uint8(headStart)\n    }\n    function abi_decode_tuple_t_uint8t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_uint8(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        mstore(end_1, value1)\n        end := add(end_1, 0x20)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_array$_t_struct$_WasteData_$43_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_WasteData_$43_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        let _2 := 64\n        pos := add(headStart, _2)\n        let srcPtr := add(value0, _1)\n        let i := tail\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            let _3 := mload(srcPtr)\n            mstore(pos, mload(_3))\n            let memberValue0 := mload(add(_3, _1))\n            let _4 := sub(shl(160, 1), 1)\n            mstore(add(pos, _1), and(memberValue0, _4))\n            mstore(add(pos, _2), and(mload(add(_3, _2)), _4))\n            let _5 := 0x60\n            mstore(add(pos, _5), and(mload(add(_3, _5)), _4))\n            let _6 := 0x80\n            let memberValue0_1 := mload(add(_3, _6))\n            if iszero(lt(memberValue0_1, 3))\n            {\n                mstore(tail, shl(224, 0x4e487b71))\n                mstore(4, 0x21)\n                revert(tail, 0x24)\n            }\n            mstore(add(pos, _6), memberValue0_1)\n            pos := add(pos, 0xa0)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_0855ec215c237c3402a18339339aeeabd173180125b97094d2e4366ff55d9ec5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Already sign up\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_593fd4f5418ae095969b093812245f49eb950b9775e5afd767614f342e26d4f2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"Not Authorized\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_98bb0d434888d1b812a0a4194c9568f0648e9ed0f8cbde68f7f17a68afe7b6cd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 11)\n        mstore(add(headStart, 64), \"Not allowed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b9c8b0a781ee5b87f71931d50074d05dd76b7be959de5062a78ccee2fb412519__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 13)\n        mstore(add(headStart, 64), \"Not available\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c42ca90c935df80db9ecab8e34c935bcc35abb722f6ed440da8d67e0cbd0ec47__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Invalid category\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c6f5816ffca9f3bdafc2c13d983135d2a105150b42711b53975c78544de1fc78__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 6)\n        mstore(add(headStart, 64), \"IValue\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f5bbd90151df77045995fef44fa489fd73d41063f4d63aeaef7d4ef2cc0fb065__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Invalid selecetor\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_ffd7db0f9d5cdeb49c4c9eba649d4dc6d852d64671e65488e57f58584992ac68__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 7)\n        mstore(add(headStart, 64), \"invalid\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_string_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(r, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(r, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n}",
                  "id": 1,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C1 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x93051D95 GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xC437A2F0 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xF2FDE38B GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x4E9 JUMPI DUP1 PUSH4 0xF9404506 EQ PUSH2 0x509 JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0x51F JUMPI DUP1 PUSH4 0xFFC2105C EQ PUSH2 0x53F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC437A2F0 EQ PUSH2 0x48E JUMPI DUP1 PUSH4 0xE47C294D EQ PUSH2 0x4A1 JUMPI DUP1 PUSH4 0xEA77351F EQ PUSH2 0x4C1 JUMPI DUP1 PUSH4 0xF2D03E15 EQ PUSH2 0x4C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA741C0DF GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xA741C0DF EQ PUSH2 0x3DF JUMPI DUP1 PUSH4 0xB7588280 EQ PUSH2 0x40C JUMPI DUP1 PUSH4 0xC2F0C279 EQ PUSH2 0x42C JUMPI DUP1 PUSH4 0xC3864CCE EQ PUSH2 0x46E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x93051D95 EQ PUSH2 0x389 JUMPI DUP1 PUSH4 0x955EF11A EQ PUSH2 0x3A9 JUMPI DUP1 PUSH4 0xA035B1FE EQ PUSH2 0x3C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x885C7B38 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x885C7B38 EQ PUSH2 0x2F3 JUMPI DUP1 PUSH4 0x8C6AA3F5 EQ PUSH2 0x32B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x34B JUMPI DUP1 PUSH4 0x91B7F5ED EQ PUSH2 0x369 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2A9 JUMPI DUP1 PUSH4 0x72938A14 EQ PUSH2 0x2BE JUMPI DUP1 PUSH4 0x84B038DF EQ PUSH2 0x2DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x235EB9F5 GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x235EB9F5 EQ PUSH2 0x23E JUMPI DUP1 PUSH4 0x31B59ED7 EQ PUSH2 0x254 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x274 JUMPI DUP1 PUSH4 0x41311BC3 EQ PUSH2 0x289 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x95DB2D EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0xBDD7063 EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0x1F2A4A3F EQ PUSH2 0x228 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F3 PUSH2 0x1E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A19 JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x221 CALLDATASIZE PUSH1 0x4 PUSH2 0x2AC2 JUMP JUMPDEST PUSH2 0x555 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x234 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F3 PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F3 PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x260 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x26F CALLDATASIZE PUSH1 0x4 PUSH2 0x2911 JUMP JUMPDEST PUSH2 0x63B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x69C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x295 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x2A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2AC2 JUMP JUMPDEST PUSH2 0x7E3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x8B7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x2D9 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A92 JUMP JUMPDEST PUSH2 0x8CB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x8D8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x313 PUSH2 0x30E CALLDATASIZE PUSH1 0x4 PUSH2 0x2A92 JUMP JUMPDEST PUSH2 0xA42 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x337 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x346 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B9C JUMP JUMPDEST PUSH2 0xA74 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x357 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x313 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x375 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x384 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A92 JUMP JUMPDEST PUSH2 0xB1A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x395 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x3A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A92 JUMP JUMPDEST PUSH2 0xB27 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x3C4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2943 JUMP JUMPDEST PUSH2 0xBE2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F3 PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3FF PUSH2 0x3FA CALLDATASIZE PUSH1 0x4 PUSH2 0x2B82 JUMP JUMPDEST PUSH2 0xCBB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x2BE7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x418 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x427 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A57 JUMP JUMPDEST PUSH2 0xE5F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x438 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45C PUSH2 0x447 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A38 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x489 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B61 JUMP JUMPDEST PUSH2 0xF39 JUMP JUMPDEST PUSH2 0x226 PUSH2 0x49C CALLDATASIZE PUSH1 0x4 PUSH2 0x2A92 JUMP JUMPDEST PUSH2 0x11A1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x4BC CALLDATASIZE PUSH1 0x4 PUSH2 0x2911 JUMP JUMPDEST PUSH2 0x15F1 JUMP JUMPDEST PUSH2 0x226 PUSH2 0x1648 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x4E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A92 JUMP JUMPDEST PUSH2 0x1697 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH2 0x504 CALLDATASIZE PUSH1 0x4 PUSH2 0x28F0 JUMP JUMPDEST PUSH2 0x16A4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x515 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F3 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x52B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0x313 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x54B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F3 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST DUP1 PUSH2 0x55E PUSH2 0x171A JUMP JUMPDEST PUSH1 0x20 ADD MLOAD DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x32 SWAP1 ISZERO PUSH2 0x5B0 JUMPI DUP2 PUSH1 0xFF AND DUP4 MLOAD GT DUP1 ISZERO PUSH2 0x586 JUMPI POP DUP1 PUSH1 0xFF AND DUP4 MLOAD GT ISZERO JUMPDEST PUSH2 0x5AB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A2 SWAP1 PUSH2 0x2CDE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E3 JUMP JUMPDEST DUP2 PUSH1 0xFF AND DUP5 MLOAD GT DUP1 ISZERO PUSH2 0x5C7 JUMPI POP DUP1 PUSH1 0xFF AND DUP5 MLOAD GT ISZERO JUMPDEST PUSH2 0x5E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A2 SWAP1 PUSH2 0x2CDE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x632 JUMPI PUSH2 0x620 DUP8 DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x613 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x177A JUMP JUMPDEST DUP1 PUSH2 0x62A DUP2 PUSH2 0x2DBF JUMP JUMPDEST SWAP2 POP POP PUSH2 0x5E6 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x643 PUSH2 0x1B25 JUMP JUMPDEST DUP1 PUSH1 0x4 DUP2 PUSH1 0xFF AND LT PUSH2 0x667 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A2 SWAP1 PUSH2 0x2CB4 JUMP JUMPDEST PUSH2 0x697 PUSH1 0xA DUP5 PUSH1 0x1 DUP6 PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x692 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1B7F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH1 0x44 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x701 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x725 SWAP2 SWAP1 PUSH2 0x2AAA JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x745 JUMPI PUSH1 0x40 MLOAD PUSH4 0x686827B PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23B872DD ADDRESS CALLER PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7BB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7DF SWAP2 SWAP1 PUSH2 0x29F9 JUMP JUMPDEST POP POP JUMP JUMPDEST DUP1 PUSH2 0x7EC PUSH2 0x171A JUMP JUMPDEST PUSH1 0x20 ADD MLOAD DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x32 SWAP1 ISZERO PUSH2 0x835 JUMPI DUP2 PUSH1 0xFF AND DUP4 MLOAD GT DUP1 ISZERO PUSH2 0x814 JUMPI POP DUP1 PUSH1 0xFF AND DUP4 MLOAD GT ISZERO JUMPDEST PUSH2 0x830 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A2 SWAP1 PUSH2 0x2CDE JUMP JUMPDEST PUSH2 0x868 JUMP JUMPDEST DUP2 PUSH1 0xFF AND DUP5 MLOAD GT DUP1 ISZERO PUSH2 0x84C JUMPI POP DUP1 PUSH1 0xFF AND DUP5 MLOAD GT ISZERO JUMPDEST PUSH2 0x868 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A2 SWAP1 PUSH2 0x2CDE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x632 JUMPI PUSH2 0x8A5 DUP8 DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x898 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xF39 JUMP JUMPDEST DUP1 PUSH2 0x8AF DUP2 PUSH2 0x2DBF JUMP JUMPDEST SWAP2 POP POP PUSH2 0x86B JUMP JUMPDEST PUSH2 0x8BF PUSH2 0x1B25 JUMP JUMPDEST PUSH2 0x8C9 PUSH1 0x0 PUSH2 0x1CD7 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x8D3 PUSH2 0x1B25 JUMP JUMPDEST PUSH1 0x4 SSTORE JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x13DA86008BA1C6922DAEE3E07DB95305EF49EBCED9F5467A0B8613FCC6B343E3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x951 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x416C7265616479207369676E20757 PUSH1 0x8C SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5A2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x13DA86008BA1C6922DAEE3E07DB95305EF49EBCED9F5467A0B8613FCC6B343E3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH4 0xFFFFFFFF NOT AND TIMESTAMP PUSH4 0xFFFFFFFF AND OR DUP2 SSTORE PUSH1 0x1 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0x100 PUSH2 0xFFFF NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x95EA7B3 CALLER PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA1B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA3F SWAP2 SWAP1 PUSH2 0x29F9 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x7 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xA52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x1 PUSH1 0x2 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH2 0xA7C PUSH2 0x1B25 JUMP JUMPDEST PUSH1 0x4 DUP3 PUSH1 0xFF AND LT PUSH2 0xA9F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A2 SWAP1 PUSH2 0x2CB4 JUMP JUMPDEST DUP1 PUSH1 0xB PUSH1 0x0 DUP5 PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xAC7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xAE6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xB05 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SSTORE POP POP JUMP JUMPDEST PUSH2 0xB22 PUSH2 0x1B25 JUMP JUMPDEST PUSH1 0x6 SSTORE JUMP JUMPDEST PUSH1 0x3 CALLER PUSH2 0xB34 DUP3 DUP3 PUSH2 0x1D27 JUMP JUMPDEST PUSH2 0xB51 JUMPI PUSH1 0x40 MLOAD PUSH4 0xAA6318D3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB5C DUP5 PUSH2 0x1DA1 JUMP JUMPDEST SWAP1 POP PUSH2 0xB70 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xBD1 JUMPI CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ PUSH2 0xBD1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x139BDD08105D5D1A1BDC9A5E9959 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5A2 JUMP JUMPDEST PUSH2 0xBDC PUSH1 0x7 DUP6 PUSH2 0x1DE7 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0xBEA PUSH2 0x171A JUMP JUMPDEST MLOAD DUP2 MLOAD DUP3 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x32 SWAP1 ISZERO PUSH2 0xC32 JUMPI DUP2 PUSH1 0xFF AND DUP4 MLOAD GT DUP1 ISZERO PUSH2 0xC11 JUMPI POP DUP1 PUSH1 0xFF AND DUP4 MLOAD GT ISZERO JUMPDEST PUSH2 0xC2D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A2 SWAP1 PUSH2 0x2CDE JUMP JUMPDEST PUSH2 0xC65 JUMP JUMPDEST DUP2 PUSH1 0xFF AND DUP5 MLOAD GT DUP1 ISZERO PUSH2 0xC49 JUMPI POP DUP1 PUSH1 0xFF AND DUP5 MLOAD GT ISZERO JUMPDEST PUSH2 0xC65 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A2 SWAP1 PUSH2 0x2CDE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0xCB3 JUMPI PUSH2 0xCA1 DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xC94 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xE5F JUMP JUMPDEST DUP1 PUSH2 0xCAB DUP2 PUSH2 0x2DBF JUMP JUMPDEST SWAP2 POP POP PUSH2 0xC68 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP3 PUSH1 0xFF AND LT PUSH2 0xD04 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x24B73B30B634B21039B2B632B1B2BA37B9 PUSH1 0x79 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5A2 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x0 DUP4 PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xD2B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xD4A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xD69 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0xE54 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x4 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x2 DUP1 DUP3 ADD SLOAD DUP6 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP2 ADD SLOAD SWAP4 DUP5 AND PUSH1 0x60 DUP5 ADD MSTORE SWAP2 SWAP3 PUSH1 0x80 DUP5 ADD SWAP2 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND SWAP1 DUP2 GT ISZERO PUSH2 0xE22 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xE41 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xD97 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 CALLER PUSH2 0xE6C DUP3 DUP3 PUSH2 0x1D27 JUMP JUMPDEST PUSH2 0xE89 JUMPI PUSH1 0x40 MLOAD PUSH4 0xAA6318D3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x0 SWAP2 DUP3 PUSH2 0xE9A DUP4 PUSH2 0x2DBF JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x3 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0xF32 SWAP1 PUSH1 0x9 SWAP1 DUP1 PUSH2 0xEC3 DUP10 DUP7 PUSH1 0xC0 DUP5 ADD PUSH2 0x2BC5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xEF5 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD DUP6 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xF2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 MSTORE DUP5 PUSH2 0x2028 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0xF46 DUP3 DUP3 PUSH2 0x1D27 JUMP JUMPDEST PUSH2 0xF63 JUMPI PUSH1 0x40 MLOAD PUSH4 0xAA6318D3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP4 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x15 DUP2 MSTORE PUSH1 0x20 ADD PUSH21 0x24B73B30B634B2103BB0B9BA32903837B4B73A32B9 PUSH1 0x59 SHL DUP2 MSTORE POP PUSH1 0x7 DUP1 SLOAD SWAP1 POP DUP5 LT PUSH2 0xFBA JUMPI PUSH1 0x40 MLOAD PUSH4 0x83204183 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xFDC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ ISZERO PUSH2 0x1033 JUMPI PUSH1 0x7 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x1003 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 SWAP1 SWAP2 MUL ADD SLOAD DUP4 LT PUSH2 0x1033 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E849FFB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1053 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x7 DUP6 DUP2 SLOAD DUP2 LT PUSH2 0x1074 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x10A4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x10E2 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ DUP2 SWAP1 PUSH2 0x1102 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A2 SWAP2 SWAP1 PUSH2 0x2C81 JUMP JUMPDEST POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x13DA86008BA1C6922DAEE3E07DB95305EF49EBCED9F5467A0B8613FCC6B343E3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1177 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x139BDD08185B1B1BDDD959 PUSH1 0xAA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5A2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1186 PUSH1 0x9 DUP10 PUSH1 0x0 PUSH2 0x21A2 JUMP JUMPDEST SWAP1 POP PUSH2 0x1196 PUSH1 0x7 DUP11 DUP4 PUSH1 0x1 PUSH2 0x23A2 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH32 0x6CDE3CEA4B3A3FB2488B2808BAE7556F4A405E50F65E1794383BC026131B13C3 SLOAD SWAP2 DUP3 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x11DF JUMPI POP DUP4 DUP4 LT ISZERO JUMPDEST PUSH2 0x121B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x4E6F7420617661696C61626C65 PUSH1 0x98 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5A2 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x15A5 JUMPI PUSH1 0x0 PUSH1 0x9 PUSH1 0x0 DUP5 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x124C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x126B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1298 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x4 SWAP4 SWAP1 SWAP4 MUL SWAP1 SWAP2 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x2 DUP1 DUP3 ADD SLOAD DUP6 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP2 ADD SLOAD SWAP4 DUP5 AND PUSH1 0x60 DUP5 ADD MSTORE SWAP2 SWAP3 PUSH1 0x80 DUP5 ADD SWAP2 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND SWAP1 DUP2 GT ISZERO PUSH2 0x131D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x133C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 MSTORE POP PUSH1 0x60 DUP2 ADD MLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x1592 JUMPI DUP4 PUSH2 0x135F DUP2 PUSH2 0x2DBF JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE SWAP1 SWAP6 POP PUSH32 0xE1EB2B2161A492C07C5A334E48012567CBA93EC021043F53C1955516A3C5A841 SWAP2 POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP4 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x80 ADD MLOAD PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1427 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 MSTORE DUP2 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP5 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0x4 SWAP1 SWAP4 MUL ADD SWAP2 DUP3 SSTORE SWAP3 DUP3 ADD MLOAD SWAP3 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x2 DUP1 DUP5 ADD DUP1 SLOAD DUP5 AND SWAP3 DUP8 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x3 DUP5 ADD DUP1 SLOAD SWAP4 DUP5 AND SWAP2 SWAP1 SWAP7 AND SWAP1 DUP2 OR DUP7 SSTORE PUSH1 0x80 DUP6 ADD MLOAD SWAP5 SWAP6 SWAP4 SWAP5 SWAP4 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND OR SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DUP5 SWAP1 DUP2 GT ISZERO PUSH2 0x14D7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MUL OR SWAP1 SSTORE POP POP POP PUSH1 0x9 PUSH1 0x0 DUP5 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1502 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1521 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x154E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 PUSH1 0x4 SWAP1 SWAP2 MUL ADD SWAP1 DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP3 ADD DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND SWAP1 SSTORE JUMPDEST POP DUP1 PUSH2 0x159D DUP2 PUSH2 0x2DBF JUMP JUMPDEST SWAP2 POP POP PUSH2 0x121E JUMP JUMPDEST POP PUSH1 0x0 DUP3 PUSH1 0x6 SLOAD PUSH2 0x15B6 SWAP2 SWAP1 PUSH2 0x2D74 JUMP JUMPDEST SWAP1 POP DUP1 CALLVALUE LT ISZERO PUSH2 0xF32 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x6 PUSH1 0x24 DUP3 ADD MSTORE PUSH6 0x4956616C7565 PUSH1 0xD0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5A2 JUMP JUMPDEST PUSH2 0x15F9 PUSH2 0x1B25 JUMP JUMPDEST DUP1 PUSH1 0x4 DUP2 PUSH1 0xFF AND LT PUSH2 0x161D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A2 SWAP1 PUSH2 0x2CB4 JUMP JUMPDEST PUSH2 0x697 PUSH1 0xA DUP5 PUSH1 0x0 DUP6 PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x692 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x3 CALLER PUSH2 0x1655 DUP3 DUP3 PUSH2 0x1D27 JUMP JUMPDEST PUSH2 0x1672 JUMPI PUSH1 0x40 MLOAD PUSH4 0xAA6318D3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x167D PUSH1 0x7 CALLER PUSH2 0x24FE JUMP JUMPDEST POP PUSH1 0x5 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x168E DUP4 PUSH2 0x2DBF JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP POP POP JUMP JUMPDEST PUSH2 0x169F PUSH2 0x1B25 JUMP JUMPDEST PUSH1 0x1 SSTORE JUMP JUMPDEST PUSH2 0x16AC PUSH2 0x1B25 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1711 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5A2 JUMP JUMPDEST PUSH2 0xA3F DUP2 PUSH2 0x1CD7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x60 DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE SWAP2 DUP2 ADD DUP3 DUP2 MSTORE DUP2 DUP6 ADD SWAP1 SWAP5 MSTORE SWAP2 SWAP3 DUP2 PUSH2 0x1761 JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x174C JUMPI SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 CALLER PUSH2 0x1787 DUP3 DUP3 PUSH2 0x1D27 JUMP JUMPDEST PUSH2 0x17A4 JUMPI PUSH1 0x40 MLOAD PUSH4 0xAA6318D3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP4 PUSH1 0x1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x15 DUP2 MSTORE PUSH1 0x20 ADD PUSH21 0x24B73B30B634B2103BB0B9BA32903837B4B73A32B9 PUSH1 0x59 SHL DUP2 MSTORE POP PUSH1 0x7 DUP1 SLOAD SWAP1 POP DUP5 LT PUSH2 0x17FB JUMPI PUSH1 0x40 MLOAD PUSH4 0x83204183 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x181D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ ISZERO PUSH2 0x1874 JUMPI PUSH1 0x7 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x1844 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 SWAP1 SWAP2 MUL ADD SLOAD DUP4 LT PUSH2 0x1874 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E849FFB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1894 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x7 DUP6 DUP2 SLOAD DUP2 LT PUSH2 0x18B5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x18E5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1923 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ DUP2 SWAP1 PUSH2 0x1943 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A2 SWAP2 SWAP1 PUSH2 0x2C81 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x1952 PUSH1 0x7 DUP11 DUP11 PUSH2 0x2569 JUMP JUMPDEST SWAP1 POP PUSH2 0x1961 PUSH1 0x9 DUP3 PUSH1 0x2 PUSH2 0x2028 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 DUP1 DUP1 PUSH2 0x1973 PUSH1 0x8 DUP6 PUSH2 0x26E2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x20 DUP10 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE SWAP5 SWAP8 POP SWAP3 SWAP6 POP SWAP1 SWAP4 POP AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x19E1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A05 SWAP2 SWAP1 PUSH2 0x29F9 JUMP JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x40 DUP7 DUP2 ADD MLOAD SWAP1 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE SWAP2 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A6C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A90 SWAP2 SWAP1 PUSH2 0x29F9 JUMP JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1ADD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1AF1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B15 SWAP2 SWAP1 PUSH2 0x29F9 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x8C9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5A2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B8C DUP6 DUP6 DUP5 PUSH2 0x2777 JUMP JUMPDEST SWAP1 POP DUP3 ISZERO PUSH2 0x1C34 JUMPI DUP1 ISZERO PUSH2 0x1BB3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3EE20B69 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP6 PUSH1 0x0 DUP5 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1BD8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1BF7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP3 MSTORE SWAP1 SWAP3 MSTORE SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0xF32 JUMP JUMPDEST DUP1 PUSH2 0x1C52 JUMPI PUSH1 0x40 MLOAD PUSH4 0xAA6318D3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 DUP5 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1C77 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1C96 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP3 MSTORE SWAP1 SWAP3 MSTORE SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH1 0xFF NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA PUSH1 0x0 DUP5 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1D4D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1D6C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP3 MSTORE SWAP1 SWAP3 MSTORE SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1DC4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x1 PUSH1 0x2 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP5 DUP5 DUP3 DUP2 LT PUSH2 0x1E0D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x1F08 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x4 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x2 DUP1 DUP3 ADD SLOAD DUP6 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP2 ADD SLOAD SWAP4 DUP5 AND PUSH1 0x60 DUP5 ADD MSTORE SWAP2 SWAP3 PUSH1 0x80 DUP5 ADD SWAP2 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND SWAP1 DUP2 GT ISZERO PUSH2 0x1ED6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1EF5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1E4B JUMP JUMPDEST POP POP POP SWAP1 DUP3 MSTORE POP PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE DUP1 MLOAD MLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH2 0x1F4A JUMPI PUSH1 0x40 MLOAD PUSH4 0x347682F5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1FD5 JUMPI PUSH1 0x2 DUP3 MLOAD DUP1 MLOAD DUP4 SWAP1 DUP2 LT PUSH2 0x1F79 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1FA4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST LT ISZERO PUSH2 0x1FC3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3F00676B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x1FCD DUP2 PUSH2 0x2DBF JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1F4D JUMP JUMPDEST POP DUP4 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x1FF6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 PUSH1 0x2 SWAP1 SWAP2 MUL ADD SWAP1 PUSH2 0x2010 DUP3 DUP3 PUSH2 0x27F1 JUMP JUMPDEST POP PUSH1 0x1 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x0 DUP3 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x204B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x206A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x20E6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 MSTORE DUP2 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP5 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0x4 SWAP1 SWAP4 MUL ADD SWAP2 DUP3 SSTORE SWAP3 DUP3 ADD MLOAD SWAP3 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x2 DUP1 DUP5 ADD DUP1 SLOAD DUP5 AND SWAP3 DUP8 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x3 DUP5 ADD DUP1 SLOAD SWAP4 DUP5 AND SWAP2 SWAP1 SWAP7 AND SWAP1 DUP2 OR DUP7 SSTORE PUSH1 0x80 DUP6 ADD MLOAD SWAP5 SWAP6 SWAP4 SWAP5 SWAP4 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND OR SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DUP5 SWAP1 DUP2 GT ISZERO PUSH2 0x2196 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MUL OR SWAP1 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x21D1 PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH1 0x80 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP4 PUSH1 0x0 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x21F4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x2213 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x2240 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x4 SWAP4 SWAP1 SWAP4 MUL SWAP1 SWAP2 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x2 DUP1 DUP3 ADD SLOAD DUP6 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP2 ADD SLOAD SWAP4 DUP5 AND PUSH1 0x60 DUP5 ADD MSTORE SWAP2 SWAP3 PUSH1 0x80 DUP5 ADD SWAP2 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND SWAP1 DUP2 GT ISZERO PUSH2 0x22C5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x22E4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 MSTORE POP SWAP1 POP DUP4 PUSH1 0x0 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x230C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x232B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x2358 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 PUSH1 0x4 SWAP1 SWAP2 MUL ADD SWAP1 DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP3 ADD DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND SWAP1 SSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP4 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x23C2 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x2441 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 MSTORE DUP2 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP5 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0x4 SWAP1 SWAP4 MUL ADD SWAP2 DUP3 SSTORE SWAP3 DUP3 ADD MLOAD SWAP3 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x2 DUP1 DUP5 ADD DUP1 SLOAD DUP5 AND SWAP3 DUP8 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x3 DUP5 ADD DUP1 SLOAD SWAP4 DUP5 AND SWAP2 SWAP1 SWAP7 AND SWAP1 DUP2 OR DUP7 SSTORE PUSH1 0x80 DUP6 ADD MLOAD SWAP5 SWAP6 SWAP4 SWAP5 SWAP4 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND OR SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DUP5 SWAP1 DUP2 GT ISZERO PUSH2 0x24F1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 DUP2 ADD DUP1 DUP5 SSTORE PUSH1 0x0 DUP5 SWAP1 MSTORE DUP3 SWAP1 DUP5 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x252E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2598 PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH1 0x80 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP4 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x25B8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x25E8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x4 SWAP4 SWAP1 SWAP4 MUL SWAP1 SWAP2 ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x2 DUP1 DUP3 ADD SLOAD DUP6 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP2 ADD SLOAD SWAP4 DUP5 AND PUSH1 0x60 DUP5 ADD MSTORE SWAP2 SWAP3 PUSH1 0x80 DUP5 ADD SWAP2 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND SWAP1 DUP2 GT ISZERO PUSH2 0x266D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x268C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE POP POP SWAP1 POP DUP4 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x26B2 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2358 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP1 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP2 SWAP1 DUP2 SWAP1 PUSH1 0x64 SWAP1 PUSH2 0x2706 SWAP1 DUP7 SWAP1 PUSH1 0xFF AND PUSH2 0x2D74 JUMP JUMPDEST PUSH2 0x2710 SWAP2 SWAP1 PUSH2 0x2D54 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP8 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP4 POP PUSH1 0x64 SWAP1 PUSH2 0x2735 SWAP1 DUP7 SWAP1 PUSH1 0xFF AND PUSH2 0x2D74 JUMP JUMPDEST PUSH2 0x273F SWAP2 SWAP1 PUSH2 0x2D54 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP8 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP3 POP PUSH1 0x64 SWAP1 PUSH2 0x2764 SWAP1 DUP7 SWAP1 PUSH1 0xFF AND PUSH2 0x2D74 JUMP JUMPDEST PUSH2 0x276E SWAP2 SWAP1 PUSH2 0x2D54 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x0 DUP4 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x279C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x27BB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP3 MSTORE SWAP1 SWAP3 MSTORE SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x0 DUP3 SSTORE PUSH1 0x4 MUL SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA3F SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x2854 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP3 ADD DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x3 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND SWAP1 SSTORE PUSH1 0x4 ADD PUSH2 0x280E JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x286F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2884 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x289E JUMPI PUSH2 0x289E PUSH2 0x2DF0 JUMP JUMPDEST PUSH2 0x28B1 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x2CFF JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x28C5 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP1 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x286F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2901 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x290A DUP3 PUSH2 0x2858 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2923 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x292C DUP4 PUSH2 0x2858 JUMP JUMPDEST SWAP2 POP PUSH2 0x293A PUSH1 0x20 DUP5 ADD PUSH2 0x28DF JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2955 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x296C JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x297F JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2992 PUSH2 0x298D DUP3 PUSH2 0x2D30 JUMP JUMPDEST PUSH2 0x2CFF JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE DUP6 DUP3 ADD SWAP2 POP DUP6 DUP6 ADD DUP10 DUP8 DUP6 PUSH1 0x5 SHL DUP9 ADD ADD GT ISZERO PUSH2 0x29B1 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x29EA JUMPI DUP2 CALLDATALOAD DUP7 DUP2 GT ISZERO PUSH2 0x29C9 JUMPI DUP10 DUP11 REVERT JUMPDEST PUSH2 0x29D7 DUP13 DUP11 DUP4 DUP12 ADD ADD PUSH2 0x2874 JUMP JUMPDEST DUP6 MSTORE POP SWAP3 DUP8 ADD SWAP3 SWAP1 DUP8 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x29B3 JUMP JUMPDEST POP SWAP1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A0A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x290A JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A2A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x5 DUP2 LT PUSH2 0x290A JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A49 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x3 DUP2 LT PUSH2 0x290A JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A68 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2A7E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x2A8A DUP5 DUP3 DUP6 ADD PUSH2 0x2874 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2AA3 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2ABB JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2AD4 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP1 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2AF2 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 ADD PUSH1 0x1F DUP2 ADD DUP7 SGT PUSH2 0x2B02 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x2B10 PUSH2 0x298D DUP3 PUSH2 0x2D30 JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE DUP5 DUP3 ADD SWAP2 POP DUP5 DUP5 ADD DUP10 DUP7 DUP6 PUSH1 0x5 SHL DUP8 ADD ADD GT ISZERO PUSH2 0x2B2F JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x2B51 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x2B33 JUMP JUMPDEST POP DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2B73 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2B93 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x290A DUP3 PUSH2 0x28DF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2BAE JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x2BB7 DUP4 PUSH2 0x28DF JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x2BD7 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x2D93 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP2 DUP3 MSTORE POP PUSH1 0x20 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP7 DUP5 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2C74 JUMPI DUP2 MLOAD DUP1 MLOAD DUP6 MSTORE DUP7 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP9 DUP8 ADD MSTORE DUP7 DUP3 ADD MLOAD DUP2 AND DUP8 DUP8 ADD MSTORE PUSH1 0x60 DUP1 DUP4 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP7 ADD MSTORE PUSH1 0x80 SWAP1 DUP2 ADD MLOAD SWAP1 PUSH1 0x3 DUP3 LT PUSH2 0x2C5F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST DUP6 ADD MSTORE PUSH1 0xA0 SWAP1 SWAP4 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2C04 JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2CA0 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2D93 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH16 0x496E76616C69642063617465676F7279 PUSH1 0x80 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x7 SWAP1 DUP3 ADD MSTORE PUSH7 0x1A5B9D985B1A59 PUSH1 0xCA SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2D28 JUMPI PUSH2 0x2D28 PUSH2 0x2DF0 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2D4A JUMPI PUSH2 0x2D4A PUSH2 0x2DF0 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2D6F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x2D8E JUMPI PUSH2 0x2D8E PUSH2 0x2DDA JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2DAE JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2D96 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xBDC JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x2DD3 JUMPI PUSH2 0x2DD3 PUSH2 0x2DDA JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH27 0xD4ECE5FA1A7ED713DA19E10D238F70CF12843D968B19FFD5F9CCF8 EXP 0x4C 0xAD 0x23 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ",
              "sourceMap": "12772:11498:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14188:45;;;;;;;;;;-1:-1:-1;14188:45:0;;;;;:::i;:::-;;;;;;;;;;;;;;;;;12829:25:1;;;12817:2;12802:18;14188:45:0;;;;;;;;20963:226;;;;;;;;;;-1:-1:-1;20963:226:0;;;;;:::i;:::-;;:::i;:::-;;13151:22;;;;;;;;;;;;;;;;13073:27;;;;;;;;;;;;;;;;17418:175;;;;;;;;;;-1:-1:-1;17418:175:0;;;;;:::i;:::-;;:::i;21331:247::-;;;;;;;;;;;;;:::i;22443:235::-;;;;;;;;;;-1:-1:-1;22443:235:0;;;;;:::i;:::-;;:::i;10380:103::-;;;;;;;;;;;;;:::i;24155:108::-;;;;;;;;;;-1:-1:-1;24155:108:0;;;;;:::i;:::-;;:::i;15834:266::-;;;;;;;;;;;;;:::i;13439:21::-;;;;;;;;;;-1:-1:-1;13439:21:0;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;6421:32:1;;;6403:51;;6391:2;6376:18;13439:21:0;6358:102:1;18094:172:0;;;;;;;;;;-1:-1:-1;18094:172:0;;;;;:::i;:::-;;:::i;9732:87::-;;;;;;;;;;-1:-1:-1;9778:7:0;9805:6;-1:-1:-1;;;;;9805:6:0;9732:87;;23821:85;;;;;;;;;;-1:-1:-1;23821:85:0;;;;;:::i;:::-;;:::i;16515:278::-;;;;;;;;;;-1:-1:-1;16515:278:0;;;;;:::i;:::-;;:::i;19336:202::-;;;;;;;;;;-1:-1:-1;19336:202:0;;;;;:::i;:::-;;:::i;13219:17::-;;;;;;;;;;;;;;;;16929:182;;;;;;;;;;-1:-1:-1;16929:182:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;18531:530::-;;;;;;;;;;-1:-1:-1;18531:530:0;;;;;:::i;:::-;;:::i;13473:37::-;;;;;;;;;;-1:-1:-1;13473:37:0;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;13037:4:1;13025:17;;;13007:36;;12995:2;12980:18;13473:37:0;12962:87:1;21923:447:0;;;;;;;;;;-1:-1:-1;21923:447:0;;;;;:::i;:::-;;:::i;22909:856::-;;;;;;:::i;:::-;;:::i;17740:175::-;;;;;;;;;;-1:-1:-1;17740:175:0;;;;;:::i;:::-;;:::i;16220:167::-;;;:::i;23980:103::-;;;;;;;;;;-1:-1:-1;23980:103:0;;;;;:::i;:::-;;:::i;10638:201::-;;;;;;;;;;-1:-1:-1;10638:201:0;;;;;:::i;:::-;;:::i;12866:27::-;;;;;;;;;;;;;;;;12928:20;;;;;;;;;;-1:-1:-1;12928:20:0;;;;-1:-1:-1;;;;;12928:20:0;;;13000:34;;;;;;;;;;;;;;;;20963:226;21044:8;21054;:6;:8::i;:::-;:18;;;15195:16;;15152:9;;15181:2;;15195:21;:203;;15355:3;15336:22;;:9;:16;:22;:50;;;;;15382:4;15362:24;;:9;:16;:24;;15336:50;15328:70;;;;-1:-1:-1;;;15328:70:0;;;;;;;:::i;:::-;;;;;;;;;15195:203;;;15259:3;15241:21;;:8;:15;:21;:48;;;;;15285:4;15266:23;;:8;:15;:23;;15241:48;15219:106;;;;-1:-1:-1;;;15219:106:0;;;;;;;:::i;:::-;21090:6:::1;21085:97;21106:8;:15;21102:1;:19;21085:97;;;21143:27;21151:5;21158:8;21167:1;21158:11;;;;;;-1:-1:-1::0;;;21158:11:0::1;;;;;;;;;;;;;;;21143:7;:27::i;:::-;21123:3:::0;::::1;::::0;::::1;:::i;:::-;;;;21085:97;;;;20963:226:::0;;;;;;:::o;17418:175::-;9618:13;:11;:13::i;:::-;17504:8:::1;14959:1;14953:3;:7;;;14945:36;;;;-1:-1:-1::0;;;14945:36:0::1;;;;;;;:::i;:::-;17525:60:::2;17545:8;17555:3;17560:4;17575:8;17566:18;;;;;;;;-1:-1:-1::0;;;17566:18:0::2;;;;;;;;;17525:19;:60::i;:::-;9642:1:::1;17418:175:::0;;:::o;21331:247::-;21393:5;;21386:51;;;-1:-1:-1;;;21386:51:0;;21418:4;21386:51;;;6677:34:1;8519:10:0;6727:18:1;;;6720:43;21386:51:0;;21369:14;;-1:-1:-1;;;;;21393:5:0;;21386:23;;6612:18:1;;;;;21386:51:0;;;;;;;;;21393:5;21386:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;21369:68;-1:-1:-1;21451:14:0;21448:45;;21474:19;;-1:-1:-1;;;21474:19:0;;;;;;;;;;;21448:45;21511:5;;-1:-1:-1;;;;;21511:5:0;21504:26;21539:4;8519:10;21504:66;;-1:-1:-1;;;;;;21504:66:0;;;;;;;-1:-1:-1;;;;;7032:15:1;;;21504:66:0;;;7014:34:1;7084:15;;7064:18;;;7057:43;7116:18;;;7109:34;;;6949:18;;21504:66:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;21331:247;:::o;22443:235::-;22529:8;22538;:6;:8::i;:::-;:18;;;15195:16;;15152:9;;15181:2;;15195:21;:203;;15355:3;15336:22;;:9;:16;:22;:50;;;;;15382:4;15362:24;;:9;:16;:24;;15336:50;15328:70;;;;-1:-1:-1;;;15328:70:0;;;;;;;:::i;:::-;15195:203;;;15259:3;15241:21;;:8;:15;:21;:48;;;;;15285:4;15266:23;;:8;:15;:23;;15241:48;15219:106;;;;-1:-1:-1;;;15219:106:0;;;;;;;:::i;:::-;22574:6:::1;22569:102;22590:8;:15;22586:1;:19;22569:102;;;22627:32;22640:5;22647:8;22656:1;22647:11;;;;;;-1:-1:-1::0;;;22647:11:0::1;;;;;;;;;;;;;;;22627:12;:32::i;:::-;22607:3:::0;::::1;::::0;::::1;:::i;:::-;;;;22569:102;;10380:103:::0;9618:13;:11;:13::i;:::-;10445:30:::1;10472:1;10445:18;:30::i;:::-;10380:103::o:0;24155:108::-;9618:13;:11;:13::i;:::-;24228:15:::1;:27:::0;24155:108::o;15834:266::-;8519:10;15894:28;:42;;;:28;;:42;;;;:55;;;;;;;;15893:56;15885:84;;;;-1:-1:-1;;;15885:84:0;;9388:2:1;15885:84:0;;;9370:21:1;9427:2;9407:18;;;9400:30;-1:-1:-1;;;9446:18:1;;;9439:45;9501:18;;15885:84:0;9360:165:1;15885:84:0;8519:10;1232:18;1285:22;;;:8;;:22;:8;:22;;:47;;-1:-1:-1;;1285:47:0;5154:15;1285:47;;;;;-1:-1:-1;1339:33:0;;:37;;;;1383:31;;:39;;1429:42;-1:-1:-1;;1429:42:0;;;;;;16047:5;;-1:-1:-1;;;;;16047:5:0;16040:21;8519:10;16076:15;;16040:52;;-1:-1:-1;;;;;;16040:52:0;;;;;;;-1:-1:-1;;;;;7346:32:1;;;16040:52:0;;;7328:51:1;7395:18;;;7388:34;7301:18;;16040:52:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;15834:266::o;13439:21::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;13439:21:0;;-1:-1:-1;13439:21:0;:::o;18094:172::-;9618:13;:11;:13::i;:::-;18186:1:::1;18175:8;:12;;;18167:41;;;;-1:-1:-1::0;;;18167:41:0::1;;;;;;;:::i;:::-;18252:6;18219:10;:30;18239:8;18230:18;;;;;;;;-1:-1:-1::0;;;18230:18:0::1;;;;;;;;;18219:30;;;;;;-1:-1:-1::0;;;18219:30:0::1;;;;;;;;;;;;;;;-1:-1:-1::0;;;18219:30:0::1;;;;;;;;;::::0;;::::1;::::0;::::1;::::0;;;;;;-1:-1:-1;18219:30:0;:39;-1:-1:-1;;18094:172:0:o;23821:85::-;9618:13;:11;:13::i;:::-;23882:5:::1;:16:::0;23821:85::o;16515:278::-;16564:17;8519:10;14785:22;14798:3;14803;14785:12;:22::i;:::-;14781:56;;14816:21;;-1:-1:-1;;;14816:21:0;;;;;;;;;;;14781:56;16608:14:::1;16625:19;16638:5;16625:12;:19::i;:::-;16608:36;;16674:7;9778::::0;9805:6;-1:-1:-1;;;;;9805:6:0;;9732:87;16674:7:::1;-1:-1:-1::0;;;;;16658:23:0::1;8519:10:::0;-1:-1:-1;;;;;16658:23:0::1;;16655:77;;8519:10:::0;-1:-1:-1;;;;;16691:22:0;::::1;;16683:49;;;::::0;-1:-1:-1;;;16683:49:0;;10139:2:1;16683:49:0::1;::::0;::::1;10121:21:1::0;10178:2;10158:18;;;10151:30;-1:-1:-1;;;10197:18:1;;;10190:44;10251:18;;16683:49:0::1;10111:164:1::0;16683:49:0::1;16753:32;16773:4;16779:5;16753:19;:32::i;:::-;14848:1;16515:278:::0;;;:::o;19336:202::-;19409:8;:6;:8::i;:::-;:17;15195:16;;19428:4;;19409:17;;15181:2;;15195:21;:203;;15355:3;15336:22;;:9;:16;:22;:50;;;;;15382:4;15362:24;;:9;:16;:24;;15336:50;15328:70;;;;-1:-1:-1;;;15328:70:0;;;;;;;:::i;:::-;15195:203;;;15259:3;15241:21;;:8;:15;:21;:48;;;;;15285:4;15266:23;;:8;:15;:23;;15241:48;15219:106;;;;-1:-1:-1;;;15219:106:0;;;;;;;:::i;:::-;19450:6:::1;19445:86;19464:4;:11;19460:1;:15;19445:86;;;19497:22;19511:4;19516:1;19511:7;;;;;;-1:-1:-1::0;;;19511:7:0::1;;;;;;;;;;;;;;;19497:13;:22::i;:::-;19477:3:::0;::::1;::::0;::::1;:::i;:::-;;;;19445:86;;;;19336:202:::0;;;;;:::o;16929:182::-;16984:18;17035:1;17023:9;:13;;;17015:43;;;;-1:-1:-1;;;17015:43:0;;12204:2:1;17015:43:0;;;12186:21:1;12243:2;12223:18;;;12216:30;-1:-1:-1;;;12262:18:1;;;12255:47;12319:18;;17015:43:0;12176:167:1;17015:43:0;17076:9;:27;17092:9;17086:16;;;;;;;;-1:-1:-1;;;17086:16:0;;;;;;;;;17076:27;;;;;;-1:-1:-1;;;17076:27:0;;;;;;;;;;;;;;;-1:-1:-1;;;17076:27:0;;;;;;;;;;;;;;;;;;;;17069:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;17069:34:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;17069:34:0;;;;;;;;;;;-1:-1:-1;;;17069:34:0;;;;;;;;;;;;;;;-1:-1:-1;;;17069:34:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16929:182;;;:::o;18531:530::-;18593:18;8519:10;14785:22;14798:3;14803;14785:12;:22::i;:::-;14781:56;;14816:21;;-1:-1:-1;;;14816:21:0;;;;;;;;;;;14781:56;18678:19:::1;:22:::0;;18638:11:::1;::::0;;18678:22:::1;::::0;::::1;:::i;:::-;::::0;;;-1:-1:-1;;18724:19:0::1;::::0;18814:207:::1;::::0;;::::1;::::0;::::1;::::0;;;18754:299:::1;::::0;18788:9:::1;::::0;18814:207;18852:37:::1;18875:5:::0;18724:19;18852:37;;;::::1;:::i;:::-;;;;;;;;;;;;;18842:48;;;;;;18814:207;;;;18918:1;-1:-1:-1::0;;;;;18814:207:0::1;;;;;18940:12;8519:10:::0;;8439:98;18940:12:::1;-1:-1:-1::0;;;;;18814:207:0::1;::::0;;18980:1:::1;18814:207;::::0;::::1;::::0;;;19001:5;18814:207:::1;::::0;::::1;;;;-1:-1:-1::0;;;18814:207:0::1;;;;;;;;;::::0;;19037:5;18754:19:::1;:299::i;:::-;14848:1;;18531:530:::0;;;:::o;21923:447::-;21989:18;8519:10;14785:22;14798:3;14803;14785:12;:22::i;:::-;14781:56;;14816:21;;-1:-1:-1;;;14816:21:0;;;;;;;;;;;14781:56;22039:5:::1;22046:7;22055:15;14314:369;;;;;;;;;;;;;-1:-1:-1::0;;;14314:369:0::1;;::::0;14429:4:::1;:11;;;;14420:5;:20;14417:46;;14449:14;;-1:-1:-1::0;;;14449:14:0::1;;;;;;;;;;;14417:46;14486:15;14477:5;:24;;;;;;-1:-1:-1::0;;;14477:24:0::1;;;;;;;;;;14474:117;;;14532:4;14537:5;14532:11;;;;;;-1:-1:-1::0;;;14532:11:0::1;;;;;;;;;;::::0;;;::::1;::::0;;;::::1;::::0;;::::1;;:22:::0;14521:33;::::1;14518:61;;14563:16;;-1:-1:-1::0;;;14563:16:0::1;;;;;;;;;;;14518:61;14643:5;14609:39;;;;;;-1:-1:-1::0;;;14609:39:0::1;;;;;;;;;:4;14614:5;14609:11;;;;;;-1:-1:-1::0;;;14609:11:0::1;;;;;;;;;;;;;;;;;;;:15;;14625:7;14609:24;;;;;;-1:-1:-1::0;;;14609:24:0::1;;;;;;;;;;;;;;;;;;;:30;;;;;;;;;;;;:39;;;;;;-1:-1:-1::0;;;14609:39:0::1;;;;;;;;;;14650:12;14601:62;;;;;-1:-1:-1::0;;;14601:62:0::1;;;;;;;;:::i;:::-;-1:-1:-1::0;8519:10:0;22116:28:::2;:42:::0;;;:28;::::2;:42:::0;;;;:55:::2;;::::0;::::2;::::0;::::2;;;22108:78;;;::::0;-1:-1:-1;;;22108:78:0;;10482:2:1;22108:78:0::2;::::0;::::2;10464:21:1::0;10521:2;10501:18;;;10494:30;-1:-1:-1;;;10540:18:1;;;10533:41;10591:18;;22108:78:0::2;10454:161:1::0;22108:78:0::2;22199:25;22227:61;22252:9;22263:7;22272:15;22227:24;:61::i;:::-;22199:89;;22299:61;22321:4;22327:5;22334:8;22344:15;22299:21;:61::i;:::-;14674:1;14848::::1;;;;21923:447:::0;;;;:::o;22909:856::-;22990:14;22969:8;22980:25;;;:9;:25;;;:32;;23095:7;;;;;:24;;;23113:6;23106:3;:13;;23095:24;23087:50;;;;-1:-1:-1;;;23087:50:0;;11183:2:1;23087:50:0;;;11165:21:1;11222:2;11202:18;;;11195:30;-1:-1:-1;;;11241:18:1;;;11234:43;11294:18;;23087:50:0;11155:163:1;23087:50:0;23152:6;23148:501;23168:6;23164:1;:10;23148:501;;;23196:19;23218:9;:13;23228:2;23218:13;;;;;;-1:-1:-1;;;23218:13:0;;;;;;;;;;;;;;;-1:-1:-1;;;23218:13:0;;;;;;;;;;;;;;;;;;;;23232:1;23218:16;;;;;;-1:-1:-1;;;23218:16:0;;;;;;;;;;;;;;;;;;23196:38;;;;;;;;23218:16;;;;;;;;23196:38;;;;;;;;-1:-1:-1;;;;;23196:38:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;23196:38:0;;;;;;;;;;;-1:-1:-1;;;23196:38:0;;;;;;;;;;;;;;;-1:-1:-1;;;23196:38:0;;;;;;;;;;;-1:-1:-1;23252:11:0;;;;23196:38;;-1:-1:-1;;;;;;23252:25:0;;23249:389;;23298:15;;;;:::i;:::-;23341:13;23332:23;;;;:8;:23;;23298:15;;-1:-1:-1;23332:23:0;;-1:-1:-1;8519:10:0;-1:-1:-1;;;;;23332:37:0;-1:-1:-1;;;;;23332:37:0;;;;;;;;;;;;:47;;23385:194;;;;;;;;23417:2;:8;;;23385:194;;;;23448:2;:12;;;-1:-1:-1;;;;;23385:194:0;;;;;23483:2;:12;;;-1:-1:-1;;;;;23385:194:0;;;;;23518:2;:11;;;-1:-1:-1;;;;;23385:194:0;;;;;23552:2;:8;;;23385:194;;;;;;-1:-1:-1;;;23385:194:0;;;;;;;;;;;23332:248;;;;;;;;-1:-1:-1;23332:248:0;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;23332:248:0;;;-1:-1:-1;;;;;23332:248:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;23332:248:0;;;-1:-1:-1;;;23332:248:0;;;;;;;;-1:-1:-1;;;23332:248:0;;;;;;;;;;;;;;;;23606:9;:13;23616:2;23606:13;;;;;;-1:-1:-1;;;23606:13:0;;;;;;;;;;;;;;;-1:-1:-1;;;23606:13:0;;;;;;;;;;;;;;;;;;;;23620:1;23606:16;;;;;;-1:-1:-1;;;23606:16:0;;;;;;;;;;;;;;;;;;;;;23599:23;;;;;;;;-1:-1:-1;;;;;;23599:23:0;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;23599:23:0;;;23249:389;-1:-1:-1;23176:3:0;;;;:::i;:::-;;;;23148:501;;;;23659:13;23683:12;23675:5;;:20;;;;:::i;:::-;23659:36;;23727:8;23714:9;:21;;23706:40;;;;-1:-1:-1;;;23706:40:0;;11870:2:1;23706:40:0;;;11852:21:1;11909:1;11889:18;;;11882:29;-1:-1:-1;;;11927:18:1;;;11920:36;11973:18;;23706:40:0;11842:155:1;17740:175:0;9618:13;:11;:13::i;:::-;17826:8:::1;14959:1;14953:3;:7;;;14945:36;;;;-1:-1:-1::0;;;14945:36:0::1;;;;;;;:::i;:::-;17846:61:::2;17866:8;17876:3;17881:5;17897:8;17888:18;;;;;;;;-1:-1:-1::0;;;17888:18:0::2;;;;;;;;16220:167:::0;16267:17;8519:10;14785:22;14798:3;14803;14785:12;:22::i;:::-;14781:56;;14816:21;;-1:-1:-1;;;14816:21:0;;;;;;;;;;;14781:56;16311:44:::1;16336:4;8519:10:::0;16311:24:::1;:44::i;:::-;-1:-1:-1::0;16366:10:0::1;:13:::0;;;:10:::1;:13;::::0;::::1;:::i;:::-;;;;;;16220:167:::0;;:::o;23980:103::-;9618:13;:11;:13::i;:::-;24048:15:::1;:27:::0;23980:103::o;10638:201::-;9618:13;:11;:13::i;:::-;-1:-1:-1;;;;;10727:22:0;::::1;10719:73;;;::::0;-1:-1:-1;;;10719:73:0;;9732:2:1;10719:73:0::1;::::0;::::1;9714:21:1::0;9771:2;9751:18;;;9744:30;9810:34;9790:18;;;9783:62;-1:-1:-1;;;9861:18:1;;;9854:36;9907:19;;10719:73:0::1;9704:228:1::0;10719:73:0::1;10803:28;10822:8;10803:18;:28::i;19069:216::-:0;-1:-1:-1;;;;;;;;;;;;;;;;;;;;19165:13:0;;-1:-1:-1;19165:13:0;;;;;;19217:15;;;;;;;;;-1:-1:-1;;;19217:15:0;;;;;;;;;;;;;;;;;;;-1:-1:-1;19251:26:0;;;;;;;;;;;;;;;;-1:-1:-1;19251:26:0;19069:216;-1:-1:-1;19069:216:0:o;20248:640::-;20311:17;8519:10;14785:22;14798:3;14803;14785:12;:22::i;:::-;14781:56;;14816:21;;-1:-1:-1;;;14816:21:0;;;;;;;;;;;14781:56;20360:5:::1;20367:7;20376:15;14314:369;;;;;;;;;;;;;-1:-1:-1::0;;;14314:369:0::1;;::::0;14429:4:::1;:11;;;;14420:5;:20;14417:46;;14449:14;;-1:-1:-1::0;;;14449:14:0::1;;;;;;;;;;;14417:46;14486:15;14477:5;:24;;;;;;-1:-1:-1::0;;;14477:24:0::1;;;;;;;;;;14474:117;;;14532:4;14537:5;14532:11;;;;;;-1:-1:-1::0;;;14532:11:0::1;;;;;;;;;;::::0;;;::::1;::::0;;;::::1;::::0;;::::1;;:22:::0;14521:33;::::1;14518:61;;14563:16;;-1:-1:-1::0;;;14563:16:0::1;;;;;;;;;;;14518:61;14643:5;14609:39;;;;;;-1:-1:-1::0;;;14609:39:0::1;;;;;;;;;:4;14614:5;14609:11;;;;;;-1:-1:-1::0;;;14609:11:0::1;;;;;;;;;;;;;;;;;;;:15;;14625:7;14609:24;;;;;;-1:-1:-1::0;;;14609:24:0::1;;;;;;;;;;;;;;;;;;;:30;;;;;;;;;;;;:39;;;;;;-1:-1:-1::0;;;14609:39:0::1;;;;;;;;;;14650:12;14601:62;;;;;-1:-1:-1::0;;;14601:62:0::1;;;;;;;;:::i;:::-;;20429:25:::2;20457:44;20480:4;20486:5;20493:7;20457:22;:44::i;:::-;20429:72;;20512:56;20532:9;20543:8;20553:14;20512:19;:56::i;:::-;20593:15;::::0;20579:11:::2;::::0;;20667:32:::2;20683:7;20593:15:::0;20667::::2;:32::i;:::-;20717:5;::::0;20732:18:::2;::::0;::::2;::::0;20710:52:::2;::::0;-1:-1:-1;;;20710:52:0;;-1:-1:-1;;;;;7346:32:1;;;20710:52:0::2;::::0;::::2;7328:51:1::0;7395:18;;;7388:34;;;20621:78:0;;-1:-1:-1;20621:78:0;;-1:-1:-1;20621:78:0;;-1:-1:-1;20717:5:0::2;::::0;20710:21:::2;::::0;7301:18:1;;20710:52:0::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;20780:5:0::2;::::0;20795:18:::2;::::0;;::::2;::::0;20773:52;;-1:-1:-1;;;20773:52:0;;-1:-1:-1;;;;;7346:32:1;;;20773:52:0::2;::::0;::::2;7328:51:1::0;7395:18;;;7388:34;;;20780:5:0;::::2;::::0;20773:21:::2;::::0;7301:18:1;;20773:52:0::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;20843:5:0::2;::::0;20836:42:::2;::::0;-1:-1:-1;;;20836:42:0;;20866:4:::2;20836:42;::::0;::::2;7328:51:1::0;7395:18;;;7388:34;;;-1:-1:-1;;;;;20843:5:0;;::::2;::::0;20836:21:::2;::::0;7301:18:1;;20836:42:0::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;14674:1;;;;;14848::::1;;;;20248:640:::0;;;;:::o;9897:132::-;9778:7;9805:6;-1:-1:-1;;;;;9805:6:0;8519:10;9961:23;9953:68;;;;-1:-1:-1;;;9953:68:0;;10822:2:1;9953:68:0;;;10804:21:1;;;10841:18;;;10834:30;10900:34;10880:18;;;10873:62;10952:18;;9953:68:0;10794:182:1;3181:443:0;3336:15;3354:31;3370:4;3376:3;3381;3354:15;:31::i;:::-;3336:49;;3395:5;3392:227;;;3414:10;3411:47;;;3433:25;;-1:-1:-1;;;3433:25:0;;;;;;;;;;;3411:47;3493:4;3467;:9;3472:3;3467:9;;;;;;-1:-1:-1;;;3467:9:0;;;;;;;;;;;;;;;-1:-1:-1;;;3467:9:0;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3467:9:0;;;-1:-1:-1;;;;;3467:14:0;;;;;;;;;:23;;:30;;-1:-1:-1;;3467:30:0;;;;;;;;;;3392:227;;;3524:10;3520:51;;3543:28;;-1:-1:-1;;;3543:28:0;;;;;;;;;;;3520:51;3606:5;3580:4;:9;3585:3;3580:9;;;;;;-1:-1:-1;;;3580:9:0;;;;;;;;;;;;;;;-1:-1:-1;;;3580:9:0;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3580:9:0;;;-1:-1:-1;;;;;3580:14:0;;;;;;;;;:23;;:31;;;;;-1:-1:-1;;3580:31:0;;;;;;;;;3181:443;;;;;:::o;10999:191::-;11073:16;11092:6;;-1:-1:-1;;;;;11109:17:0;;;-1:-1:-1;;;;;;11109:17:0;;;;;;11142:40;;11092:6;;;;;;;11142:40;;11073:16;11142:40;10999:191;;:::o;19710:130::-;19781:4;19805:8;:13;19814:3;19805:13;;;;;;-1:-1:-1;;;19805:13:0;;;;;;;;;;;;;;;-1:-1:-1;;;19805:13:0;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;19805:13:0;;;-1:-1:-1;;;;;19805:18:0;;;;;;;;;:27;;;;;;-1:-1:-1;19710:130:0;;;;:::o;17163:108::-;17219:7;17246:4;17251:5;17246:11;;;;;;-1:-1:-1;;;17246:11:0;;;;;;;;;;;;;;;;;:17;:11;;;;;:17;;-1:-1:-1;;;;;17246:17:0;;17163:108;-1:-1:-1;;17163:108:0:o;4344:409::-;4469:11;;4423:8;;;;4469:4;4487:5;4482:11;;;;;-1:-1:-1;;;4482:11:0;;;;;;;;;;;;;;;;;;;4422:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4422:72:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4422:72:0;;;;;;;;;;;-1:-1:-1;;;4422:72:0;;;;;;;;;;;;;;;-1:-1:-1;;;4422:72:0;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4422:72:0;;;-1:-1:-1;4422:72:0;;;;;;-1:-1:-1;;;;;4422:72:0;;;;;;4504:12;;:19;4422:72;;-1:-1:-1;4422:72:0;-1:-1:-1;4501:53:0;;4537:17;;-1:-1:-1;;;4537:17:0;;;;;;;;;;;4501:53;4565:6;4561:161;4581:3;4577:1;:7;4561:161;;;4627:21;4603:12;;:15;;4616:1;;4603:15;;;;-1:-1:-1;;;4603:15:0;;;;;;;;;;;;;;;:21;;;:45;;;;;;-1:-1:-1;;;4603:45:0;;;;;;;;;;4600:115;;;4668:37;;-1:-1:-1;;;4668:37:0;;;;;;;;;;;4600:115;4586:3;;;;:::i;:::-;;;;4561:161;;;;4736:4;4741:5;4736:11;;;;;;-1:-1:-1;;;4736:11:0;;;;;;;;;;;;;;;;;;;;;;4729:18;4736:11;;4729:18;:::i;:::-;-1:-1:-1;4729:18:0;;;;-1:-1:-1;;;;;;4729:18:0;;;-1:-1:-1;;;;4344:409:0:o;1599:344::-;1765:4;:11;1770:5;1765:11;;;;;;-1:-1:-1;;;1765:11:0;;;;;;;;;;;;;;;-1:-1:-1;;;1765:11:0;;;;;;;;;;;;;;;;;;;;1782:148;;;;;;;;1809:7;:13;;;1782:148;;;;1833:7;:17;;;-1:-1:-1;;;;;1782:148:0;;;;;1861:7;:17;;;-1:-1:-1;;;;;1782:148:0;;;;;1889:7;:16;;;-1:-1:-1;;;;;1782:148:0;;;;;1916:5;1782:148;;;;;;-1:-1:-1;;;1782:148:0;;;;;;;;;;;1765:172;;;;;;;;-1:-1:-1;1765:172:0;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1765:172:0;;;-1:-1:-1;;;;;1765:172:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1765:172:0;;;-1:-1:-1;;;1765:172:0;;;;;;;;-1:-1:-1;;;1765:172:0;;;;;;;;;;;;;;;;1599:344;;;:::o;2377:240::-;2509:30;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2509:30:0;2557:4;:11;2562:5;2557:11;;;;;;-1:-1:-1;;;2557:11:0;;;;;;;;;;;;;;;-1:-1:-1;;;2557:11:0;;;;;;;;;;;;;;;;;;;;2569:7;2557:20;;;;;;-1:-1:-1;;;2557:20:0;;;;;;;;;;;;;;;;;;2548:29;;;;;;;;2557:20;;;;;;;;2548:29;;;;;;;;-1:-1:-1;;;;;2548:29:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2548:29:0;;;;;;;;;;;-1:-1:-1;;;2548:29:0;;;;;;;;;;;;;;;-1:-1:-1;;;2548:29:0;;;;;;;;;;;-1:-1:-1;2548:29:0;-1:-1:-1;2591:4:0;:11;2596:5;2591:11;;;;;;-1:-1:-1;;;2591:11:0;;;;;;;;;;;;;;;-1:-1:-1;;;2591:11:0;;;;;;;;;;;;;;;;;;;;2603:7;2591:20;;;;;;-1:-1:-1;;;2591:20:0;;;;;;;;;;;;;;;;;;;;;2584:27;;;;;;;;-1:-1:-1;;;;;;2584:27:0;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2584:27:0;;;2377:240;;-1:-1:-1;;;2377:240:0:o;1979:303::-;2112:4;2117:5;2112:11;;;;;;-1:-1:-1;;;2112:11:0;;;;;;;;;;;;;;;;;;;:15;;2133:136;;;;;;;;2158:7;:13;;;2133:136;;;;2180:7;:17;;;-1:-1:-1;;;;;2133:136:0;;;;;2206:7;:17;;;-1:-1:-1;;;;;2133:136:0;;;;;2232:7;:16;;;-1:-1:-1;;;;;2133:136:0;;;;;2257:5;2133:136;;;;;;-1:-1:-1;;;2133:136:0;;;;;;;;;;;2112:164;;;;;;;;-1:-1:-1;2112:164:0;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2112:164:0;;;-1:-1:-1;;;;;2112:164:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2112:164:0;;;-1:-1:-1;;;2112:164:0;;;;;;;;-1:-1:-1;;;2112:164:0;;;;;;;;;;;;;;;;1979:303;;;;:::o;3982:181::-;4096:11;;4114;;;;;;4069:10;4114:11;;;4152:5;;4096:4;;:11;;4132;;;;-1:-1:-1;;;4132:11:0;;;;;;;;;;;;;;;;;;;:17;;;:25;;;;;-1:-1:-1;;;;;4132:25:0;;;;;-1:-1:-1;;;;;4132:25:0;;;;;;3982:181;;;;:::o;2701:212::-;2797:30;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2797:30:0;2845:4;2850:5;2845:11;;;;;;-1:-1:-1;;;2845:11:0;;;;;;;;;;;;;;;;;;;:15;;2861:7;2845:24;;;;;;-1:-1:-1;;;2845:24:0;;;;;;;;;;;;;;;;;;2836:33;;;;;;;;2845:24;;;;;;;;2836:33;;;;;;;;-1:-1:-1;;;;;2836:33:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2836:33:0;;;;;;;;;;;-1:-1:-1;;;2836:33:0;;;;;;;;;;;;;;;-1:-1:-1;;;2836:33:0;;;;;;;;;;;;;;;2883:4;2888:5;2883:11;;;;;;-1:-1:-1;;;2883:11:0;;;;;;;;;;;;;;;;;;;:15;;2899:7;2883:24;;;;;;-1:-1:-1;;;2883:24:0;;;;;;;;4759:327;4853:14;4916:28;;;;;;;;;;;4853:14;;;;4957:3;;4916:37;;4947:6;;4916:28;;:37;:::i;:::-;4915:45;;;;:::i;:::-;4985:22;4980:28;;;;;;;;;;;;4903:57;;-1:-1:-1;5021:3:0;;4980:37;;5011:6;;4980:28;;:37;:::i;:::-;4979:45;;;;:::i;:::-;5044:17;5039:23;;;;;;;;;;;;4967:57;;-1:-1:-1;5075:3:0;;5039:32;;5065:6;;5039:23;;:32;:::i;:::-;5038:40;;;;:::i;:::-;5031:47;;4759:327;;;;;:::o;3630:203::-;3784:4;3804;:9;3809:3;3804:9;;;;;;-1:-1:-1;;;3804:9:0;;;;;;;;;;;;;;;-1:-1:-1;;;3804:9:0;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3804:9:0;;;-1:-1:-1;;;;;3804:14:0;;;;;;;;;:23;;;;;;-1:-1:-1;3630:203:0;;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:173:1:-;82:20;;-1:-1:-1;;;;;131:31:1;;121:42;;111:2;;177:1;174;167:12;111:2;63:124;;;:::o;192:551::-;235:5;288:3;281:4;273:6;269:17;265:27;255:2;;310:5;303;296:20;255:2;350:6;337:20;376:18;372:2;369:26;366:2;;;398:18;;:::i;:::-;442:55;485:2;466:13;;-1:-1:-1;;462:27:1;491:4;458:38;442:55;:::i;:::-;522:2;513:7;506:19;568:3;561:4;556:2;548:6;544:15;540:26;537:35;534:2;;;589:5;582;575:20;534:2;658;651:4;643:6;639:17;632:4;623:7;619:18;606:55;681:16;;;699:4;677:27;670:42;;;;685:7;245:498;-1:-1:-1;;245:498:1:o;748:156::-;814:20;;874:4;863:16;;853:27;;843:2;;894:1;891;884:12;909:196;968:6;1021:2;1009:9;1000:7;996:23;992:32;989:2;;;1042:6;1034;1027:22;989:2;1070:29;1089:9;1070:29;:::i;:::-;1060:39;979:126;-1:-1:-1;;;979:126:1:o;1110:266::-;1176:6;1184;1237:2;1225:9;1216:7;1212:23;1208:32;1205:2;;;1258:6;1250;1243:22;1205:2;1286:29;1305:9;1286:29;:::i;:::-;1276:39;;1334:36;1366:2;1355:9;1351:18;1334:36;:::i;:::-;1324:46;;1195:181;;;;;:::o;1381:1128::-;1475:6;1506:2;1549;1537:9;1528:7;1524:23;1520:32;1517:2;;;1570:6;1562;1555:22;1517:2;1615:9;1602:23;1644:18;1685:2;1677:6;1674:14;1671:2;;;1706:6;1698;1691:22;1671:2;1749:6;1738:9;1734:22;1724:32;;1794:7;1787:4;1783:2;1779:13;1775:27;1765:2;;1821:6;1813;1806:22;1765:2;1862;1849:16;1885:59;1901:42;1940:2;1901:42;:::i;:::-;1885:59;:::i;:::-;1966:3;1990:2;1985:3;1978:15;2018:2;2013:3;2009:12;2002:19;;2049:2;2045;2041:11;2097:7;2092:2;2086;2083:1;2079:10;2075:2;2071:19;2067:28;2064:41;2061:2;;;2123:6;2115;2108:22;2061:2;2150:6;2165:314;2179:2;2176:1;2173:9;2165:314;;;2256:3;2243:17;2292:2;2279:11;2276:19;2273:2;;;2313:6;2305;2298:22;2273:2;2347:57;2396:7;2391:2;2377:11;2373:2;2369:20;2365:29;2347:57;:::i;:::-;2335:70;;-1:-1:-1;2425:12:1;;;;2457;;;;2197:1;2190:9;2165:314;;;-1:-1:-1;2498:5:1;;1486:1023;-1:-1:-1;;;;;;;;;1486:1023:1:o;2514:297::-;2581:6;2634:2;2622:9;2613:7;2609:23;2605:32;2602:2;;;2655:6;2647;2640:22;2602:2;2692:9;2686:16;2745:5;2738:13;2731:21;2724:5;2721:32;2711:2;;2772:6;2764;2757:22;2816:287;2886:6;2939:2;2927:9;2918:7;2914:23;2910:32;2907:2;;;2960:6;2952;2945:22;2907:2;3004:9;2991:23;3043:1;3036:5;3033:12;3023:2;;3064:6;3056;3049:22;3108:284;3175:6;3228:2;3216:9;3207:7;3203:23;3199:32;3196:2;;;3249:6;3241;3234:22;3196:2;3293:9;3280:23;3332:1;3325:5;3322:12;3312:2;;3353:6;3345;3338:22;3397:342;3466:6;3519:2;3507:9;3498:7;3494:23;3490:32;3487:2;;;3540:6;3532;3525:22;3487:2;3585:9;3572:23;3618:18;3610:6;3607:30;3604:2;;;3655:6;3647;3640:22;3604:2;3683:50;3725:7;3716:6;3705:9;3701:22;3683:50;:::i;:::-;3673:60;3477:262;-1:-1:-1;;;;3477:262:1:o;3744:190::-;3803:6;3856:2;3844:9;3835:7;3831:23;3827:32;3824:2;;;3877:6;3869;3862:22;3824:2;-1:-1:-1;3905:23:1;;3814:120;-1:-1:-1;3814:120:1:o;3939:194::-;4009:6;4062:2;4050:9;4041:7;4037:23;4033:32;4030:2;;;4083:6;4075;4068:22;4030:2;-1:-1:-1;4111:16:1;;4020:113;-1:-1:-1;4020:113:1:o;4138:1014::-;4231:6;4239;4292:2;4280:9;4271:7;4267:23;4263:32;4260:2;;;4313:6;4305;4298:22;4260:2;4354:9;4341:23;4331:33;;4383:2;4436;4425:9;4421:18;4408:32;4463:18;4455:6;4452:30;4449:2;;;4500:6;4492;4485:22;4449:2;4528:22;;4581:4;4573:13;;4569:27;-1:-1:-1;4559:2:1;;4615:6;4607;4600:22;4559:2;4656;4643:16;4679:59;4695:42;4734:2;4695:42;:::i;4679:59::-;4760:3;4784:2;4779:3;4772:15;4812:2;4807:3;4803:12;4796:19;;4843:2;4839;4835:11;4891:7;4886:2;4880;4877:1;4873:10;4869:2;4865:19;4861:28;4858:41;4855:2;;;4917:6;4909;4902:22;4855:2;4944:6;4935:15;;4959:163;4973:2;4970:1;4967:9;4959:163;;;5030:17;;5018:30;;4991:1;4984:9;;;;;5068:12;;;;5100;;4959:163;;;4963:3;5141:5;5131:15;;;;;;;4250:902;;;;;:::o;5157:258::-;5225:6;5233;5286:2;5274:9;5265:7;5261:23;5257:32;5254:2;;;5307:6;5299;5292:22;5254:2;-1:-1:-1;;5335:23:1;;;5405:2;5390:18;;;5377:32;;-1:-1:-1;5244:171:1:o;5420:192::-;5477:6;5530:2;5518:9;5509:7;5505:23;5501:32;5498:2;;;5551:6;5543;5536:22;5498:2;5579:27;5596:9;5579:27;:::i;5617:260::-;5683:6;5691;5744:2;5732:9;5723:7;5719:23;5715:32;5712:2;;;5765:6;5757;5750:22;5712:2;5793:27;5810:9;5793:27;:::i;:::-;5783:37;5867:2;5852:18;;;;5839:32;;-1:-1:-1;;;5702:175:1:o;5882:370::-;6039:3;6077:6;6071:13;6093:53;6139:6;6134:3;6127:4;6119:6;6115:17;6093:53;:::i;:::-;6168:16;;;;6193:21;;;-1:-1:-1;6241:4:1;6230:16;;6047:205;-1:-1:-1;6047:205:1:o;7433:1360::-;7654:2;7706:21;;;7776:13;;7679:18;;;7798:22;;;7625:4;;7654:2;7839;;7857:18;;;;7898:15;;;7625:4;7944:823;7958:6;7955:1;7952:13;7944:823;;;8017:13;;8055:9;;8043:22;;8104:11;;;8098:18;-1:-1:-1;;;;;8192:21:1;;;8178:12;;;8171:43;8258:11;;;8252:18;8248:27;;8234:12;;;8227:49;8299:4;8347:11;;;8341:18;8337:27;;;8323:12;;;8316:49;8388:4;8433:11;;;8427:18;;8487:1;8468:21;;8458:2;;-1:-1:-1;;;8521:34:1;;8582:4;8579:1;8572:15;8617:4;8528;8604:18;8458:2;8656:12;;8649:36;8714:4;8705:14;;;;8742:15;;;;7980:1;7973:9;7944:823;;;-1:-1:-1;8784:3:1;;7634:1159;-1:-1:-1;;;;;;;7634:1159:1:o;8798:383::-;8947:2;8936:9;8929:21;8910:4;8979:6;8973:13;9022:6;9017:2;9006:9;9002:18;8995:34;9038:66;9097:6;9092:2;9081:9;9077:18;9072:2;9064:6;9060:15;9038:66;:::i;:::-;9165:2;9144:15;-1:-1:-1;;9140:29:1;9125:45;;;;9172:2;9121:54;;8919:262;-1:-1:-1;;8919:262:1:o;11323:340::-;11525:2;11507:21;;;11564:2;11544:18;;;11537:30;-1:-1:-1;;;11598:2:1;11583:18;;11576:46;11654:2;11639:18;;11497:166::o;12348:330::-;12550:2;12532:21;;;12589:1;12569:18;;;12562:29;-1:-1:-1;;;12622:2:1;12607:18;;12600:37;12669:2;12654:18;;12522:156::o;13054:275::-;13125:2;13119:9;13190:2;13171:13;;-1:-1:-1;;13167:27:1;13155:40;;13225:18;13210:34;;13246:22;;;13207:62;13204:2;;;13272:18;;:::i;:::-;13308:2;13301:22;13099:230;;-1:-1:-1;13099:230:1:o;13334:182::-;13393:4;13426:18;13418:6;13415:30;13412:2;;;13448:18;;:::i;:::-;-1:-1:-1;13493:1:1;13489:14;13505:4;13485:25;;13402:114::o;13521:217::-;13561:1;13587;13577:2;;-1:-1:-1;;;13612:31:1;;13666:4;13663:1;13656:15;13694:4;13619:1;13684:15;13577:2;-1:-1:-1;13723:9:1;;13567:171::o;13743:168::-;13783:7;13849:1;13845;13841:6;13837:14;13834:1;13831:21;13826:1;13819:9;13812:17;13808:45;13805:2;;;13856:18;;:::i;:::-;-1:-1:-1;13896:9:1;;13795:116::o;13916:258::-;13988:1;13998:113;14012:6;14009:1;14006:13;13998:113;;;14088:11;;;14082:18;14069:11;;;14062:39;14034:2;14027:10;13998:113;;;14129:6;14126:1;14123:13;14120:2;;;-1:-1:-1;;14164:1:1;14146:16;;14139:27;13969:205::o;14179:135::-;14218:3;-1:-1:-1;;14239:17:1;;14236:2;;;14259:18;;:::i;:::-;-1:-1:-1;14306:1:1;14295:13;;14226:88::o;14319:127::-;14380:10;14375:3;14371:20;14368:1;14361:31;14411:4;14408:1;14401:15;14435:4;14432:1;14425:15;14451:127;14512:10;14507:3;14503:20;14500:1;14493:31;14543:4;14540:1;14533:15;14567:4;14564:1;14557:15"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "2367200",
                "executionCost": "infinite",
                "totalCost": "infinite"
              },
              "external": {
                "addNewBin()": "64084",
                "binCounter()": "1075",
                "bins(uint256)": "2079",
                "blacklistUser(address,uint8)": "infinite",
                "buyRecycled(uint256)": "infinite",
                "collectMultipleWaste(uint256,uint256[])": "infinite",
                "collectWaste(uint256,uint256)": "infinite",
                "collectorReward()": "1030",
                "formula(uint8)": "1270",
                "garbages(uint8)": "infinite",
                "generateMultipleWaste(string[])": "infinite",
                "generateWaste(string)": "infinite",
                "newSignUpReward()": "1050",
                "owner()": "1120",
                "price()": "1074",
                "recycleMultiple(uint256,uint256[])": "infinite",
                "removeBin(uint256)": "infinite",
                "renounceOwnership()": "infinite",
                "setCollectorUpReward(uint256)": "21156",
                "setFee(uint8,uint256)": "21449",
                "setPrice(uint256)": "21199",
                "setSignUpReward(uint256)": "21199",
                "signUpAsWasteCollector()": "infinite",
                "signUpFees(uint8)": "1202",
                "token()": "1125",
                "totalWasteGenerated()": "1094",
                "transferOwnership(address)": "23677",
                "whitelistuser(address,uint8)": "infinite",
                "withdraw()": "infinite"
              },
              "internal": {
                "_empty()": "infinite",
                "_getApproval(enum Common.Category,address)": "1080",
                "_getBinOwner(uint256)": "1752",
                "recycle(uint256,uint256)": "infinite"
              }
            },
            "methodIdentifiers": {
              "addNewBin()": "ea77351f",
              "binCounter()": "1f2a4a3f",
              "bins(uint256)": "885c7b38",
              "blacklistUser(address,uint8)": "e47c294d",
              "buyRecycled(uint256)": "c437a2f0",
              "collectMultipleWaste(uint256,uint256[])": "41311bc3",
              "collectWaste(uint256,uint256)": "c3864cce",
              "collectorReward()": "235eb9f5",
              "formula(uint8)": "c2f0c279",
              "garbages(uint8)": "a741c0df",
              "generateMultipleWaste(string[])": "955ef11a",
              "generateWaste(string)": "b7588280",
              "newSignUpReward()": "f9404506",
              "owner()": "8da5cb5b",
              "price()": "a035b1fe",
              "recycleMultiple(uint256,uint256[])": "0bdd7063",
              "removeBin(uint256)": "93051d95",
              "renounceOwnership()": "715018a6",
              "setCollectorUpReward(uint256)": "72938a14",
              "setFee(uint8,uint256)": "8c6aa3f5",
              "setPrice(uint256)": "91b7f5ed",
              "setSignUpReward(uint256)": "f2d03e15",
              "signUpAsWasteCollector()": "84b038df",
              "signUpFees(uint8)": "0095db2d",
              "token()": "fc0c546a",
              "totalWasteGenerated()": "ffc2105c",
              "transferOwnership(address)": "f2fde38b",
              "whitelistuser(address,uint8)": "31b59ed7",
              "withdraw()": "3ccfd60b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CannotDeleteBinInEngagedMode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyBin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBinID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWasteId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxWasteTransportExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserAlreadyExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserAlreadyNotExist\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addNewBin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"binCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"blacklistUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"}],\"name\":\"buyRecycled\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"binId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"wasteIds\",\"type\":\"uint256[]\"}],\"name\":\"collectMultipleWaste\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"binId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wasteId\",\"type\":\"uint256\"}],\"name\":\"collectWaste\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectorReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Common.Share\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"formula\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_category\",\"type\":\"uint8\"}],\"name\":\"garbages\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"generator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recycler\",\"type\":\"address\"},{\"internalType\":\"enum Common.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct Common.WasteData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"data\",\"type\":\"string[]\"}],\"name\":\"generateMultipleWaste\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"generateWaste\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newSignUpReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"binId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"wasteIds\",\"type\":\"uint256[]\"}],\"name\":\"recycleMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"binId\",\"type\":\"uint256\"}],\"name\":\"removeBin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReward\",\"type\":\"uint256\"}],\"name\":\"setCollectorUpReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReward\",\"type\":\"uint256\"}],\"name\":\"setSignUpReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signUpAsWasteCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Common.Category\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"signUpFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWasteGenerated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"whitelistuser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Bobeu: https://github.com/bobeu A smart contract that will tokenize the disposal and collection of waste.  Users get a token when they dispose of their waste in a waste bin, collectors  get token for collecting waste and taking them to the waste recyclers  The process of tokenization happens when the waste drops in the waste bin. Every waste bin has a unique wallet ID which will receive the token at the end of evacuation. The owners of the waste bin will have a DAO.  Wallet  Token (iBoola token) which would be paired against either Avalanche, Celo or Polygon  New users get 10 $IBT after sign up  Community of waste bins will have a DAO  Waste generators get 10% collectors get 65 while the iBoola team gets 25%  Decimals: use standard 18 decimals  Mintable: not mintable Ownership privilege :  30% locked for 5 years, 20% for dev team 45% for  initial circulation,  5% for presale  PSEUDO ====== Parties: o Waste generators. o Collectors. o Recyclers. o When waste is disposed or evacuated, then reward collectors. o Each waste bin has a unique identifer and an owner. o On sign up, user gets 10 $IBT Token. o Waste collectors own a DAO. o Waste bin owners own a DAO. o Reward sharing formula Note - It is configurable. The owner account is able to  set each of these fields. - Waste generators 10%. - Collectors 65%. - Team 25%.\",\"kind\":\"dev\",\"methods\":{\"addNewBin()\":{\"details\":\"Adds new bin.\"},\"blacklistUser(address,uint8)\":{\"details\":\"Blacklist user Note Admin privilege. cat should reference the Category enum.\"},\"collectWaste(uint256,uint256)\":{\"details\":\"Collect waste for disposal.  Note: Caller must be an approved waste collector. must supply the following:\",\"params\":{\"binId\":\"- Location of bin to deposit collected waste. ie bin index\",\"wasteId\":\"- Identifier for waste collected.\"}},\"garbages(uint8)\":{\"details\":\"Returns list of wastes under each 'State' i.e Generated waste data, Collected waste data, ...rest\"},\"generateMultipleWaste(string[])\":{\"details\":\"Generates multiple waste data\"},\"generateWaste(string)\":{\"details\":\"Generates new waste. \"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeBin(uint256)\":{\"details\":\"Removes bin at binId.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCollectorUpReward(uint256)\":{\"details\":\"Sets new sign up reward. Note With access modifier\"},\"setFee(uint8,uint256)\":{\"details\":\"Set new fee\"},\"setPrice(uint256)\":{\"details\":\"Sets new price for recycled waste.\"},\"setSignUpReward(uint256)\":{\"details\":\"Sets new sign up reward. Note With access modifier\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"whitelistuser(address,uint8)\":{\"details\":\"Whitelist user Note Admin privilege. cat should reference the Category enum.\"}},\"stateVariables\":{\"_garbages\":{\"details\":\"Mapping of Generated and Recycled Waste State -> binId (binCounter) -> WasteData Keys type:  o State o uint256 value: array of struct(s) \"},\"binCounter\":{\"details\":\"Total bin registered to date\"},\"bins\":{\"details\":\"Array of bins  { Contain bins which contain collected wastes which contains wastedata}\"},\"collectorReward\":{\"details\":\"Collector reward\"},\"newSignUpReward\":{\"details\":\"New sign up reward\"},\"price\":{\"details\":\"Price of recycled waste\"},\"profiles\":{\"details\":\"Mapping of Waste State -> user -> profile Keys type:  o State o address value: struct \"},\"signUpFees\":{\"details\":\"Sign up fees for different category.\"},\"token\":{\"details\":\"iBoola Token\"},\"totalWasteGenerated\":{\"details\":\"Total waste generated to date\"}},\"title\":\"Main\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addNewBin()\":{\"notice\":\"Caller must already be approves as BinOwner .\"},\"bins(uint256)\":{\"notice\":\"Bins in this list are owned by addresses.\"},\"buyRecycled(uint256)\":{\"notice\":\"Buy recycled waste in form of manure NOTE: Only recycled waste can be bought. If available manure cannot cover requested volume, buyer simply  purchased available volume.\"},\"generateWaste(string)\":{\"notice\":\"Each waste is unique to another. Note To successfully generate waste, bin id must be provided. This represents the destination where wastes are dumped.\"},\"recycleMultiple(uint256,uint256[])\":{\"notice\":\"Can recycle wastes greater than 0 but less than 51\"},\"removeBin(uint256)\":{\"notice\":\"Caller must already be approves as BinOwner .\"},\"setFee(uint8,uint256)\":{\"notice\":\"To perfectly select the right category, category parameter should not be greater than 4.\"},\"signUpAsWasteCollector()\":{\"notice\":\"Sign up function.  o Caller must not already be a member. \"},\"signUpFees(uint8)\":{\"notice\":\"- It can be configured to suit any category.\"},\"withdraw()\":{\"notice\":\"Withdraw reward if any {IBoola Token} Note - Caller must have previous reward otherwise it fails.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verify/IBoolaContractV.sol\":\"IBoolaContractV\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verify/IBoolaContractV.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ninterface Common {\\r\\n  enum State { GENERATED, COLLECTED, RECYCLED }\\r\\n  enum Category { COLLECTOR, GENERATOR, RECYCLER, BINOWNER, SOLD }\\r\\n  enum Share { COLLECTOR, GENERATOR, TEAM }\\r\\n\\r\\n  error UserAlreadyExist();\\r\\n  error UserAlreadyNotExist();\\r\\n  error InvalidBinID();\\r\\n  error EmptyBin();\\r\\n  error CannotDeleteBinInEngagedMode();\\r\\n  error InvalidWasteId();\\r\\n  error NothingToWithdraw();\\r\\n  error MaxWasteTransportExceeded();\\r\\n\\r\\n  struct WasteData {\\r\\n    bytes32 value;\\r\\n    address collector;\\r\\n    address generator;\\r\\n    address recycler;\\r\\n    State state;\\r\\n  }\\r\\n\\r\\n  struct Profile {\\r\\n    uint32 transactionTime;\\r\\n    uint wasteCount;\\r\\n    bool approval;\\r\\n    bool isRegistered;\\r\\n    WasteData[] purchased;\\r\\n  }\\r\\n\\r\\n  struct BinData {\\r\\n    WasteData[] bin;\\r\\n    address owner;\\r\\n  }\\r\\n\\r\\n  struct Empty {\\r\\n    uint[] wasteIds;\\r\\n    string[] wastedata;\\r\\n  }\\r\\n\\r\\n}\\r\\n\\r\\nlibrary IBoolaLib {\\r\\n  /**\\r\\n    @dev Sign up new collector\\r\\n      @param self - Storage\\r\\n      @param newCollector - Address of new Collector to add.\\r\\n   */\\r\\n\\r\\n  function registerCollector(mapping (Common.Category=>mapping(address=>Common.Profile)) storage self, address newCollector) internal {\\r\\n    Common.Category _c = Common.Category.COLLECTOR;\\r\\n    self[_c][newCollector].transactionTime = _now();\\r\\n    self[_c][newCollector].wasteCount = 0;\\r\\n    self[_c][newCollector].approval = false;\\r\\n    self[_c][newCollector].isRegistered = true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Dual function: \\r\\n            o Recycles collected waste.\\r\\n            o Generate new waste.\\r\\n   */\\r\\n  function portToMap(\\r\\n    mapping (Common.State=>Common.WasteData[]) storage self, \\r\\n    Common.WasteData memory inWaste,\\r\\n    Common.State state\\r\\n  ) internal {\\r\\n    self[state].push(Common.WasteData(\\r\\n        inWaste.value,\\r\\n        inWaste.collector,\\r\\n        inWaste.generator,\\r\\n        inWaste.recycler,\\r\\n        state\\r\\n      )\\r\\n    );\\r\\n  }\\r\\n\\r\\n  ///@dev Moves waste to bin\\r\\n  function portToArray(Common.BinData[] storage self, uint binId, Common.WasteData memory inWaste, Common.State state) internal {\\r\\n    self[binId].bin.push(Common.WasteData(\\r\\n      inWaste.value,\\r\\n      inWaste.collector,\\r\\n      inWaste.generator,\\r\\n      inWaste.recycler,\\r\\n      state\\r\\n    )\\r\\n    );\\r\\n  }\\r\\n\\r\\n  ///@dev Removes waste at 'wasteId' from bin at 'binId' in bin array at hashmap 'self'\\r\\n  function popFromMapping(mapping (Common.State=>Common.WasteData[]) storage self, uint wasteId, Common.State state) internal returns(Common.WasteData memory _waste) {\\r\\n    _waste = self[state][wasteId];\\r\\n    delete self[state][wasteId];\\r\\n  }\\r\\n\\r\\n  ///@dev Removes waste at 'wasteId' from bin at 'binId' in bin array 'self'\\r\\n  function popFromArray(Common.BinData[] storage self, uint binId, uint wasteId) internal returns(Common.WasteData memory _waste) {\\r\\n    _waste = self[binId].bin[wasteId];\\r\\n    delete self[binId].bin[wasteId];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Sets collectors status to either true or false\\r\\n    @param value - Value to set status to.\\r\\n    @param who - User to set status for.\\r\\n    @param self - storage.\\r\\n      Note : If value is true, collector's status must be false vice versa.\\r\\n   */\\r\\n  function setStatus(mapping (Common.Category=>mapping(address=>Common.Profile)) storage self, address who, bool value, Common.Category cat) internal {\\r\\n    bool prevStatus = _previousStatus(self, who, cat);\\r\\n    if(value) {\\r\\n      if(prevStatus) revert Common.UserAlreadyExist();\\r\\n      self[cat][who].approval = true;\\r\\n    } else {\\r\\n      if(!prevStatus) revert Common.UserAlreadyNotExist();\\r\\n      self[cat][who].approval = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _previousStatus(mapping (Common.Category=>mapping(address=>Common.Profile)) storage self, address who, Common.Category cat) private view returns(bool) {\\r\\n    return self[cat][who].approval;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Registers new bin with owner.\\r\\n        @param owner - Bin Owner\\r\\n        @param self - Storage\\r\\n        @return newId \\r\\n   */\\r\\n  function registerNewBin(Common.BinData[] storage self, address owner) internal returns(uint newId) {\\r\\n    newId = self.length;\\r\\n    self.push();\\r\\n    self[newId].owner = owner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Removes bin from bin array.\\r\\n      @notice binId must be less than the bin array at any time since arrays are zero-based.\\r\\n      @param self - Storage\\r\\n   */\\r\\n  function removeBin(Common.BinData[] storage self, uint binId) internal {\\r\\n    (uint len, Common.BinData memory wasteBin)  = (self.length, self[binId]);\\r\\n    if(wasteBin.bin.length == 0) revert Common.EmptyBin();\\r\\n    for(uint i = 0; i < len; i++) {\\r\\n      if(wasteBin.bin[i].state < Common.State.RECYCLED) {\\r\\n        revert Common.CannotDeleteBinInEngagedMode();\\r\\n      }\\r\\n    } \\r\\n    delete self[binId];\\r\\n  }\\r\\n\\r\\n  function split(mapping (Common.Share=>uint8) storage self, uint amount) internal view returns(uint collector, uint generator, uint team) {\\r\\n    collector = (self[Common.Share.COLLECTOR] * amount) / 100;\\r\\n    generator = (self[Common.Share.GENERATOR] * amount) / 100;\\r\\n    team = (self[Common.Share.TEAM] * amount) / 100;\\r\\n\\r\\n  }\\r\\n\\r\\n  function _now() internal view returns(uint32) { return uint32(block.timestamp); }\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Main\\r\\n * @author Bobeu: https://github.com/bobeu\\r\\n * A smart contract that will tokenize the disposal and collection of waste. \\r\\n    Users get a token when they dispose of their waste in a waste bin, collectors \\r\\n    get token for collecting waste and taking them to the waste recyclers \\r\\n\\r\\n    The process of tokenization happens when the waste drops in the waste bin. Every\\r\\n    waste bin has a unique wallet ID which will receive the token at the end of evacuation.\\r\\n    The owners of the waste bin will have a DAO. \\r\\n\\r\\n    *Wallet \\r\\n    *Token (iBoola token) which would be paired against either Avalanche, Celo or Polygon \\r\\n    *New users get 10 $IBT after sign up \\r\\n    *Community of waste bins will have a DAO \\r\\n    Waste generators get 10% collectors get 65 while the iBoola team gets 25% \\r\\n    Decimals: use standard 18 decimals \\r\\n\\r\\n    Mintable: not mintable\\r\\n\\r\\n    Ownership privilege :  30% locked for 5 years, 20% for dev team 45% for  initial circulation, \\r\\n    5% for presale \\r\\n\\r\\n    PSEUDO\\r\\n    ======\\r\\n    Parties:\\r\\n        o Waste generators.\\r\\n        o Collectors.\\r\\n        o Recyclers.\\r\\n\\r\\n    o When waste is disposed or evacuated, then reward collectors.\\r\\n    o Each waste bin has a unique identifer and an owner.\\r\\n    o On sign up, user gets 10 $IBT Token.\\r\\n    o Waste collectors own a DAO.\\r\\n    o Waste bin owners own a DAO.\\r\\n    o Reward sharing formula Note - It is configurable. The owner account is able to \\r\\n        set each of these fields.\\r\\n        - Waste generators 10%.\\r\\n        - Collectors 65%.\\r\\n        - Team 25%.\\r\\n */\\r\\ncontract IBoolaContractV is Context, Common, Ownable {\\r\\n\\r\\n    ///@dev New sign up reward\\r\\n    uint public newSignUpReward;\\r\\n\\r\\n    ///@dev iBoola Token\\r\\n    address public token;\\r\\n\\r\\n    ///@dev Total waste generated to date\\r\\n    uint256 public totalWasteGenerated;\\r\\n\\r\\n    ///@dev Collector reward\\r\\n    uint public collectorReward;\\r\\n\\r\\n    ///@dev Total bin registered to date\\r\\n    uint public binCounter;\\r\\n\\r\\n    ///@dev Price of recycled waste\\r\\n    uint public price;\\r\\n\\r\\n    /**\\r\\n        @dev Array of bins \\r\\n            { Contain bins which contain collected wastes which contains wastedata}\\r\\n            @notice Bins in this list are owned by addresses.\\r\\n    */\\r\\n    BinData[] public bins;\\r\\n    \\r\\n    mapping (Share=>uint8) public formula;\\r\\n    \\r\\n\\r\\n    /**\\r\\n        @dev Mapping of Generated and Recycled Waste State -> binId (binCounter) -> WasteData\\r\\n        Keys type: \\r\\n            o State\\r\\n            o uint256\\r\\n\\r\\n        value:\\r\\n           array of struct(s) \\r\\n     */\\r\\n    mapping (State=>WasteData[]) private _garbages;\\r\\n    \\r\\n    /**\\r\\n        @dev Mapping of Waste State -> user -> profile\\r\\n        Keys type: \\r\\n            o State\\r\\n            o address\\r\\n\\r\\n        value:\\r\\n            struct \\r\\n     */\\r\\n    mapping (Category=>mapping(address=>Profile)) profiles;\\r\\n\\r\\n    /**\\r\\n        @dev Sign up fees for different category.\\r\\n            @notice - It can be configured to suit any category.\\r\\n     */\\r\\n    mapping (Category=>uint256) public signUpFees;\\r\\n\\r\\n    ///@dev Rewards\\r\\n    // mapping(address=>uint) public rewards;\\r\\n\\r\\n\\r\\n    modifier validateWasteId(uint binId, uint wasteId, State state, string memory errorMessage) {\\r\\n        if(binId >= bins.length) revert InvalidBinID();\\r\\n        if(state == State.COLLECTED) {\\r\\n            if(wasteId >= bins[binId].bin.length) revert InvalidWasteId();\\r\\n        }\\r\\n        require(bins[binId].bin[wasteId].state == state, errorMessage);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    ///Checks user's existence\\r\\n    modifier isApproved(Category cat, address who) {\\r\\n        if(!_getApproval(cat, who)) revert UserAlreadyNotExist();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    ///@dev Validates category\\r\\n    modifier validateCategory(uint8 cat) {\\r\\n        require(cat < 4, \\\"Invalid category\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    //Checks that the size of wastes not greater than 50\\r\\n    modifier validateSize(uint[] memory wasteIDs, string[] memory wastedata) {\\r\\n        (uint8 low, uint8 high) = (0, 50);\\r\\n        wastedata.length == 0 ? require(\\r\\n            wasteIDs.length > low && wasteIDs.length <= high, \\r\\n            \\\"invalid\\\"\\r\\n        ) : require(wastedata.length > low && wastedata.length <= high, \\\"invalid\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor (address _token) { \\r\\n        token = _token;\\r\\n        newSignUpReward = 10 * (10 ** 18);\\r\\n        profiles[Category.BINOWNER][_msgSender()].approval = true;\\r\\n        formula[Share.COLLECTOR] = 65;\\r\\n        formula[Share.GENERATOR] = 10;\\r\\n        formula[Share.TEAM] = 25;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Sign up function. \\r\\n                o Caller must not already be a member. \\r\\n    */\\r\\n    function signUpAsWasteCollector() public {\\r\\n       require(!profiles[Category.COLLECTOR][_msgSender()].isRegistered, \\\"Already sign up\\\");\\r\\n       IBoolaLib.registerCollector(profiles, _msgSender());\\r\\n       IERC20(token).approve(_msgSender(), newSignUpReward);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Adds new bin.\\r\\n            @notice Caller must already be approves as BinOwner .\\r\\n    */\\r\\n    function addNewBin() public payable isApproved(Category.BINOWNER, _msgSender()) {\\r\\n        IBoolaLib.registerNewBin(bins, _msgSender());\\r\\n        binCounter ++;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Removes bin at binId.\\r\\n            @notice Caller must already be approves as BinOwner .\\r\\n    */\\r\\n    function removeBin(uint binId) public isApproved(Category.BINOWNER, _msgSender()) {\\r\\n        address _owner = _getBinOwner(binId);\\r\\n        if(_msgSender() != owner()) require(_msgSender() == _owner, \\\"Not Authorized\\\");\\r\\n        \\r\\n        IBoolaLib.removeBin(bins, binId);\\r\\n    }\\r\\n\\r\\n    /**@dev Returns list of wastes under each 'State'\\r\\n        i.e Generated waste data, Collected waste data, ...rest\\r\\n    */\\r\\n    function garbages(uint8 _category) public view returns(WasteData[] memory) {\\r\\n        require(_category < 3, \\\"Invalid selecetor\\\");\\r\\n        return _garbages[State(_category)];\\r\\n    }\\r\\n\\r\\n    ///@dev Return owner of bin at binId. \\r\\n    function _getBinOwner(uint binId) internal view returns(address) {\\r\\n        return bins[binId].owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Whitelist user\\r\\n            Note Admin privilege.\\r\\n                cat should reference the Category enum.\\r\\n     */\\r\\n    function whitelistuser(address who, uint8 category) public onlyOwner validateCategory(category) {\\r\\n        IBoolaLib.setStatus(profiles, who, true, Category(category));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Blacklist user\\r\\n            Note Admin privilege.\\r\\n                cat should reference the Category enum.\\r\\n     */\\r\\n    function blacklistUser(address who, uint8 category) public onlyOwner validateCategory(category){\\r\\n        IBoolaLib.setStatus(profiles, who, false, Category(category));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Set new fee\\r\\n            @notice To perfectly select the right category,\\r\\n                category parameter should not be greater than 4.\\r\\n     */\\r\\n    function setFee(uint8 category, uint newFee) public onlyOwner {\\r\\n        require(category < 4, \\\"Invalid category\\\");\\r\\n        signUpFees[Category(category)] = newFee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Generates new waste. \\r\\n        @notice Each waste is unique to another.\\r\\n            Note To successfully generate waste, bin id must be provided.\\r\\n                    This represents the destination where wastes are dumped.\\r\\n     */\\r\\n    function generateWaste(string memory _data) public isApproved(Category.GENERATOR, _msgSender()) {\\r\\n        State state = State.GENERATED;\\r\\n        totalWasteGenerated ++;\\r\\n        uint nonce = totalWasteGenerated;\\r\\n        IBoolaLib.portToMap(\\r\\n            _garbages, \\r\\n             WasteData(\\r\\n                keccak256(abi.encodePacked(bytes(_data), nonce)), \\r\\n                address(0), \\r\\n                _msgSender(), \\r\\n                address(0),\\r\\n                state\\r\\n            ), \\r\\n            state\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _empty() internal pure returns(Empty memory empty) {\\r\\n        uint[] memory wasteIds = new uint[](0);\\r\\n        string[] memory wastedata = new string[](0);\\r\\n        empty = Empty(wasteIds, wastedata);\\r\\n    }\\r\\n\\r\\n    ///@dev Generates multiple waste data\\r\\n    function generateMultipleWaste(string[] memory data) public validateSize(_empty().wasteIds, data) {\\r\\n        for (uint i=0; i < data.length; i++) {\\r\\n            generateWaste(data[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Gets approval for user 'who'\\r\\n            @param cat - Category of user e.g COLLECTOR etc\\r\\n            @param who - Address of user.\\r\\n    */\\r\\n    function _getApproval(Category cat, address who) internal view returns(bool) {\\r\\n        return profiles[cat][who].approval;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Collect waste.\\r\\n            Note : Only generated waste can be collected\\r\\n            @param binId - Bin where the waste is located.\\r\\n            @param wasteId - Which waste to collect.\\r\\n                    Note - Every waste is unique to another.\\r\\n                            To make purchase of manure easy, wastes are recycled\\r\\n                            in 50s.\\r\\n     */\\r\\n    function recycle(uint binId, uint wasteId) internal isApproved(Category.RECYCLER, _msgSender()) validateWasteId(binId, wasteId, State.COLLECTED, \\\"Invalid waste pointer\\\") {\\r\\n        WasteData memory outWaste = IBoolaLib.popFromArray(bins, binId, wasteId);\\r\\n        IBoolaLib.portToMap(_garbages, outWaste, State.RECYCLED);\\r\\n        uint amount = collectorReward;\\r\\n\\r\\n        (uint collector, uint generator, uint team) = IBoolaLib.split(formula, amount);\\r\\n        IERC20(token).approve(outWaste.collector, collector);\\r\\n        IERC20(token).approve(outWaste.generator, generator);\\r\\n        IERC20(token).approve(address(this), team);\\r\\n\\r\\n    }\\r\\n\\r\\n    ///@notice Can recycle wastes greater than 0 but less than 51\\r\\n    function recycleMultiple(uint binId, uint[] memory wasteIds) public validateSize(wasteIds, _empty().wastedata) {\\r\\n        for (uint i = 0; i < wasteIds.length; i++) {\\r\\n            recycle(binId, wasteIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /**@notice Withdraw reward if any {IBoola Token}\\r\\n        Note - Caller must have previous reward otherwise it fails.\\r\\n     */\\r\\n    function withdraw() public {\\r\\n        uint rewardBal = IERC20(token).allowance(address(this),_msgSender());\\r\\n        if(rewardBal == 0) revert NothingToWithdraw();\\r\\n        IERC20(token).transferFrom(address(this), _msgSender(), rewardBal);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Collect waste for disposal. \\r\\n            Note: Caller must be an approved waste collector.\\r\\n                must supply the following:\\r\\n                    o @param binId - Location of bin to deposit collected waste. ie bin index\\r\\n                    o @param wasteId - Identifier for waste collected.\\r\\n     */\\r\\n\\r\\n    function collectWaste(uint binId, uint wasteId) public isApproved(Category.COLLECTOR, _msgSender()) validateWasteId(binId, wasteId, State.GENERATED, \\\"Invalid waste pointer\\\") {\\r\\n        require(profiles[Category.COLLECTOR][_msgSender()].isRegistered,\\\"Not allowed\\\");\\r\\n\\r\\n        WasteData memory outWaste = IBoolaLib.popFromMapping(_garbages, wasteId, State.GENERATED);\\r\\n        IBoolaLib.portToArray(bins, binId, outWaste, State.COLLECTED);\\r\\n\\r\\n    }\\r\\n\\r\\n    //See `collectWaste()` except that this runs mulitple time.\\r\\n    function collectMultipleWaste(uint binId, uint[] memory wasteIds) public validateSize(wasteIds,_empty().wastedata) {\\r\\n        for (uint i = 0; i < wasteIds.length; i++) {\\r\\n            collectWaste(binId, wasteIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**@notice Buy recycled waste in form of manure\\r\\n        NOTE: Only recycled waste can be bought.\\r\\n        If available manure cannot cover requested volume, buyer simply \\r\\n        purchased available volume.\\r\\n     */\\r\\n    function buyRecycled(uint volume) public payable {\\r\\n        uint len = _garbages[State.RECYCLED].length;\\r\\n        uint actualVolume;\\r\\n        State _s = State.RECYCLED;\\r\\n        require(len > 0 && len >= volume, \\\"Not available\\\");\\r\\n        for(uint i = 0; i < volume; i++) {\\r\\n            WasteData memory wd = _garbages[_s][i];\\r\\n            if(wd.recycler != address(0)) {\\r\\n                actualVolume ++;\\r\\n                profiles[Category.SOLD][_msgSender()].purchased.push(WasteData(\\r\\n                    wd.value,\\r\\n                    wd.collector,\\r\\n                    wd.generator,\\r\\n                    wd.recycler,\\r\\n                    wd.state\\r\\n                ));\\r\\n                delete _garbages[_s][i];\\r\\n            }\\r\\n        }\\r\\n        uint amtToPay = price * actualVolume;\\r\\n        require(msg.value >= amtToPay, \\\"IValue\\\");\\r\\n        \\r\\n     }\\r\\n\\r\\n    ///@dev Sets new price for recycled waste.\\r\\n    function setPrice(uint newPrice) public onlyOwner {\\r\\n        price = newPrice;\\r\\n    }\\r\\n\\r\\n\\r\\n    ///@dev Sets new sign up reward. Note With access modifier\\r\\n    function setSignUpReward(uint newReward) public onlyOwner{\\r\\n        newSignUpReward = newReward;\\r\\n    }\\r\\n\\r\\n    ///@dev Sets new sign up reward. Note With access modifier\\r\\n    function setCollectorUpReward(uint newReward) public onlyOwner{\\r\\n        collectorReward = newReward;\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xe9c6308cd0170828d91de300dc117779f7ca18bab2c009fcd3acb91a0473f54c\",\"license\":\"GPL-3.0\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 630,
                "contract": "contracts/verify/IBoolaContractV.sol:IBoolaContractV",
                "label": "_owner",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
              },
              {
                "astId": 745,
                "contract": "contracts/verify/IBoolaContractV.sol:IBoolaContractV",
                "label": "newSignUpReward",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
              },
              {
                "astId": 748,
                "contract": "contracts/verify/IBoolaContractV.sol:IBoolaContractV",
                "label": "token",
                "offset": 0,
                "slot": "2",
                "type": "t_address"
              },
              {
                "astId": 751,
                "contract": "contracts/verify/IBoolaContractV.sol:IBoolaContractV",
                "label": "totalWasteGenerated",
                "offset": 0,
                "slot": "3",
                "type": "t_uint256"
              },
              {
                "astId": 754,
                "contract": "contracts/verify/IBoolaContractV.sol:IBoolaContractV",
                "label": "collectorReward",
                "offset": 0,
                "slot": "4",
                "type": "t_uint256"
              },
              {
                "astId": 757,
                "contract": "contracts/verify/IBoolaContractV.sol:IBoolaContractV",
                "label": "binCounter",
                "offset": 0,
                "slot": "5",
                "type": "t_uint256"
              },
              {
                "astId": 760,
                "contract": "contracts/verify/IBoolaContractV.sol:IBoolaContractV",
                "label": "price",
                "offset": 0,
                "slot": "6",
                "type": "t_uint256"
              },
              {
                "astId": 765,
                "contract": "contracts/verify/IBoolaContractV.sol:IBoolaContractV",
                "label": "bins",
                "offset": 0,
                "slot": "7",
                "type": "t_array(t_struct(BinData)63_storage)dyn_storage"
              },
              {
                "astId": 770,
                "contract": "contracts/verify/IBoolaContractV.sol:IBoolaContractV",
                "label": "formula",
                "offset": 0,
                "slot": "8",
                "type": "t_mapping(t_enum(Share)15,t_uint8)"
              },
              {
                "astId": 778,
                "contract": "contracts/verify/IBoolaContractV.sol:IBoolaContractV",
                "label": "_garbages",
                "offset": 0,
                "slot": "9",
                "type": "t_mapping(t_enum(State)5,t_array(t_struct(WasteData)43_storage)dyn_storage)"
              },
              {
                "astId": 787,
                "contract": "contracts/verify/IBoolaContractV.sol:IBoolaContractV",
                "label": "profiles",
                "offset": 0,
                "slot": "10",
                "type": "t_mapping(t_enum(Category)11,t_mapping(t_address,t_struct(Profile)56_storage))"
              },
              {
                "astId": 793,
                "contract": "contracts/verify/IBoolaContractV.sol:IBoolaContractV",
                "label": "signUpFees",
                "offset": 0,
                "slot": "11",
                "type": "t_mapping(t_enum(Category)11,t_uint256)"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              },
              "t_array(t_struct(BinData)63_storage)dyn_storage": {
                "base": "t_struct(BinData)63_storage",
                "encoding": "dynamic_array",
                "label": "struct Common.BinData[]",
                "numberOfBytes": "32"
              },
              "t_array(t_struct(WasteData)43_storage)dyn_storage": {
                "base": "t_struct(WasteData)43_storage",
                "encoding": "dynamic_array",
                "label": "struct Common.WasteData[]",
                "numberOfBytes": "32"
              },
              "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
              },
              "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
              },
              "t_enum(Category)11": {
                "encoding": "inplace",
                "label": "enum Common.Category",
                "numberOfBytes": "1"
              },
              "t_enum(Share)15": {
                "encoding": "inplace",
                "label": "enum Common.Share",
                "numberOfBytes": "1"
              },
              "t_enum(State)5": {
                "encoding": "inplace",
                "label": "enum Common.State",
                "numberOfBytes": "1"
              },
              "t_mapping(t_address,t_struct(Profile)56_storage)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => struct Common.Profile)",
                "numberOfBytes": "32",
                "value": "t_struct(Profile)56_storage"
              },
              "t_mapping(t_enum(Category)11,t_mapping(t_address,t_struct(Profile)56_storage))": {
                "encoding": "mapping",
                "key": "t_enum(Category)11",
                "label": "mapping(enum Common.Category => mapping(address => struct Common.Profile))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_address,t_struct(Profile)56_storage)"
              },
              "t_mapping(t_enum(Category)11,t_uint256)": {
                "encoding": "mapping",
                "key": "t_enum(Category)11",
                "label": "mapping(enum Common.Category => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
              },
              "t_mapping(t_enum(Share)15,t_uint8)": {
                "encoding": "mapping",
                "key": "t_enum(Share)15",
                "label": "mapping(enum Common.Share => uint8)",
                "numberOfBytes": "32",
                "value": "t_uint8"
              },
              "t_mapping(t_enum(State)5,t_array(t_struct(WasteData)43_storage)dyn_storage)": {
                "encoding": "mapping",
                "key": "t_enum(State)5",
                "label": "mapping(enum Common.State => struct Common.WasteData[])",
                "numberOfBytes": "32",
                "value": "t_array(t_struct(WasteData)43_storage)dyn_storage"
              },
              "t_struct(BinData)63_storage": {
                "encoding": "inplace",
                "label": "struct Common.BinData",
                "members": [
                  {
                    "astId": 60,
                    "contract": "contracts/verify/IBoolaContractV.sol:IBoolaContractV",
                    "label": "bin",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_array(t_struct(WasteData)43_storage)dyn_storage"
                  },
                  {
                    "astId": 62,
                    "contract": "contracts/verify/IBoolaContractV.sol:IBoolaContractV",
                    "label": "owner",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_address"
                  }
                ],
                "numberOfBytes": "64"
              },
              "t_struct(Profile)56_storage": {
                "encoding": "inplace",
                "label": "struct Common.Profile",
                "members": [
                  {
                    "astId": 45,
                    "contract": "contracts/verify/IBoolaContractV.sol:IBoolaContractV",
                    "label": "transactionTime",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_uint32"
                  },
                  {
                    "astId": 47,
                    "contract": "contracts/verify/IBoolaContractV.sol:IBoolaContractV",
                    "label": "wasteCount",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 49,
                    "contract": "contracts/verify/IBoolaContractV.sol:IBoolaContractV",
                    "label": "approval",
                    "offset": 0,
                    "slot": "2",
                    "type": "t_bool"
                  },
                  {
                    "astId": 51,
                    "contract": "contracts/verify/IBoolaContractV.sol:IBoolaContractV",
                    "label": "isRegistered",
                    "offset": 1,
                    "slot": "2",
                    "type": "t_bool"
                  },
                  {
                    "astId": 55,
                    "contract": "contracts/verify/IBoolaContractV.sol:IBoolaContractV",
                    "label": "purchased",
                    "offset": 0,
                    "slot": "3",
                    "type": "t_array(t_struct(WasteData)43_storage)dyn_storage"
                  }
                ],
                "numberOfBytes": "128"
              },
              "t_struct(WasteData)43_storage": {
                "encoding": "inplace",
                "label": "struct Common.WasteData",
                "members": [
                  {
                    "astId": 33,
                    "contract": "contracts/verify/IBoolaContractV.sol:IBoolaContractV",
                    "label": "value",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_bytes32"
                  },
                  {
                    "astId": 35,
                    "contract": "contracts/verify/IBoolaContractV.sol:IBoolaContractV",
                    "label": "collector",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_address"
                  },
                  {
                    "astId": 37,
                    "contract": "contracts/verify/IBoolaContractV.sol:IBoolaContractV",
                    "label": "generator",
                    "offset": 0,
                    "slot": "2",
                    "type": "t_address"
                  },
                  {
                    "astId": 39,
                    "contract": "contracts/verify/IBoolaContractV.sol:IBoolaContractV",
                    "label": "recycler",
                    "offset": 0,
                    "slot": "3",
                    "type": "t_address"
                  },
                  {
                    "astId": 42,
                    "contract": "contracts/verify/IBoolaContractV.sol:IBoolaContractV",
                    "label": "state",
                    "offset": 20,
                    "slot": "3",
                    "type": "t_enum(State)5"
                  }
                ],
                "numberOfBytes": "128"
              },
              "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
              },
              "t_uint32": {
                "encoding": "inplace",
                "label": "uint32",
                "numberOfBytes": "4"
              },
              "t_uint8": {
                "encoding": "inplace",
                "label": "uint8",
                "numberOfBytes": "1"
              }
            }
          },
          "userdoc": {
            "kind": "user",
            "methods": {
              "addNewBin()": {
                "notice": "Caller must already be approves as BinOwner ."
              },
              "bins(uint256)": {
                "notice": "Bins in this list are owned by addresses."
              },
              "buyRecycled(uint256)": {
                "notice": "Buy recycled waste in form of manure NOTE: Only recycled waste can be bought. If available manure cannot cover requested volume, buyer simply  purchased available volume."
              },
              "generateWaste(string)": {
                "notice": "Each waste is unique to another. Note To successfully generate waste, bin id must be provided. This represents the destination where wastes are dumped."
              },
              "recycleMultiple(uint256,uint256[])": {
                "notice": "Can recycle wastes greater than 0 but less than 51"
              },
              "removeBin(uint256)": {
                "notice": "Caller must already be approves as BinOwner ."
              },
              "setFee(uint8,uint256)": {
                "notice": "To perfectly select the right category, category parameter should not be greater than 4."
              },
              "signUpAsWasteCollector()": {
                "notice": "Sign up function.  o Caller must not already be a member. "
              },
              "signUpFees(uint8)": {
                "notice": "- It can be configured to suit any category."
              },
              "withdraw()": {
                "notice": "Withdraw reward if any {IBoola Token} Note - Caller must have previous reward otherwise it fails."
              }
            },
            "version": 1
          }
        },
        "IBoolaLib": {
          "abi": [],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220181701eccd441196cbab5bae14c87d7cd18539a105dce3bf88129cd51baa21d664736f6c63430008040033",
              "opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 XOR OR ADD 0xEC 0xCD DIFFICULTY GT SWAP7 0xCB 0xAB JUMPDEST 0xAE EQ 0xC8 PUSH30 0x7CD18539A105DCE3BF88129CD51BAA21D664736F6C634300080400330000 ",
              "sourceMap": "931:4247:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;931:4247:0;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220181701eccd441196cbab5bae14c87d7cd18539a105dce3bf88129cd51baa21d664736f6c63430008040033",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 XOR OR ADD 0xEC 0xCD DIFFICULTY GT SWAP7 0xCB 0xAB JUMPDEST 0xAE EQ 0xC8 PUSH30 0x7CD18539A105DCE3BF88129CD51BAA21D664736F6C634300080400330000 ",
              "sourceMap": "931:4247:0:-:0;;;;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "17200",
                "executionCost": "103",
                "totalCost": "17303"
              },
              "internal": {
                "_now()": "infinite",
                "_previousStatus(mapping(enum Common.Category => mapping(address => struct Common.Profile storage ref)),address,enum Common.Category)": "infinite",
                "popFromArray(struct Common.BinData storage ref[] storage pointer,uint256,uint256)": "infinite",
                "popFromMapping(mapping(enum Common.State => struct Common.WasteData storage ref[] storage ref),uint256,enum Common.State)": "infinite",
                "portToArray(struct Common.BinData storage ref[] storage pointer,uint256,struct Common.WasteData memory,enum Common.State)": "infinite",
                "portToMap(mapping(enum Common.State => struct Common.WasteData storage ref[] storage ref),struct Common.WasteData memory,enum Common.State)": "infinite",
                "registerCollector(mapping(enum Common.Category => mapping(address => struct Common.Profile storage ref)),address)": "infinite",
                "registerNewBin(struct Common.BinData storage ref[] storage pointer,address)": "infinite",
                "removeBin(struct Common.BinData storage ref[] storage pointer,uint256)": "infinite",
                "setStatus(mapping(enum Common.Category => mapping(address => struct Common.Profile storage ref)),address,bool,enum Common.Category)": "infinite",
                "split(mapping(enum Common.Share => uint8),uint256)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verify/IBoolaContractV.sol\":\"IBoolaLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verify/IBoolaContractV.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ninterface Common {\\r\\n  enum State { GENERATED, COLLECTED, RECYCLED }\\r\\n  enum Category { COLLECTOR, GENERATOR, RECYCLER, BINOWNER, SOLD }\\r\\n  enum Share { COLLECTOR, GENERATOR, TEAM }\\r\\n\\r\\n  error UserAlreadyExist();\\r\\n  error UserAlreadyNotExist();\\r\\n  error InvalidBinID();\\r\\n  error EmptyBin();\\r\\n  error CannotDeleteBinInEngagedMode();\\r\\n  error InvalidWasteId();\\r\\n  error NothingToWithdraw();\\r\\n  error MaxWasteTransportExceeded();\\r\\n\\r\\n  struct WasteData {\\r\\n    bytes32 value;\\r\\n    address collector;\\r\\n    address generator;\\r\\n    address recycler;\\r\\n    State state;\\r\\n  }\\r\\n\\r\\n  struct Profile {\\r\\n    uint32 transactionTime;\\r\\n    uint wasteCount;\\r\\n    bool approval;\\r\\n    bool isRegistered;\\r\\n    WasteData[] purchased;\\r\\n  }\\r\\n\\r\\n  struct BinData {\\r\\n    WasteData[] bin;\\r\\n    address owner;\\r\\n  }\\r\\n\\r\\n  struct Empty {\\r\\n    uint[] wasteIds;\\r\\n    string[] wastedata;\\r\\n  }\\r\\n\\r\\n}\\r\\n\\r\\nlibrary IBoolaLib {\\r\\n  /**\\r\\n    @dev Sign up new collector\\r\\n      @param self - Storage\\r\\n      @param newCollector - Address of new Collector to add.\\r\\n   */\\r\\n\\r\\n  function registerCollector(mapping (Common.Category=>mapping(address=>Common.Profile)) storage self, address newCollector) internal {\\r\\n    Common.Category _c = Common.Category.COLLECTOR;\\r\\n    self[_c][newCollector].transactionTime = _now();\\r\\n    self[_c][newCollector].wasteCount = 0;\\r\\n    self[_c][newCollector].approval = false;\\r\\n    self[_c][newCollector].isRegistered = true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Dual function: \\r\\n            o Recycles collected waste.\\r\\n            o Generate new waste.\\r\\n   */\\r\\n  function portToMap(\\r\\n    mapping (Common.State=>Common.WasteData[]) storage self, \\r\\n    Common.WasteData memory inWaste,\\r\\n    Common.State state\\r\\n  ) internal {\\r\\n    self[state].push(Common.WasteData(\\r\\n        inWaste.value,\\r\\n        inWaste.collector,\\r\\n        inWaste.generator,\\r\\n        inWaste.recycler,\\r\\n        state\\r\\n      )\\r\\n    );\\r\\n  }\\r\\n\\r\\n  ///@dev Moves waste to bin\\r\\n  function portToArray(Common.BinData[] storage self, uint binId, Common.WasteData memory inWaste, Common.State state) internal {\\r\\n    self[binId].bin.push(Common.WasteData(\\r\\n      inWaste.value,\\r\\n      inWaste.collector,\\r\\n      inWaste.generator,\\r\\n      inWaste.recycler,\\r\\n      state\\r\\n    )\\r\\n    );\\r\\n  }\\r\\n\\r\\n  ///@dev Removes waste at 'wasteId' from bin at 'binId' in bin array at hashmap 'self'\\r\\n  function popFromMapping(mapping (Common.State=>Common.WasteData[]) storage self, uint wasteId, Common.State state) internal returns(Common.WasteData memory _waste) {\\r\\n    _waste = self[state][wasteId];\\r\\n    delete self[state][wasteId];\\r\\n  }\\r\\n\\r\\n  ///@dev Removes waste at 'wasteId' from bin at 'binId' in bin array 'self'\\r\\n  function popFromArray(Common.BinData[] storage self, uint binId, uint wasteId) internal returns(Common.WasteData memory _waste) {\\r\\n    _waste = self[binId].bin[wasteId];\\r\\n    delete self[binId].bin[wasteId];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Sets collectors status to either true or false\\r\\n    @param value - Value to set status to.\\r\\n    @param who - User to set status for.\\r\\n    @param self - storage.\\r\\n      Note : If value is true, collector's status must be false vice versa.\\r\\n   */\\r\\n  function setStatus(mapping (Common.Category=>mapping(address=>Common.Profile)) storage self, address who, bool value, Common.Category cat) internal {\\r\\n    bool prevStatus = _previousStatus(self, who, cat);\\r\\n    if(value) {\\r\\n      if(prevStatus) revert Common.UserAlreadyExist();\\r\\n      self[cat][who].approval = true;\\r\\n    } else {\\r\\n      if(!prevStatus) revert Common.UserAlreadyNotExist();\\r\\n      self[cat][who].approval = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _previousStatus(mapping (Common.Category=>mapping(address=>Common.Profile)) storage self, address who, Common.Category cat) private view returns(bool) {\\r\\n    return self[cat][who].approval;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Registers new bin with owner.\\r\\n        @param owner - Bin Owner\\r\\n        @param self - Storage\\r\\n        @return newId \\r\\n   */\\r\\n  function registerNewBin(Common.BinData[] storage self, address owner) internal returns(uint newId) {\\r\\n    newId = self.length;\\r\\n    self.push();\\r\\n    self[newId].owner = owner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Removes bin from bin array.\\r\\n      @notice binId must be less than the bin array at any time since arrays are zero-based.\\r\\n      @param self - Storage\\r\\n   */\\r\\n  function removeBin(Common.BinData[] storage self, uint binId) internal {\\r\\n    (uint len, Common.BinData memory wasteBin)  = (self.length, self[binId]);\\r\\n    if(wasteBin.bin.length == 0) revert Common.EmptyBin();\\r\\n    for(uint i = 0; i < len; i++) {\\r\\n      if(wasteBin.bin[i].state < Common.State.RECYCLED) {\\r\\n        revert Common.CannotDeleteBinInEngagedMode();\\r\\n      }\\r\\n    } \\r\\n    delete self[binId];\\r\\n  }\\r\\n\\r\\n  function split(mapping (Common.Share=>uint8) storage self, uint amount) internal view returns(uint collector, uint generator, uint team) {\\r\\n    collector = (self[Common.Share.COLLECTOR] * amount) / 100;\\r\\n    generator = (self[Common.Share.GENERATOR] * amount) / 100;\\r\\n    team = (self[Common.Share.TEAM] * amount) / 100;\\r\\n\\r\\n  }\\r\\n\\r\\n  function _now() internal view returns(uint32) { return uint32(block.timestamp); }\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Main\\r\\n * @author Bobeu: https://github.com/bobeu\\r\\n * A smart contract that will tokenize the disposal and collection of waste. \\r\\n    Users get a token when they dispose of their waste in a waste bin, collectors \\r\\n    get token for collecting waste and taking them to the waste recyclers \\r\\n\\r\\n    The process of tokenization happens when the waste drops in the waste bin. Every\\r\\n    waste bin has a unique wallet ID which will receive the token at the end of evacuation.\\r\\n    The owners of the waste bin will have a DAO. \\r\\n\\r\\n    *Wallet \\r\\n    *Token (iBoola token) which would be paired against either Avalanche, Celo or Polygon \\r\\n    *New users get 10 $IBT after sign up \\r\\n    *Community of waste bins will have a DAO \\r\\n    Waste generators get 10% collectors get 65 while the iBoola team gets 25% \\r\\n    Decimals: use standard 18 decimals \\r\\n\\r\\n    Mintable: not mintable\\r\\n\\r\\n    Ownership privilege :  30% locked for 5 years, 20% for dev team 45% for  initial circulation, \\r\\n    5% for presale \\r\\n\\r\\n    PSEUDO\\r\\n    ======\\r\\n    Parties:\\r\\n        o Waste generators.\\r\\n        o Collectors.\\r\\n        o Recyclers.\\r\\n\\r\\n    o When waste is disposed or evacuated, then reward collectors.\\r\\n    o Each waste bin has a unique identifer and an owner.\\r\\n    o On sign up, user gets 10 $IBT Token.\\r\\n    o Waste collectors own a DAO.\\r\\n    o Waste bin owners own a DAO.\\r\\n    o Reward sharing formula Note - It is configurable. The owner account is able to \\r\\n        set each of these fields.\\r\\n        - Waste generators 10%.\\r\\n        - Collectors 65%.\\r\\n        - Team 25%.\\r\\n */\\r\\ncontract IBoolaContractV is Context, Common, Ownable {\\r\\n\\r\\n    ///@dev New sign up reward\\r\\n    uint public newSignUpReward;\\r\\n\\r\\n    ///@dev iBoola Token\\r\\n    address public token;\\r\\n\\r\\n    ///@dev Total waste generated to date\\r\\n    uint256 public totalWasteGenerated;\\r\\n\\r\\n    ///@dev Collector reward\\r\\n    uint public collectorReward;\\r\\n\\r\\n    ///@dev Total bin registered to date\\r\\n    uint public binCounter;\\r\\n\\r\\n    ///@dev Price of recycled waste\\r\\n    uint public price;\\r\\n\\r\\n    /**\\r\\n        @dev Array of bins \\r\\n            { Contain bins which contain collected wastes which contains wastedata}\\r\\n            @notice Bins in this list are owned by addresses.\\r\\n    */\\r\\n    BinData[] public bins;\\r\\n    \\r\\n    mapping (Share=>uint8) public formula;\\r\\n    \\r\\n\\r\\n    /**\\r\\n        @dev Mapping of Generated and Recycled Waste State -> binId (binCounter) -> WasteData\\r\\n        Keys type: \\r\\n            o State\\r\\n            o uint256\\r\\n\\r\\n        value:\\r\\n           array of struct(s) \\r\\n     */\\r\\n    mapping (State=>WasteData[]) private _garbages;\\r\\n    \\r\\n    /**\\r\\n        @dev Mapping of Waste State -> user -> profile\\r\\n        Keys type: \\r\\n            o State\\r\\n            o address\\r\\n\\r\\n        value:\\r\\n            struct \\r\\n     */\\r\\n    mapping (Category=>mapping(address=>Profile)) profiles;\\r\\n\\r\\n    /**\\r\\n        @dev Sign up fees for different category.\\r\\n            @notice - It can be configured to suit any category.\\r\\n     */\\r\\n    mapping (Category=>uint256) public signUpFees;\\r\\n\\r\\n    ///@dev Rewards\\r\\n    // mapping(address=>uint) public rewards;\\r\\n\\r\\n\\r\\n    modifier validateWasteId(uint binId, uint wasteId, State state, string memory errorMessage) {\\r\\n        if(binId >= bins.length) revert InvalidBinID();\\r\\n        if(state == State.COLLECTED) {\\r\\n            if(wasteId >= bins[binId].bin.length) revert InvalidWasteId();\\r\\n        }\\r\\n        require(bins[binId].bin[wasteId].state == state, errorMessage);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    ///Checks user's existence\\r\\n    modifier isApproved(Category cat, address who) {\\r\\n        if(!_getApproval(cat, who)) revert UserAlreadyNotExist();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    ///@dev Validates category\\r\\n    modifier validateCategory(uint8 cat) {\\r\\n        require(cat < 4, \\\"Invalid category\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    //Checks that the size of wastes not greater than 50\\r\\n    modifier validateSize(uint[] memory wasteIDs, string[] memory wastedata) {\\r\\n        (uint8 low, uint8 high) = (0, 50);\\r\\n        wastedata.length == 0 ? require(\\r\\n            wasteIDs.length > low && wasteIDs.length <= high, \\r\\n            \\\"invalid\\\"\\r\\n        ) : require(wastedata.length > low && wastedata.length <= high, \\\"invalid\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor (address _token) { \\r\\n        token = _token;\\r\\n        newSignUpReward = 10 * (10 ** 18);\\r\\n        profiles[Category.BINOWNER][_msgSender()].approval = true;\\r\\n        formula[Share.COLLECTOR] = 65;\\r\\n        formula[Share.GENERATOR] = 10;\\r\\n        formula[Share.TEAM] = 25;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Sign up function. \\r\\n                o Caller must not already be a member. \\r\\n    */\\r\\n    function signUpAsWasteCollector() public {\\r\\n       require(!profiles[Category.COLLECTOR][_msgSender()].isRegistered, \\\"Already sign up\\\");\\r\\n       IBoolaLib.registerCollector(profiles, _msgSender());\\r\\n       IERC20(token).approve(_msgSender(), newSignUpReward);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Adds new bin.\\r\\n            @notice Caller must already be approves as BinOwner .\\r\\n    */\\r\\n    function addNewBin() public payable isApproved(Category.BINOWNER, _msgSender()) {\\r\\n        IBoolaLib.registerNewBin(bins, _msgSender());\\r\\n        binCounter ++;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Removes bin at binId.\\r\\n            @notice Caller must already be approves as BinOwner .\\r\\n    */\\r\\n    function removeBin(uint binId) public isApproved(Category.BINOWNER, _msgSender()) {\\r\\n        address _owner = _getBinOwner(binId);\\r\\n        if(_msgSender() != owner()) require(_msgSender() == _owner, \\\"Not Authorized\\\");\\r\\n        \\r\\n        IBoolaLib.removeBin(bins, binId);\\r\\n    }\\r\\n\\r\\n    /**@dev Returns list of wastes under each 'State'\\r\\n        i.e Generated waste data, Collected waste data, ...rest\\r\\n    */\\r\\n    function garbages(uint8 _category) public view returns(WasteData[] memory) {\\r\\n        require(_category < 3, \\\"Invalid selecetor\\\");\\r\\n        return _garbages[State(_category)];\\r\\n    }\\r\\n\\r\\n    ///@dev Return owner of bin at binId. \\r\\n    function _getBinOwner(uint binId) internal view returns(address) {\\r\\n        return bins[binId].owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Whitelist user\\r\\n            Note Admin privilege.\\r\\n                cat should reference the Category enum.\\r\\n     */\\r\\n    function whitelistuser(address who, uint8 category) public onlyOwner validateCategory(category) {\\r\\n        IBoolaLib.setStatus(profiles, who, true, Category(category));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Blacklist user\\r\\n            Note Admin privilege.\\r\\n                cat should reference the Category enum.\\r\\n     */\\r\\n    function blacklistUser(address who, uint8 category) public onlyOwner validateCategory(category){\\r\\n        IBoolaLib.setStatus(profiles, who, false, Category(category));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Set new fee\\r\\n            @notice To perfectly select the right category,\\r\\n                category parameter should not be greater than 4.\\r\\n     */\\r\\n    function setFee(uint8 category, uint newFee) public onlyOwner {\\r\\n        require(category < 4, \\\"Invalid category\\\");\\r\\n        signUpFees[Category(category)] = newFee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Generates new waste. \\r\\n        @notice Each waste is unique to another.\\r\\n            Note To successfully generate waste, bin id must be provided.\\r\\n                    This represents the destination where wastes are dumped.\\r\\n     */\\r\\n    function generateWaste(string memory _data) public isApproved(Category.GENERATOR, _msgSender()) {\\r\\n        State state = State.GENERATED;\\r\\n        totalWasteGenerated ++;\\r\\n        uint nonce = totalWasteGenerated;\\r\\n        IBoolaLib.portToMap(\\r\\n            _garbages, \\r\\n             WasteData(\\r\\n                keccak256(abi.encodePacked(bytes(_data), nonce)), \\r\\n                address(0), \\r\\n                _msgSender(), \\r\\n                address(0),\\r\\n                state\\r\\n            ), \\r\\n            state\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _empty() internal pure returns(Empty memory empty) {\\r\\n        uint[] memory wasteIds = new uint[](0);\\r\\n        string[] memory wastedata = new string[](0);\\r\\n        empty = Empty(wasteIds, wastedata);\\r\\n    }\\r\\n\\r\\n    ///@dev Generates multiple waste data\\r\\n    function generateMultipleWaste(string[] memory data) public validateSize(_empty().wasteIds, data) {\\r\\n        for (uint i=0; i < data.length; i++) {\\r\\n            generateWaste(data[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Gets approval for user 'who'\\r\\n            @param cat - Category of user e.g COLLECTOR etc\\r\\n            @param who - Address of user.\\r\\n    */\\r\\n    function _getApproval(Category cat, address who) internal view returns(bool) {\\r\\n        return profiles[cat][who].approval;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Collect waste.\\r\\n            Note : Only generated waste can be collected\\r\\n            @param binId - Bin where the waste is located.\\r\\n            @param wasteId - Which waste to collect.\\r\\n                    Note - Every waste is unique to another.\\r\\n                            To make purchase of manure easy, wastes are recycled\\r\\n                            in 50s.\\r\\n     */\\r\\n    function recycle(uint binId, uint wasteId) internal isApproved(Category.RECYCLER, _msgSender()) validateWasteId(binId, wasteId, State.COLLECTED, \\\"Invalid waste pointer\\\") {\\r\\n        WasteData memory outWaste = IBoolaLib.popFromArray(bins, binId, wasteId);\\r\\n        IBoolaLib.portToMap(_garbages, outWaste, State.RECYCLED);\\r\\n        uint amount = collectorReward;\\r\\n\\r\\n        (uint collector, uint generator, uint team) = IBoolaLib.split(formula, amount);\\r\\n        IERC20(token).approve(outWaste.collector, collector);\\r\\n        IERC20(token).approve(outWaste.generator, generator);\\r\\n        IERC20(token).approve(address(this), team);\\r\\n\\r\\n    }\\r\\n\\r\\n    ///@notice Can recycle wastes greater than 0 but less than 51\\r\\n    function recycleMultiple(uint binId, uint[] memory wasteIds) public validateSize(wasteIds, _empty().wastedata) {\\r\\n        for (uint i = 0; i < wasteIds.length; i++) {\\r\\n            recycle(binId, wasteIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /**@notice Withdraw reward if any {IBoola Token}\\r\\n        Note - Caller must have previous reward otherwise it fails.\\r\\n     */\\r\\n    function withdraw() public {\\r\\n        uint rewardBal = IERC20(token).allowance(address(this),_msgSender());\\r\\n        if(rewardBal == 0) revert NothingToWithdraw();\\r\\n        IERC20(token).transferFrom(address(this), _msgSender(), rewardBal);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Collect waste for disposal. \\r\\n            Note: Caller must be an approved waste collector.\\r\\n                must supply the following:\\r\\n                    o @param binId - Location of bin to deposit collected waste. ie bin index\\r\\n                    o @param wasteId - Identifier for waste collected.\\r\\n     */\\r\\n\\r\\n    function collectWaste(uint binId, uint wasteId) public isApproved(Category.COLLECTOR, _msgSender()) validateWasteId(binId, wasteId, State.GENERATED, \\\"Invalid waste pointer\\\") {\\r\\n        require(profiles[Category.COLLECTOR][_msgSender()].isRegistered,\\\"Not allowed\\\");\\r\\n\\r\\n        WasteData memory outWaste = IBoolaLib.popFromMapping(_garbages, wasteId, State.GENERATED);\\r\\n        IBoolaLib.portToArray(bins, binId, outWaste, State.COLLECTED);\\r\\n\\r\\n    }\\r\\n\\r\\n    //See `collectWaste()` except that this runs mulitple time.\\r\\n    function collectMultipleWaste(uint binId, uint[] memory wasteIds) public validateSize(wasteIds,_empty().wastedata) {\\r\\n        for (uint i = 0; i < wasteIds.length; i++) {\\r\\n            collectWaste(binId, wasteIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**@notice Buy recycled waste in form of manure\\r\\n        NOTE: Only recycled waste can be bought.\\r\\n        If available manure cannot cover requested volume, buyer simply \\r\\n        purchased available volume.\\r\\n     */\\r\\n    function buyRecycled(uint volume) public payable {\\r\\n        uint len = _garbages[State.RECYCLED].length;\\r\\n        uint actualVolume;\\r\\n        State _s = State.RECYCLED;\\r\\n        require(len > 0 && len >= volume, \\\"Not available\\\");\\r\\n        for(uint i = 0; i < volume; i++) {\\r\\n            WasteData memory wd = _garbages[_s][i];\\r\\n            if(wd.recycler != address(0)) {\\r\\n                actualVolume ++;\\r\\n                profiles[Category.SOLD][_msgSender()].purchased.push(WasteData(\\r\\n                    wd.value,\\r\\n                    wd.collector,\\r\\n                    wd.generator,\\r\\n                    wd.recycler,\\r\\n                    wd.state\\r\\n                ));\\r\\n                delete _garbages[_s][i];\\r\\n            }\\r\\n        }\\r\\n        uint amtToPay = price * actualVolume;\\r\\n        require(msg.value >= amtToPay, \\\"IValue\\\");\\r\\n        \\r\\n     }\\r\\n\\r\\n    ///@dev Sets new price for recycled waste.\\r\\n    function setPrice(uint newPrice) public onlyOwner {\\r\\n        price = newPrice;\\r\\n    }\\r\\n\\r\\n\\r\\n    ///@dev Sets new sign up reward. Note With access modifier\\r\\n    function setSignUpReward(uint newReward) public onlyOwner{\\r\\n        newSignUpReward = newReward;\\r\\n    }\\r\\n\\r\\n    ///@dev Sets new sign up reward. Note With access modifier\\r\\n    function setCollectorUpReward(uint newReward) public onlyOwner{\\r\\n        collectorReward = newReward;\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xe9c6308cd0170828d91de300dc117779f7ca18bab2c009fcd3acb91a0473f54c\",\"license\":\"GPL-3.0\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "IERC20": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Interface of the ERC20 standard as defined in the EIP.",
            "events": {
              "Approval(address,address,uint256)": {
                "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
              },
              "Transfer(address,address,uint256)": {
                "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
              }
            },
            "kind": "dev",
            "methods": {
              "allowance(address,address)": {
                "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
              },
              "approve(address,uint256)": {
                "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
              },
              "balanceOf(address)": {
                "details": "Returns the amount of tokens owned by `account`."
              },
              "totalSupply()": {
                "details": "Returns the amount of tokens in existence."
              },
              "transfer(address,uint256)": {
                "details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
              },
              "transferFrom(address,address,uint256)": {
                "details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verify/IBoolaContractV.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verify/IBoolaContractV.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ninterface Common {\\r\\n  enum State { GENERATED, COLLECTED, RECYCLED }\\r\\n  enum Category { COLLECTOR, GENERATOR, RECYCLER, BINOWNER, SOLD }\\r\\n  enum Share { COLLECTOR, GENERATOR, TEAM }\\r\\n\\r\\n  error UserAlreadyExist();\\r\\n  error UserAlreadyNotExist();\\r\\n  error InvalidBinID();\\r\\n  error EmptyBin();\\r\\n  error CannotDeleteBinInEngagedMode();\\r\\n  error InvalidWasteId();\\r\\n  error NothingToWithdraw();\\r\\n  error MaxWasteTransportExceeded();\\r\\n\\r\\n  struct WasteData {\\r\\n    bytes32 value;\\r\\n    address collector;\\r\\n    address generator;\\r\\n    address recycler;\\r\\n    State state;\\r\\n  }\\r\\n\\r\\n  struct Profile {\\r\\n    uint32 transactionTime;\\r\\n    uint wasteCount;\\r\\n    bool approval;\\r\\n    bool isRegistered;\\r\\n    WasteData[] purchased;\\r\\n  }\\r\\n\\r\\n  struct BinData {\\r\\n    WasteData[] bin;\\r\\n    address owner;\\r\\n  }\\r\\n\\r\\n  struct Empty {\\r\\n    uint[] wasteIds;\\r\\n    string[] wastedata;\\r\\n  }\\r\\n\\r\\n}\\r\\n\\r\\nlibrary IBoolaLib {\\r\\n  /**\\r\\n    @dev Sign up new collector\\r\\n      @param self - Storage\\r\\n      @param newCollector - Address of new Collector to add.\\r\\n   */\\r\\n\\r\\n  function registerCollector(mapping (Common.Category=>mapping(address=>Common.Profile)) storage self, address newCollector) internal {\\r\\n    Common.Category _c = Common.Category.COLLECTOR;\\r\\n    self[_c][newCollector].transactionTime = _now();\\r\\n    self[_c][newCollector].wasteCount = 0;\\r\\n    self[_c][newCollector].approval = false;\\r\\n    self[_c][newCollector].isRegistered = true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Dual function: \\r\\n            o Recycles collected waste.\\r\\n            o Generate new waste.\\r\\n   */\\r\\n  function portToMap(\\r\\n    mapping (Common.State=>Common.WasteData[]) storage self, \\r\\n    Common.WasteData memory inWaste,\\r\\n    Common.State state\\r\\n  ) internal {\\r\\n    self[state].push(Common.WasteData(\\r\\n        inWaste.value,\\r\\n        inWaste.collector,\\r\\n        inWaste.generator,\\r\\n        inWaste.recycler,\\r\\n        state\\r\\n      )\\r\\n    );\\r\\n  }\\r\\n\\r\\n  ///@dev Moves waste to bin\\r\\n  function portToArray(Common.BinData[] storage self, uint binId, Common.WasteData memory inWaste, Common.State state) internal {\\r\\n    self[binId].bin.push(Common.WasteData(\\r\\n      inWaste.value,\\r\\n      inWaste.collector,\\r\\n      inWaste.generator,\\r\\n      inWaste.recycler,\\r\\n      state\\r\\n    )\\r\\n    );\\r\\n  }\\r\\n\\r\\n  ///@dev Removes waste at 'wasteId' from bin at 'binId' in bin array at hashmap 'self'\\r\\n  function popFromMapping(mapping (Common.State=>Common.WasteData[]) storage self, uint wasteId, Common.State state) internal returns(Common.WasteData memory _waste) {\\r\\n    _waste = self[state][wasteId];\\r\\n    delete self[state][wasteId];\\r\\n  }\\r\\n\\r\\n  ///@dev Removes waste at 'wasteId' from bin at 'binId' in bin array 'self'\\r\\n  function popFromArray(Common.BinData[] storage self, uint binId, uint wasteId) internal returns(Common.WasteData memory _waste) {\\r\\n    _waste = self[binId].bin[wasteId];\\r\\n    delete self[binId].bin[wasteId];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Sets collectors status to either true or false\\r\\n    @param value - Value to set status to.\\r\\n    @param who - User to set status for.\\r\\n    @param self - storage.\\r\\n      Note : If value is true, collector's status must be false vice versa.\\r\\n   */\\r\\n  function setStatus(mapping (Common.Category=>mapping(address=>Common.Profile)) storage self, address who, bool value, Common.Category cat) internal {\\r\\n    bool prevStatus = _previousStatus(self, who, cat);\\r\\n    if(value) {\\r\\n      if(prevStatus) revert Common.UserAlreadyExist();\\r\\n      self[cat][who].approval = true;\\r\\n    } else {\\r\\n      if(!prevStatus) revert Common.UserAlreadyNotExist();\\r\\n      self[cat][who].approval = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _previousStatus(mapping (Common.Category=>mapping(address=>Common.Profile)) storage self, address who, Common.Category cat) private view returns(bool) {\\r\\n    return self[cat][who].approval;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Registers new bin with owner.\\r\\n        @param owner - Bin Owner\\r\\n        @param self - Storage\\r\\n        @return newId \\r\\n   */\\r\\n  function registerNewBin(Common.BinData[] storage self, address owner) internal returns(uint newId) {\\r\\n    newId = self.length;\\r\\n    self.push();\\r\\n    self[newId].owner = owner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Removes bin from bin array.\\r\\n      @notice binId must be less than the bin array at any time since arrays are zero-based.\\r\\n      @param self - Storage\\r\\n   */\\r\\n  function removeBin(Common.BinData[] storage self, uint binId) internal {\\r\\n    (uint len, Common.BinData memory wasteBin)  = (self.length, self[binId]);\\r\\n    if(wasteBin.bin.length == 0) revert Common.EmptyBin();\\r\\n    for(uint i = 0; i < len; i++) {\\r\\n      if(wasteBin.bin[i].state < Common.State.RECYCLED) {\\r\\n        revert Common.CannotDeleteBinInEngagedMode();\\r\\n      }\\r\\n    } \\r\\n    delete self[binId];\\r\\n  }\\r\\n\\r\\n  function split(mapping (Common.Share=>uint8) storage self, uint amount) internal view returns(uint collector, uint generator, uint team) {\\r\\n    collector = (self[Common.Share.COLLECTOR] * amount) / 100;\\r\\n    generator = (self[Common.Share.GENERATOR] * amount) / 100;\\r\\n    team = (self[Common.Share.TEAM] * amount) / 100;\\r\\n\\r\\n  }\\r\\n\\r\\n  function _now() internal view returns(uint32) { return uint32(block.timestamp); }\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Main\\r\\n * @author Bobeu: https://github.com/bobeu\\r\\n * A smart contract that will tokenize the disposal and collection of waste. \\r\\n    Users get a token when they dispose of their waste in a waste bin, collectors \\r\\n    get token for collecting waste and taking them to the waste recyclers \\r\\n\\r\\n    The process of tokenization happens when the waste drops in the waste bin. Every\\r\\n    waste bin has a unique wallet ID which will receive the token at the end of evacuation.\\r\\n    The owners of the waste bin will have a DAO. \\r\\n\\r\\n    *Wallet \\r\\n    *Token (iBoola token) which would be paired against either Avalanche, Celo or Polygon \\r\\n    *New users get 10 $IBT after sign up \\r\\n    *Community of waste bins will have a DAO \\r\\n    Waste generators get 10% collectors get 65 while the iBoola team gets 25% \\r\\n    Decimals: use standard 18 decimals \\r\\n\\r\\n    Mintable: not mintable\\r\\n\\r\\n    Ownership privilege :  30% locked for 5 years, 20% for dev team 45% for  initial circulation, \\r\\n    5% for presale \\r\\n\\r\\n    PSEUDO\\r\\n    ======\\r\\n    Parties:\\r\\n        o Waste generators.\\r\\n        o Collectors.\\r\\n        o Recyclers.\\r\\n\\r\\n    o When waste is disposed or evacuated, then reward collectors.\\r\\n    o Each waste bin has a unique identifer and an owner.\\r\\n    o On sign up, user gets 10 $IBT Token.\\r\\n    o Waste collectors own a DAO.\\r\\n    o Waste bin owners own a DAO.\\r\\n    o Reward sharing formula Note - It is configurable. The owner account is able to \\r\\n        set each of these fields.\\r\\n        - Waste generators 10%.\\r\\n        - Collectors 65%.\\r\\n        - Team 25%.\\r\\n */\\r\\ncontract IBoolaContractV is Context, Common, Ownable {\\r\\n\\r\\n    ///@dev New sign up reward\\r\\n    uint public newSignUpReward;\\r\\n\\r\\n    ///@dev iBoola Token\\r\\n    address public token;\\r\\n\\r\\n    ///@dev Total waste generated to date\\r\\n    uint256 public totalWasteGenerated;\\r\\n\\r\\n    ///@dev Collector reward\\r\\n    uint public collectorReward;\\r\\n\\r\\n    ///@dev Total bin registered to date\\r\\n    uint public binCounter;\\r\\n\\r\\n    ///@dev Price of recycled waste\\r\\n    uint public price;\\r\\n\\r\\n    /**\\r\\n        @dev Array of bins \\r\\n            { Contain bins which contain collected wastes which contains wastedata}\\r\\n            @notice Bins in this list are owned by addresses.\\r\\n    */\\r\\n    BinData[] public bins;\\r\\n    \\r\\n    mapping (Share=>uint8) public formula;\\r\\n    \\r\\n\\r\\n    /**\\r\\n        @dev Mapping of Generated and Recycled Waste State -> binId (binCounter) -> WasteData\\r\\n        Keys type: \\r\\n            o State\\r\\n            o uint256\\r\\n\\r\\n        value:\\r\\n           array of struct(s) \\r\\n     */\\r\\n    mapping (State=>WasteData[]) private _garbages;\\r\\n    \\r\\n    /**\\r\\n        @dev Mapping of Waste State -> user -> profile\\r\\n        Keys type: \\r\\n            o State\\r\\n            o address\\r\\n\\r\\n        value:\\r\\n            struct \\r\\n     */\\r\\n    mapping (Category=>mapping(address=>Profile)) profiles;\\r\\n\\r\\n    /**\\r\\n        @dev Sign up fees for different category.\\r\\n            @notice - It can be configured to suit any category.\\r\\n     */\\r\\n    mapping (Category=>uint256) public signUpFees;\\r\\n\\r\\n    ///@dev Rewards\\r\\n    // mapping(address=>uint) public rewards;\\r\\n\\r\\n\\r\\n    modifier validateWasteId(uint binId, uint wasteId, State state, string memory errorMessage) {\\r\\n        if(binId >= bins.length) revert InvalidBinID();\\r\\n        if(state == State.COLLECTED) {\\r\\n            if(wasteId >= bins[binId].bin.length) revert InvalidWasteId();\\r\\n        }\\r\\n        require(bins[binId].bin[wasteId].state == state, errorMessage);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    ///Checks user's existence\\r\\n    modifier isApproved(Category cat, address who) {\\r\\n        if(!_getApproval(cat, who)) revert UserAlreadyNotExist();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    ///@dev Validates category\\r\\n    modifier validateCategory(uint8 cat) {\\r\\n        require(cat < 4, \\\"Invalid category\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    //Checks that the size of wastes not greater than 50\\r\\n    modifier validateSize(uint[] memory wasteIDs, string[] memory wastedata) {\\r\\n        (uint8 low, uint8 high) = (0, 50);\\r\\n        wastedata.length == 0 ? require(\\r\\n            wasteIDs.length > low && wasteIDs.length <= high, \\r\\n            \\\"invalid\\\"\\r\\n        ) : require(wastedata.length > low && wastedata.length <= high, \\\"invalid\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor (address _token) { \\r\\n        token = _token;\\r\\n        newSignUpReward = 10 * (10 ** 18);\\r\\n        profiles[Category.BINOWNER][_msgSender()].approval = true;\\r\\n        formula[Share.COLLECTOR] = 65;\\r\\n        formula[Share.GENERATOR] = 10;\\r\\n        formula[Share.TEAM] = 25;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Sign up function. \\r\\n                o Caller must not already be a member. \\r\\n    */\\r\\n    function signUpAsWasteCollector() public {\\r\\n       require(!profiles[Category.COLLECTOR][_msgSender()].isRegistered, \\\"Already sign up\\\");\\r\\n       IBoolaLib.registerCollector(profiles, _msgSender());\\r\\n       IERC20(token).approve(_msgSender(), newSignUpReward);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Adds new bin.\\r\\n            @notice Caller must already be approves as BinOwner .\\r\\n    */\\r\\n    function addNewBin() public payable isApproved(Category.BINOWNER, _msgSender()) {\\r\\n        IBoolaLib.registerNewBin(bins, _msgSender());\\r\\n        binCounter ++;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Removes bin at binId.\\r\\n            @notice Caller must already be approves as BinOwner .\\r\\n    */\\r\\n    function removeBin(uint binId) public isApproved(Category.BINOWNER, _msgSender()) {\\r\\n        address _owner = _getBinOwner(binId);\\r\\n        if(_msgSender() != owner()) require(_msgSender() == _owner, \\\"Not Authorized\\\");\\r\\n        \\r\\n        IBoolaLib.removeBin(bins, binId);\\r\\n    }\\r\\n\\r\\n    /**@dev Returns list of wastes under each 'State'\\r\\n        i.e Generated waste data, Collected waste data, ...rest\\r\\n    */\\r\\n    function garbages(uint8 _category) public view returns(WasteData[] memory) {\\r\\n        require(_category < 3, \\\"Invalid selecetor\\\");\\r\\n        return _garbages[State(_category)];\\r\\n    }\\r\\n\\r\\n    ///@dev Return owner of bin at binId. \\r\\n    function _getBinOwner(uint binId) internal view returns(address) {\\r\\n        return bins[binId].owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Whitelist user\\r\\n            Note Admin privilege.\\r\\n                cat should reference the Category enum.\\r\\n     */\\r\\n    function whitelistuser(address who, uint8 category) public onlyOwner validateCategory(category) {\\r\\n        IBoolaLib.setStatus(profiles, who, true, Category(category));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Blacklist user\\r\\n            Note Admin privilege.\\r\\n                cat should reference the Category enum.\\r\\n     */\\r\\n    function blacklistUser(address who, uint8 category) public onlyOwner validateCategory(category){\\r\\n        IBoolaLib.setStatus(profiles, who, false, Category(category));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Set new fee\\r\\n            @notice To perfectly select the right category,\\r\\n                category parameter should not be greater than 4.\\r\\n     */\\r\\n    function setFee(uint8 category, uint newFee) public onlyOwner {\\r\\n        require(category < 4, \\\"Invalid category\\\");\\r\\n        signUpFees[Category(category)] = newFee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Generates new waste. \\r\\n        @notice Each waste is unique to another.\\r\\n            Note To successfully generate waste, bin id must be provided.\\r\\n                    This represents the destination where wastes are dumped.\\r\\n     */\\r\\n    function generateWaste(string memory _data) public isApproved(Category.GENERATOR, _msgSender()) {\\r\\n        State state = State.GENERATED;\\r\\n        totalWasteGenerated ++;\\r\\n        uint nonce = totalWasteGenerated;\\r\\n        IBoolaLib.portToMap(\\r\\n            _garbages, \\r\\n             WasteData(\\r\\n                keccak256(abi.encodePacked(bytes(_data), nonce)), \\r\\n                address(0), \\r\\n                _msgSender(), \\r\\n                address(0),\\r\\n                state\\r\\n            ), \\r\\n            state\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _empty() internal pure returns(Empty memory empty) {\\r\\n        uint[] memory wasteIds = new uint[](0);\\r\\n        string[] memory wastedata = new string[](0);\\r\\n        empty = Empty(wasteIds, wastedata);\\r\\n    }\\r\\n\\r\\n    ///@dev Generates multiple waste data\\r\\n    function generateMultipleWaste(string[] memory data) public validateSize(_empty().wasteIds, data) {\\r\\n        for (uint i=0; i < data.length; i++) {\\r\\n            generateWaste(data[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Gets approval for user 'who'\\r\\n            @param cat - Category of user e.g COLLECTOR etc\\r\\n            @param who - Address of user.\\r\\n    */\\r\\n    function _getApproval(Category cat, address who) internal view returns(bool) {\\r\\n        return profiles[cat][who].approval;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Collect waste.\\r\\n            Note : Only generated waste can be collected\\r\\n            @param binId - Bin where the waste is located.\\r\\n            @param wasteId - Which waste to collect.\\r\\n                    Note - Every waste is unique to another.\\r\\n                            To make purchase of manure easy, wastes are recycled\\r\\n                            in 50s.\\r\\n     */\\r\\n    function recycle(uint binId, uint wasteId) internal isApproved(Category.RECYCLER, _msgSender()) validateWasteId(binId, wasteId, State.COLLECTED, \\\"Invalid waste pointer\\\") {\\r\\n        WasteData memory outWaste = IBoolaLib.popFromArray(bins, binId, wasteId);\\r\\n        IBoolaLib.portToMap(_garbages, outWaste, State.RECYCLED);\\r\\n        uint amount = collectorReward;\\r\\n\\r\\n        (uint collector, uint generator, uint team) = IBoolaLib.split(formula, amount);\\r\\n        IERC20(token).approve(outWaste.collector, collector);\\r\\n        IERC20(token).approve(outWaste.generator, generator);\\r\\n        IERC20(token).approve(address(this), team);\\r\\n\\r\\n    }\\r\\n\\r\\n    ///@notice Can recycle wastes greater than 0 but less than 51\\r\\n    function recycleMultiple(uint binId, uint[] memory wasteIds) public validateSize(wasteIds, _empty().wastedata) {\\r\\n        for (uint i = 0; i < wasteIds.length; i++) {\\r\\n            recycle(binId, wasteIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /**@notice Withdraw reward if any {IBoola Token}\\r\\n        Note - Caller must have previous reward otherwise it fails.\\r\\n     */\\r\\n    function withdraw() public {\\r\\n        uint rewardBal = IERC20(token).allowance(address(this),_msgSender());\\r\\n        if(rewardBal == 0) revert NothingToWithdraw();\\r\\n        IERC20(token).transferFrom(address(this), _msgSender(), rewardBal);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Collect waste for disposal. \\r\\n            Note: Caller must be an approved waste collector.\\r\\n                must supply the following:\\r\\n                    o @param binId - Location of bin to deposit collected waste. ie bin index\\r\\n                    o @param wasteId - Identifier for waste collected.\\r\\n     */\\r\\n\\r\\n    function collectWaste(uint binId, uint wasteId) public isApproved(Category.COLLECTOR, _msgSender()) validateWasteId(binId, wasteId, State.GENERATED, \\\"Invalid waste pointer\\\") {\\r\\n        require(profiles[Category.COLLECTOR][_msgSender()].isRegistered,\\\"Not allowed\\\");\\r\\n\\r\\n        WasteData memory outWaste = IBoolaLib.popFromMapping(_garbages, wasteId, State.GENERATED);\\r\\n        IBoolaLib.portToArray(bins, binId, outWaste, State.COLLECTED);\\r\\n\\r\\n    }\\r\\n\\r\\n    //See `collectWaste()` except that this runs mulitple time.\\r\\n    function collectMultipleWaste(uint binId, uint[] memory wasteIds) public validateSize(wasteIds,_empty().wastedata) {\\r\\n        for (uint i = 0; i < wasteIds.length; i++) {\\r\\n            collectWaste(binId, wasteIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**@notice Buy recycled waste in form of manure\\r\\n        NOTE: Only recycled waste can be bought.\\r\\n        If available manure cannot cover requested volume, buyer simply \\r\\n        purchased available volume.\\r\\n     */\\r\\n    function buyRecycled(uint volume) public payable {\\r\\n        uint len = _garbages[State.RECYCLED].length;\\r\\n        uint actualVolume;\\r\\n        State _s = State.RECYCLED;\\r\\n        require(len > 0 && len >= volume, \\\"Not available\\\");\\r\\n        for(uint i = 0; i < volume; i++) {\\r\\n            WasteData memory wd = _garbages[_s][i];\\r\\n            if(wd.recycler != address(0)) {\\r\\n                actualVolume ++;\\r\\n                profiles[Category.SOLD][_msgSender()].purchased.push(WasteData(\\r\\n                    wd.value,\\r\\n                    wd.collector,\\r\\n                    wd.generator,\\r\\n                    wd.recycler,\\r\\n                    wd.state\\r\\n                ));\\r\\n                delete _garbages[_s][i];\\r\\n            }\\r\\n        }\\r\\n        uint amtToPay = price * actualVolume;\\r\\n        require(msg.value >= amtToPay, \\\"IValue\\\");\\r\\n        \\r\\n     }\\r\\n\\r\\n    ///@dev Sets new price for recycled waste.\\r\\n    function setPrice(uint newPrice) public onlyOwner {\\r\\n        price = newPrice;\\r\\n    }\\r\\n\\r\\n\\r\\n    ///@dev Sets new sign up reward. Note With access modifier\\r\\n    function setSignUpReward(uint newReward) public onlyOwner{\\r\\n        newSignUpReward = newReward;\\r\\n    }\\r\\n\\r\\n    ///@dev Sets new sign up reward. Note With access modifier\\r\\n    function setCollectorUpReward(uint newReward) public onlyOwner{\\r\\n        collectorReward = newReward;\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xe9c6308cd0170828d91de300dc117779f7ca18bab2c009fcd3acb91a0473f54c\",\"license\":\"GPL-3.0\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "Ownable": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
            "kind": "dev",
            "methods": {
              "constructor": {
                "details": "Initializes the contract setting the deployer as the initial owner."
              },
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "owner()": "8da5cb5b",
              "renounceOwnership()": "715018a6",
              "transferOwnership(address)": "f2fde38b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verify/IBoolaContractV.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verify/IBoolaContractV.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ninterface Common {\\r\\n  enum State { GENERATED, COLLECTED, RECYCLED }\\r\\n  enum Category { COLLECTOR, GENERATOR, RECYCLER, BINOWNER, SOLD }\\r\\n  enum Share { COLLECTOR, GENERATOR, TEAM }\\r\\n\\r\\n  error UserAlreadyExist();\\r\\n  error UserAlreadyNotExist();\\r\\n  error InvalidBinID();\\r\\n  error EmptyBin();\\r\\n  error CannotDeleteBinInEngagedMode();\\r\\n  error InvalidWasteId();\\r\\n  error NothingToWithdraw();\\r\\n  error MaxWasteTransportExceeded();\\r\\n\\r\\n  struct WasteData {\\r\\n    bytes32 value;\\r\\n    address collector;\\r\\n    address generator;\\r\\n    address recycler;\\r\\n    State state;\\r\\n  }\\r\\n\\r\\n  struct Profile {\\r\\n    uint32 transactionTime;\\r\\n    uint wasteCount;\\r\\n    bool approval;\\r\\n    bool isRegistered;\\r\\n    WasteData[] purchased;\\r\\n  }\\r\\n\\r\\n  struct BinData {\\r\\n    WasteData[] bin;\\r\\n    address owner;\\r\\n  }\\r\\n\\r\\n  struct Empty {\\r\\n    uint[] wasteIds;\\r\\n    string[] wastedata;\\r\\n  }\\r\\n\\r\\n}\\r\\n\\r\\nlibrary IBoolaLib {\\r\\n  /**\\r\\n    @dev Sign up new collector\\r\\n      @param self - Storage\\r\\n      @param newCollector - Address of new Collector to add.\\r\\n   */\\r\\n\\r\\n  function registerCollector(mapping (Common.Category=>mapping(address=>Common.Profile)) storage self, address newCollector) internal {\\r\\n    Common.Category _c = Common.Category.COLLECTOR;\\r\\n    self[_c][newCollector].transactionTime = _now();\\r\\n    self[_c][newCollector].wasteCount = 0;\\r\\n    self[_c][newCollector].approval = false;\\r\\n    self[_c][newCollector].isRegistered = true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Dual function: \\r\\n            o Recycles collected waste.\\r\\n            o Generate new waste.\\r\\n   */\\r\\n  function portToMap(\\r\\n    mapping (Common.State=>Common.WasteData[]) storage self, \\r\\n    Common.WasteData memory inWaste,\\r\\n    Common.State state\\r\\n  ) internal {\\r\\n    self[state].push(Common.WasteData(\\r\\n        inWaste.value,\\r\\n        inWaste.collector,\\r\\n        inWaste.generator,\\r\\n        inWaste.recycler,\\r\\n        state\\r\\n      )\\r\\n    );\\r\\n  }\\r\\n\\r\\n  ///@dev Moves waste to bin\\r\\n  function portToArray(Common.BinData[] storage self, uint binId, Common.WasteData memory inWaste, Common.State state) internal {\\r\\n    self[binId].bin.push(Common.WasteData(\\r\\n      inWaste.value,\\r\\n      inWaste.collector,\\r\\n      inWaste.generator,\\r\\n      inWaste.recycler,\\r\\n      state\\r\\n    )\\r\\n    );\\r\\n  }\\r\\n\\r\\n  ///@dev Removes waste at 'wasteId' from bin at 'binId' in bin array at hashmap 'self'\\r\\n  function popFromMapping(mapping (Common.State=>Common.WasteData[]) storage self, uint wasteId, Common.State state) internal returns(Common.WasteData memory _waste) {\\r\\n    _waste = self[state][wasteId];\\r\\n    delete self[state][wasteId];\\r\\n  }\\r\\n\\r\\n  ///@dev Removes waste at 'wasteId' from bin at 'binId' in bin array 'self'\\r\\n  function popFromArray(Common.BinData[] storage self, uint binId, uint wasteId) internal returns(Common.WasteData memory _waste) {\\r\\n    _waste = self[binId].bin[wasteId];\\r\\n    delete self[binId].bin[wasteId];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Sets collectors status to either true or false\\r\\n    @param value - Value to set status to.\\r\\n    @param who - User to set status for.\\r\\n    @param self - storage.\\r\\n      Note : If value is true, collector's status must be false vice versa.\\r\\n   */\\r\\n  function setStatus(mapping (Common.Category=>mapping(address=>Common.Profile)) storage self, address who, bool value, Common.Category cat) internal {\\r\\n    bool prevStatus = _previousStatus(self, who, cat);\\r\\n    if(value) {\\r\\n      if(prevStatus) revert Common.UserAlreadyExist();\\r\\n      self[cat][who].approval = true;\\r\\n    } else {\\r\\n      if(!prevStatus) revert Common.UserAlreadyNotExist();\\r\\n      self[cat][who].approval = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _previousStatus(mapping (Common.Category=>mapping(address=>Common.Profile)) storage self, address who, Common.Category cat) private view returns(bool) {\\r\\n    return self[cat][who].approval;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Registers new bin with owner.\\r\\n        @param owner - Bin Owner\\r\\n        @param self - Storage\\r\\n        @return newId \\r\\n   */\\r\\n  function registerNewBin(Common.BinData[] storage self, address owner) internal returns(uint newId) {\\r\\n    newId = self.length;\\r\\n    self.push();\\r\\n    self[newId].owner = owner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev Removes bin from bin array.\\r\\n      @notice binId must be less than the bin array at any time since arrays are zero-based.\\r\\n      @param self - Storage\\r\\n   */\\r\\n  function removeBin(Common.BinData[] storage self, uint binId) internal {\\r\\n    (uint len, Common.BinData memory wasteBin)  = (self.length, self[binId]);\\r\\n    if(wasteBin.bin.length == 0) revert Common.EmptyBin();\\r\\n    for(uint i = 0; i < len; i++) {\\r\\n      if(wasteBin.bin[i].state < Common.State.RECYCLED) {\\r\\n        revert Common.CannotDeleteBinInEngagedMode();\\r\\n      }\\r\\n    } \\r\\n    delete self[binId];\\r\\n  }\\r\\n\\r\\n  function split(mapping (Common.Share=>uint8) storage self, uint amount) internal view returns(uint collector, uint generator, uint team) {\\r\\n    collector = (self[Common.Share.COLLECTOR] * amount) / 100;\\r\\n    generator = (self[Common.Share.GENERATOR] * amount) / 100;\\r\\n    team = (self[Common.Share.TEAM] * amount) / 100;\\r\\n\\r\\n  }\\r\\n\\r\\n  function _now() internal view returns(uint32) { return uint32(block.timestamp); }\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Main\\r\\n * @author Bobeu: https://github.com/bobeu\\r\\n * A smart contract that will tokenize the disposal and collection of waste. \\r\\n    Users get a token when they dispose of their waste in a waste bin, collectors \\r\\n    get token for collecting waste and taking them to the waste recyclers \\r\\n\\r\\n    The process of tokenization happens when the waste drops in the waste bin. Every\\r\\n    waste bin has a unique wallet ID which will receive the token at the end of evacuation.\\r\\n    The owners of the waste bin will have a DAO. \\r\\n\\r\\n    *Wallet \\r\\n    *Token (iBoola token) which would be paired against either Avalanche, Celo or Polygon \\r\\n    *New users get 10 $IBT after sign up \\r\\n    *Community of waste bins will have a DAO \\r\\n    Waste generators get 10% collectors get 65 while the iBoola team gets 25% \\r\\n    Decimals: use standard 18 decimals \\r\\n\\r\\n    Mintable: not mintable\\r\\n\\r\\n    Ownership privilege :  30% locked for 5 years, 20% for dev team 45% for  initial circulation, \\r\\n    5% for presale \\r\\n\\r\\n    PSEUDO\\r\\n    ======\\r\\n    Parties:\\r\\n        o Waste generators.\\r\\n        o Collectors.\\r\\n        o Recyclers.\\r\\n\\r\\n    o When waste is disposed or evacuated, then reward collectors.\\r\\n    o Each waste bin has a unique identifer and an owner.\\r\\n    o On sign up, user gets 10 $IBT Token.\\r\\n    o Waste collectors own a DAO.\\r\\n    o Waste bin owners own a DAO.\\r\\n    o Reward sharing formula Note - It is configurable. The owner account is able to \\r\\n        set each of these fields.\\r\\n        - Waste generators 10%.\\r\\n        - Collectors 65%.\\r\\n        - Team 25%.\\r\\n */\\r\\ncontract IBoolaContractV is Context, Common, Ownable {\\r\\n\\r\\n    ///@dev New sign up reward\\r\\n    uint public newSignUpReward;\\r\\n\\r\\n    ///@dev iBoola Token\\r\\n    address public token;\\r\\n\\r\\n    ///@dev Total waste generated to date\\r\\n    uint256 public totalWasteGenerated;\\r\\n\\r\\n    ///@dev Collector reward\\r\\n    uint public collectorReward;\\r\\n\\r\\n    ///@dev Total bin registered to date\\r\\n    uint public binCounter;\\r\\n\\r\\n    ///@dev Price of recycled waste\\r\\n    uint public price;\\r\\n\\r\\n    /**\\r\\n        @dev Array of bins \\r\\n            { Contain bins which contain collected wastes which contains wastedata}\\r\\n            @notice Bins in this list are owned by addresses.\\r\\n    */\\r\\n    BinData[] public bins;\\r\\n    \\r\\n    mapping (Share=>uint8) public formula;\\r\\n    \\r\\n\\r\\n    /**\\r\\n        @dev Mapping of Generated and Recycled Waste State -> binId (binCounter) -> WasteData\\r\\n        Keys type: \\r\\n            o State\\r\\n            o uint256\\r\\n\\r\\n        value:\\r\\n           array of struct(s) \\r\\n     */\\r\\n    mapping (State=>WasteData[]) private _garbages;\\r\\n    \\r\\n    /**\\r\\n        @dev Mapping of Waste State -> user -> profile\\r\\n        Keys type: \\r\\n            o State\\r\\n            o address\\r\\n\\r\\n        value:\\r\\n            struct \\r\\n     */\\r\\n    mapping (Category=>mapping(address=>Profile)) profiles;\\r\\n\\r\\n    /**\\r\\n        @dev Sign up fees for different category.\\r\\n            @notice - It can be configured to suit any category.\\r\\n     */\\r\\n    mapping (Category=>uint256) public signUpFees;\\r\\n\\r\\n    ///@dev Rewards\\r\\n    // mapping(address=>uint) public rewards;\\r\\n\\r\\n\\r\\n    modifier validateWasteId(uint binId, uint wasteId, State state, string memory errorMessage) {\\r\\n        if(binId >= bins.length) revert InvalidBinID();\\r\\n        if(state == State.COLLECTED) {\\r\\n            if(wasteId >= bins[binId].bin.length) revert InvalidWasteId();\\r\\n        }\\r\\n        require(bins[binId].bin[wasteId].state == state, errorMessage);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    ///Checks user's existence\\r\\n    modifier isApproved(Category cat, address who) {\\r\\n        if(!_getApproval(cat, who)) revert UserAlreadyNotExist();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    ///@dev Validates category\\r\\n    modifier validateCategory(uint8 cat) {\\r\\n        require(cat < 4, \\\"Invalid category\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    //Checks that the size of wastes not greater than 50\\r\\n    modifier validateSize(uint[] memory wasteIDs, string[] memory wastedata) {\\r\\n        (uint8 low, uint8 high) = (0, 50);\\r\\n        wastedata.length == 0 ? require(\\r\\n            wasteIDs.length > low && wasteIDs.length <= high, \\r\\n            \\\"invalid\\\"\\r\\n        ) : require(wastedata.length > low && wastedata.length <= high, \\\"invalid\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor (address _token) { \\r\\n        token = _token;\\r\\n        newSignUpReward = 10 * (10 ** 18);\\r\\n        profiles[Category.BINOWNER][_msgSender()].approval = true;\\r\\n        formula[Share.COLLECTOR] = 65;\\r\\n        formula[Share.GENERATOR] = 10;\\r\\n        formula[Share.TEAM] = 25;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Sign up function. \\r\\n                o Caller must not already be a member. \\r\\n    */\\r\\n    function signUpAsWasteCollector() public {\\r\\n       require(!profiles[Category.COLLECTOR][_msgSender()].isRegistered, \\\"Already sign up\\\");\\r\\n       IBoolaLib.registerCollector(profiles, _msgSender());\\r\\n       IERC20(token).approve(_msgSender(), newSignUpReward);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Adds new bin.\\r\\n            @notice Caller must already be approves as BinOwner .\\r\\n    */\\r\\n    function addNewBin() public payable isApproved(Category.BINOWNER, _msgSender()) {\\r\\n        IBoolaLib.registerNewBin(bins, _msgSender());\\r\\n        binCounter ++;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Removes bin at binId.\\r\\n            @notice Caller must already be approves as BinOwner .\\r\\n    */\\r\\n    function removeBin(uint binId) public isApproved(Category.BINOWNER, _msgSender()) {\\r\\n        address _owner = _getBinOwner(binId);\\r\\n        if(_msgSender() != owner()) require(_msgSender() == _owner, \\\"Not Authorized\\\");\\r\\n        \\r\\n        IBoolaLib.removeBin(bins, binId);\\r\\n    }\\r\\n\\r\\n    /**@dev Returns list of wastes under each 'State'\\r\\n        i.e Generated waste data, Collected waste data, ...rest\\r\\n    */\\r\\n    function garbages(uint8 _category) public view returns(WasteData[] memory) {\\r\\n        require(_category < 3, \\\"Invalid selecetor\\\");\\r\\n        return _garbages[State(_category)];\\r\\n    }\\r\\n\\r\\n    ///@dev Return owner of bin at binId. \\r\\n    function _getBinOwner(uint binId) internal view returns(address) {\\r\\n        return bins[binId].owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Whitelist user\\r\\n            Note Admin privilege.\\r\\n                cat should reference the Category enum.\\r\\n     */\\r\\n    function whitelistuser(address who, uint8 category) public onlyOwner validateCategory(category) {\\r\\n        IBoolaLib.setStatus(profiles, who, true, Category(category));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Blacklist user\\r\\n            Note Admin privilege.\\r\\n                cat should reference the Category enum.\\r\\n     */\\r\\n    function blacklistUser(address who, uint8 category) public onlyOwner validateCategory(category){\\r\\n        IBoolaLib.setStatus(profiles, who, false, Category(category));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Set new fee\\r\\n            @notice To perfectly select the right category,\\r\\n                category parameter should not be greater than 4.\\r\\n     */\\r\\n    function setFee(uint8 category, uint newFee) public onlyOwner {\\r\\n        require(category < 4, \\\"Invalid category\\\");\\r\\n        signUpFees[Category(category)] = newFee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Generates new waste. \\r\\n        @notice Each waste is unique to another.\\r\\n            Note To successfully generate waste, bin id must be provided.\\r\\n                    This represents the destination where wastes are dumped.\\r\\n     */\\r\\n    function generateWaste(string memory _data) public isApproved(Category.GENERATOR, _msgSender()) {\\r\\n        State state = State.GENERATED;\\r\\n        totalWasteGenerated ++;\\r\\n        uint nonce = totalWasteGenerated;\\r\\n        IBoolaLib.portToMap(\\r\\n            _garbages, \\r\\n             WasteData(\\r\\n                keccak256(abi.encodePacked(bytes(_data), nonce)), \\r\\n                address(0), \\r\\n                _msgSender(), \\r\\n                address(0),\\r\\n                state\\r\\n            ), \\r\\n            state\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _empty() internal pure returns(Empty memory empty) {\\r\\n        uint[] memory wasteIds = new uint[](0);\\r\\n        string[] memory wastedata = new string[](0);\\r\\n        empty = Empty(wasteIds, wastedata);\\r\\n    }\\r\\n\\r\\n    ///@dev Generates multiple waste data\\r\\n    function generateMultipleWaste(string[] memory data) public validateSize(_empty().wasteIds, data) {\\r\\n        for (uint i=0; i < data.length; i++) {\\r\\n            generateWaste(data[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Gets approval for user 'who'\\r\\n            @param cat - Category of user e.g COLLECTOR etc\\r\\n            @param who - Address of user.\\r\\n    */\\r\\n    function _getApproval(Category cat, address who) internal view returns(bool) {\\r\\n        return profiles[cat][who].approval;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Collect waste.\\r\\n            Note : Only generated waste can be collected\\r\\n            @param binId - Bin where the waste is located.\\r\\n            @param wasteId - Which waste to collect.\\r\\n                    Note - Every waste is unique to another.\\r\\n                            To make purchase of manure easy, wastes are recycled\\r\\n                            in 50s.\\r\\n     */\\r\\n    function recycle(uint binId, uint wasteId) internal isApproved(Category.RECYCLER, _msgSender()) validateWasteId(binId, wasteId, State.COLLECTED, \\\"Invalid waste pointer\\\") {\\r\\n        WasteData memory outWaste = IBoolaLib.popFromArray(bins, binId, wasteId);\\r\\n        IBoolaLib.portToMap(_garbages, outWaste, State.RECYCLED);\\r\\n        uint amount = collectorReward;\\r\\n\\r\\n        (uint collector, uint generator, uint team) = IBoolaLib.split(formula, amount);\\r\\n        IERC20(token).approve(outWaste.collector, collector);\\r\\n        IERC20(token).approve(outWaste.generator, generator);\\r\\n        IERC20(token).approve(address(this), team);\\r\\n\\r\\n    }\\r\\n\\r\\n    ///@notice Can recycle wastes greater than 0 but less than 51\\r\\n    function recycleMultiple(uint binId, uint[] memory wasteIds) public validateSize(wasteIds, _empty().wastedata) {\\r\\n        for (uint i = 0; i < wasteIds.length; i++) {\\r\\n            recycle(binId, wasteIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /**@notice Withdraw reward if any {IBoola Token}\\r\\n        Note - Caller must have previous reward otherwise it fails.\\r\\n     */\\r\\n    function withdraw() public {\\r\\n        uint rewardBal = IERC20(token).allowance(address(this),_msgSender());\\r\\n        if(rewardBal == 0) revert NothingToWithdraw();\\r\\n        IERC20(token).transferFrom(address(this), _msgSender(), rewardBal);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Collect waste for disposal. \\r\\n            Note: Caller must be an approved waste collector.\\r\\n                must supply the following:\\r\\n                    o @param binId - Location of bin to deposit collected waste. ie bin index\\r\\n                    o @param wasteId - Identifier for waste collected.\\r\\n     */\\r\\n\\r\\n    function collectWaste(uint binId, uint wasteId) public isApproved(Category.COLLECTOR, _msgSender()) validateWasteId(binId, wasteId, State.GENERATED, \\\"Invalid waste pointer\\\") {\\r\\n        require(profiles[Category.COLLECTOR][_msgSender()].isRegistered,\\\"Not allowed\\\");\\r\\n\\r\\n        WasteData memory outWaste = IBoolaLib.popFromMapping(_garbages, wasteId, State.GENERATED);\\r\\n        IBoolaLib.portToArray(bins, binId, outWaste, State.COLLECTED);\\r\\n\\r\\n    }\\r\\n\\r\\n    //See `collectWaste()` except that this runs mulitple time.\\r\\n    function collectMultipleWaste(uint binId, uint[] memory wasteIds) public validateSize(wasteIds,_empty().wastedata) {\\r\\n        for (uint i = 0; i < wasteIds.length; i++) {\\r\\n            collectWaste(binId, wasteIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**@notice Buy recycled waste in form of manure\\r\\n        NOTE: Only recycled waste can be bought.\\r\\n        If available manure cannot cover requested volume, buyer simply \\r\\n        purchased available volume.\\r\\n     */\\r\\n    function buyRecycled(uint volume) public payable {\\r\\n        uint len = _garbages[State.RECYCLED].length;\\r\\n        uint actualVolume;\\r\\n        State _s = State.RECYCLED;\\r\\n        require(len > 0 && len >= volume, \\\"Not available\\\");\\r\\n        for(uint i = 0; i < volume; i++) {\\r\\n            WasteData memory wd = _garbages[_s][i];\\r\\n            if(wd.recycler != address(0)) {\\r\\n                actualVolume ++;\\r\\n                profiles[Category.SOLD][_msgSender()].purchased.push(WasteData(\\r\\n                    wd.value,\\r\\n                    wd.collector,\\r\\n                    wd.generator,\\r\\n                    wd.recycler,\\r\\n                    wd.state\\r\\n                ));\\r\\n                delete _garbages[_s][i];\\r\\n            }\\r\\n        }\\r\\n        uint amtToPay = price * actualVolume;\\r\\n        require(msg.value >= amtToPay, \\\"IValue\\\");\\r\\n        \\r\\n     }\\r\\n\\r\\n    ///@dev Sets new price for recycled waste.\\r\\n    function setPrice(uint newPrice) public onlyOwner {\\r\\n        price = newPrice;\\r\\n    }\\r\\n\\r\\n\\r\\n    ///@dev Sets new sign up reward. Note With access modifier\\r\\n    function setSignUpReward(uint newReward) public onlyOwner{\\r\\n        newSignUpReward = newReward;\\r\\n    }\\r\\n\\r\\n    ///@dev Sets new sign up reward. Note With access modifier\\r\\n    function setCollectorUpReward(uint newReward) public onlyOwner{\\r\\n        collectorReward = newReward;\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xe9c6308cd0170828d91de300dc117779f7ca18bab2c009fcd3acb91a0473f54c\",\"license\":\"GPL-3.0\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 630,
                "contract": "contracts/verify/IBoolaContractV.sol:Ownable",
                "label": "_owner",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              }
            }
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      }
    },
    "sources": {
      "contracts/verify/IBoolaContractV.sol": {
        "ast": {
          "absolutePath": "contracts/verify/IBoolaContractV.sol",
          "exportedSymbols": {
            "Common": [
              71
            ],
            "Context": [
              625
            ],
            "IBoolaContractV": [
              1736
            ],
            "IBoolaLib": [
              529
            ],
            "IERC20": [
              605
            ],
            "Ownable": [
              735
            ]
          },
          "id": 1737,
          "license": "GPL-3.0",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "39:23:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "fullyImplemented": true,
              "id": 71,
              "linearizedBaseContracts": [
                71
              ],
              "name": "Common",
              "nameLocation": "78:6:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "canonicalName": "Common.State",
                  "id": 5,
                  "members": [
                    {
                      "id": 2,
                      "name": "GENERATED",
                      "nameLocation": "103:9:0",
                      "nodeType": "EnumValue",
                      "src": "103:9:0"
                    },
                    {
                      "id": 3,
                      "name": "COLLECTED",
                      "nameLocation": "114:9:0",
                      "nodeType": "EnumValue",
                      "src": "114:9:0"
                    },
                    {
                      "id": 4,
                      "name": "RECYCLED",
                      "nameLocation": "125:8:0",
                      "nodeType": "EnumValue",
                      "src": "125:8:0"
                    }
                  ],
                  "name": "State",
                  "nameLocation": "95:5:0",
                  "nodeType": "EnumDefinition",
                  "src": "90:45:0"
                },
                {
                  "canonicalName": "Common.Category",
                  "id": 11,
                  "members": [
                    {
                      "id": 6,
                      "name": "COLLECTOR",
                      "nameLocation": "155:9:0",
                      "nodeType": "EnumValue",
                      "src": "155:9:0"
                    },
                    {
                      "id": 7,
                      "name": "GENERATOR",
                      "nameLocation": "166:9:0",
                      "nodeType": "EnumValue",
                      "src": "166:9:0"
                    },
                    {
                      "id": 8,
                      "name": "RECYCLER",
                      "nameLocation": "177:8:0",
                      "nodeType": "EnumValue",
                      "src": "177:8:0"
                    },
                    {
                      "id": 9,
                      "name": "BINOWNER",
                      "nameLocation": "187:8:0",
                      "nodeType": "EnumValue",
                      "src": "187:8:0"
                    },
                    {
                      "id": 10,
                      "name": "SOLD",
                      "nameLocation": "197:4:0",
                      "nodeType": "EnumValue",
                      "src": "197:4:0"
                    }
                  ],
                  "name": "Category",
                  "nameLocation": "144:8:0",
                  "nodeType": "EnumDefinition",
                  "src": "139:64:0"
                },
                {
                  "canonicalName": "Common.Share",
                  "id": 15,
                  "members": [
                    {
                      "id": 12,
                      "name": "COLLECTOR",
                      "nameLocation": "220:9:0",
                      "nodeType": "EnumValue",
                      "src": "220:9:0"
                    },
                    {
                      "id": 13,
                      "name": "GENERATOR",
                      "nameLocation": "231:9:0",
                      "nodeType": "EnumValue",
                      "src": "231:9:0"
                    },
                    {
                      "id": 14,
                      "name": "TEAM",
                      "nameLocation": "242:4:0",
                      "nodeType": "EnumValue",
                      "src": "242:4:0"
                    }
                  ],
                  "name": "Share",
                  "nameLocation": "212:5:0",
                  "nodeType": "EnumDefinition",
                  "src": "207:41:0"
                },
                {
                  "id": 17,
                  "name": "UserAlreadyExist",
                  "nameLocation": "260:16:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 16,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "276:2:0"
                  },
                  "src": "254:25:0"
                },
                {
                  "id": 19,
                  "name": "UserAlreadyNotExist",
                  "nameLocation": "289:19:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 18,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "308:2:0"
                  },
                  "src": "283:28:0"
                },
                {
                  "id": 21,
                  "name": "InvalidBinID",
                  "nameLocation": "321:12:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 20,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "333:2:0"
                  },
                  "src": "315:21:0"
                },
                {
                  "id": 23,
                  "name": "EmptyBin",
                  "nameLocation": "346:8:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 22,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "354:2:0"
                  },
                  "src": "340:17:0"
                },
                {
                  "id": 25,
                  "name": "CannotDeleteBinInEngagedMode",
                  "nameLocation": "367:28:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 24,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "395:2:0"
                  },
                  "src": "361:37:0"
                },
                {
                  "id": 27,
                  "name": "InvalidWasteId",
                  "nameLocation": "408:14:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 26,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "422:2:0"
                  },
                  "src": "402:23:0"
                },
                {
                  "id": 29,
                  "name": "NothingToWithdraw",
                  "nameLocation": "435:17:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 28,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "452:2:0"
                  },
                  "src": "429:26:0"
                },
                {
                  "id": 31,
                  "name": "MaxWasteTransportExceeded",
                  "nameLocation": "465:25:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 30,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "490:2:0"
                  },
                  "src": "459:34:0"
                },
                {
                  "canonicalName": "Common.WasteData",
                  "id": 43,
                  "members": [
                    {
                      "constant": false,
                      "id": 33,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "531:5:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 43,
                      "src": "523:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 32,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "523:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 35,
                      "mutability": "mutable",
                      "name": "collector",
                      "nameLocation": "551:9:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 43,
                      "src": "543:17:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 34,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "543:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 37,
                      "mutability": "mutable",
                      "name": "generator",
                      "nameLocation": "575:9:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 43,
                      "src": "567:17:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 36,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "567:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 39,
                      "mutability": "mutable",
                      "name": "recycler",
                      "nameLocation": "599:8:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 43,
                      "src": "591:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 38,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "591:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 42,
                      "mutability": "mutable",
                      "name": "state",
                      "nameLocation": "620:5:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 43,
                      "src": "614:11:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_State_$5",
                        "typeString": "enum Common.State"
                      },
                      "typeName": {
                        "id": 41,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 40,
                          "name": "State",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 5,
                          "src": "614:5:0"
                        },
                        "referencedDeclaration": 5,
                        "src": "614:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_State_$5",
                          "typeString": "enum Common.State"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "WasteData",
                  "nameLocation": "506:9:0",
                  "nodeType": "StructDefinition",
                  "scope": 71,
                  "src": "499:132:0",
                  "visibility": "public"
                },
                {
                  "canonicalName": "Common.Profile",
                  "id": 56,
                  "members": [
                    {
                      "constant": false,
                      "id": 45,
                      "mutability": "mutable",
                      "name": "transactionTime",
                      "nameLocation": "666:15:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 56,
                      "src": "659:22:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      },
                      "typeName": {
                        "id": 44,
                        "name": "uint32",
                        "nodeType": "ElementaryTypeName",
                        "src": "659:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 47,
                      "mutability": "mutable",
                      "name": "wasteCount",
                      "nameLocation": "693:10:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 56,
                      "src": "688:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 46,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "688:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 49,
                      "mutability": "mutable",
                      "name": "approval",
                      "nameLocation": "715:8:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 56,
                      "src": "710:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 48,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "710:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 51,
                      "mutability": "mutable",
                      "name": "isRegistered",
                      "nameLocation": "735:12:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 56,
                      "src": "730:17:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 50,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "730:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 55,
                      "mutability": "mutable",
                      "name": "purchased",
                      "nameLocation": "766:9:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 56,
                      "src": "754:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_ptr",
                        "typeString": "struct Common.WasteData[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 53,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 52,
                            "name": "WasteData",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 43,
                            "src": "754:9:0"
                          },
                          "referencedDeclaration": 43,
                          "src": "754:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_WasteData_$43_storage_ptr",
                            "typeString": "struct Common.WasteData"
                          }
                        },
                        "id": 54,
                        "nodeType": "ArrayTypeName",
                        "src": "754:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_ptr",
                          "typeString": "struct Common.WasteData[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "Profile",
                  "nameLocation": "644:7:0",
                  "nodeType": "StructDefinition",
                  "scope": 71,
                  "src": "637:144:0",
                  "visibility": "public"
                },
                {
                  "canonicalName": "Common.BinData",
                  "id": 63,
                  "members": [
                    {
                      "constant": false,
                      "id": 60,
                      "mutability": "mutable",
                      "name": "bin",
                      "nameLocation": "821:3:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 63,
                      "src": "809:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_ptr",
                        "typeString": "struct Common.WasteData[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 58,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 57,
                            "name": "WasteData",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 43,
                            "src": "809:9:0"
                          },
                          "referencedDeclaration": 43,
                          "src": "809:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_WasteData_$43_storage_ptr",
                            "typeString": "struct Common.WasteData"
                          }
                        },
                        "id": 59,
                        "nodeType": "ArrayTypeName",
                        "src": "809:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_ptr",
                          "typeString": "struct Common.WasteData[]"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 62,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "839:5:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 63,
                      "src": "831:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 61,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "831:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "BinData",
                  "nameLocation": "794:7:0",
                  "nodeType": "StructDefinition",
                  "scope": 71,
                  "src": "787:63:0",
                  "visibility": "public"
                },
                {
                  "canonicalName": "Common.Empty",
                  "id": 70,
                  "members": [
                    {
                      "constant": false,
                      "id": 66,
                      "mutability": "mutable",
                      "name": "wasteIds",
                      "nameLocation": "883:8:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 70,
                      "src": "876:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                        "typeString": "uint256[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 64,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "876:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 65,
                        "nodeType": "ArrayTypeName",
                        "src": "876:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                          "typeString": "uint256[]"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 69,
                      "mutability": "mutable",
                      "name": "wastedata",
                      "nameLocation": "907:9:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 70,
                      "src": "898:18:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                        "typeString": "string[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 67,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "898:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "id": 68,
                        "nodeType": "ArrayTypeName",
                        "src": "898:8:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                          "typeString": "string[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "Empty",
                  "nameLocation": "863:5:0",
                  "nodeType": "StructDefinition",
                  "scope": 71,
                  "src": "856:66:0",
                  "visibility": "public"
                }
              ],
              "scope": 1737,
              "src": "68:859:0",
              "usedErrors": [
                17,
                19,
                21,
                23,
                25,
                27,
                29,
                31
              ]
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "fullyImplemented": true,
              "id": 529,
              "linearizedBaseContracts": [
                529
              ],
              "name": "IBoolaLib",
              "nameLocation": "939:9:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 131,
                    "nodeType": "Block",
                    "src": "1225:252:0",
                    "statements": [
                      {
                        "assignments": [
                          89
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 89,
                            "mutability": "mutable",
                            "name": "_c",
                            "nameLocation": "1248:2:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 131,
                            "src": "1232:18:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_Category_$11",
                              "typeString": "enum Common.Category"
                            },
                            "typeName": {
                              "id": 88,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 87,
                                "name": "Common.Category",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 11,
                                "src": "1232:15:0"
                              },
                              "referencedDeclaration": 11,
                              "src": "1232:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Category_$11",
                                "typeString": "enum Common.Category"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 93,
                        "initialValue": {
                          "expression": {
                            "expression": {
                              "id": 90,
                              "name": "Common",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 71,
                              "src": "1253:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_Common_$71_$",
                                "typeString": "type(contract Common)"
                              }
                            },
                            "id": 91,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "Category",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 11,
                            "src": "1253:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Category_$11_$",
                              "typeString": "type(enum Common.Category)"
                            }
                          },
                          "id": 92,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "COLLECTOR",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 6,
                          "src": "1253:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Category_$11",
                            "typeString": "enum Common.Category"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1232:46:0"
                      },
                      {
                        "expression": {
                          "id": 102,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "baseExpression": {
                                  "id": 94,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 80,
                                  "src": "1285:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$",
                                    "typeString": "mapping(enum Common.Category => mapping(address => struct Common.Profile storage ref))"
                                  }
                                },
                                "id": 97,
                                "indexExpression": {
                                  "id": 95,
                                  "name": "_c",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 89,
                                  "src": "1290:2:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_Category_$11",
                                    "typeString": "enum Common.Category"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1285:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$",
                                  "typeString": "mapping(address => struct Common.Profile storage ref)"
                                }
                              },
                              "id": 98,
                              "indexExpression": {
                                "id": 96,
                                "name": "newCollector",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 82,
                                "src": "1294:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1285:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Profile_$56_storage",
                                "typeString": "struct Common.Profile storage ref"
                              }
                            },
                            "id": 99,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "transactionTime",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 45,
                            "src": "1285:38:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 100,
                              "name": "_now",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 528,
                              "src": "1326:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_uint32_$",
                                "typeString": "function () view returns (uint32)"
                              }
                            },
                            "id": 101,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1326:6:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "src": "1285:47:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "id": 103,
                        "nodeType": "ExpressionStatement",
                        "src": "1285:47:0"
                      },
                      {
                        "expression": {
                          "id": 111,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "baseExpression": {
                                  "id": 104,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 80,
                                  "src": "1339:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$",
                                    "typeString": "mapping(enum Common.Category => mapping(address => struct Common.Profile storage ref))"
                                  }
                                },
                                "id": 107,
                                "indexExpression": {
                                  "id": 105,
                                  "name": "_c",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 89,
                                  "src": "1344:2:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_Category_$11",
                                    "typeString": "enum Common.Category"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1339:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$",
                                  "typeString": "mapping(address => struct Common.Profile storage ref)"
                                }
                              },
                              "id": 108,
                              "indexExpression": {
                                "id": 106,
                                "name": "newCollector",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 82,
                                "src": "1348:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1339:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Profile_$56_storage",
                                "typeString": "struct Common.Profile storage ref"
                              }
                            },
                            "id": 109,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "wasteCount",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 47,
                            "src": "1339:33:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "30",
                            "id": 110,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1375:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1339:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 112,
                        "nodeType": "ExpressionStatement",
                        "src": "1339:37:0"
                      },
                      {
                        "expression": {
                          "id": 120,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "baseExpression": {
                                  "id": 113,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 80,
                                  "src": "1383:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$",
                                    "typeString": "mapping(enum Common.Category => mapping(address => struct Common.Profile storage ref))"
                                  }
                                },
                                "id": 116,
                                "indexExpression": {
                                  "id": 114,
                                  "name": "_c",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 89,
                                  "src": "1388:2:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_Category_$11",
                                    "typeString": "enum Common.Category"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1383:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$",
                                  "typeString": "mapping(address => struct Common.Profile storage ref)"
                                }
                              },
                              "id": 117,
                              "indexExpression": {
                                "id": 115,
                                "name": "newCollector",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 82,
                                "src": "1392:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1383:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Profile_$56_storage",
                                "typeString": "struct Common.Profile storage ref"
                              }
                            },
                            "id": 118,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "approval",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 49,
                            "src": "1383:31:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "66616c7365",
                            "id": 119,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1417:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "false"
                          },
                          "src": "1383:39:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 121,
                        "nodeType": "ExpressionStatement",
                        "src": "1383:39:0"
                      },
                      {
                        "expression": {
                          "id": 129,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "baseExpression": {
                                  "id": 122,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 80,
                                  "src": "1429:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$",
                                    "typeString": "mapping(enum Common.Category => mapping(address => struct Common.Profile storage ref))"
                                  }
                                },
                                "id": 125,
                                "indexExpression": {
                                  "id": 123,
                                  "name": "_c",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 89,
                                  "src": "1434:2:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_Category_$11",
                                    "typeString": "enum Common.Category"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1429:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$",
                                  "typeString": "mapping(address => struct Common.Profile storage ref)"
                                }
                              },
                              "id": 126,
                              "indexExpression": {
                                "id": 124,
                                "name": "newCollector",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 82,
                                "src": "1438:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1429:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Profile_$56_storage",
                                "typeString": "struct Common.Profile storage ref"
                              }
                            },
                            "id": 127,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "isRegistered",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 51,
                            "src": "1429:35:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 128,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1467:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "1429:42:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 130,
                        "nodeType": "ExpressionStatement",
                        "src": "1429:42:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 72,
                    "nodeType": "StructuredDocumentation",
                    "src": "954:133:0",
                    "text": "@dev Sign up new collector\n@param self - Storage\n@param newCollector - Address of new Collector to add."
                  },
                  "id": 132,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "registerCollector",
                  "nameLocation": "1102:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 83,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 80,
                        "mutability": "mutable",
                        "name": "self",
                        "nameLocation": "1188:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 132,
                        "src": "1120:72:0",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$",
                          "typeString": "mapping(enum Common.Category => mapping(address => struct Common.Profile))"
                        },
                        "typeName": {
                          "id": 79,
                          "keyType": {
                            "id": 74,
                            "nodeType": "UserDefinedTypeName",
                            "pathNode": {
                              "id": 73,
                              "name": "Common.Category",
                              "nodeType": "IdentifierPath",
                              "referencedDeclaration": 11,
                              "src": "1129:15:0"
                            },
                            "referencedDeclaration": 11,
                            "src": "1129:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_Category_$11",
                              "typeString": "enum Common.Category"
                            }
                          },
                          "nodeType": "Mapping",
                          "src": "1120:59:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$",
                            "typeString": "mapping(enum Common.Category => mapping(address => struct Common.Profile))"
                          },
                          "valueType": {
                            "id": 78,
                            "keyType": {
                              "id": 75,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1154:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "Mapping",
                            "src": "1146:32:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$",
                              "typeString": "mapping(address => struct Common.Profile)"
                            },
                            "valueType": {
                              "id": 77,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 76,
                                "name": "Common.Profile",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 56,
                                "src": "1163:14:0"
                              },
                              "referencedDeclaration": 56,
                              "src": "1163:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Profile_$56_storage_ptr",
                                "typeString": "struct Common.Profile"
                              }
                            }
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 82,
                        "mutability": "mutable",
                        "name": "newCollector",
                        "nameLocation": "1202:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 132,
                        "src": "1194:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 81,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1194:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1119:96:0"
                  },
                  "returnParameters": {
                    "id": 84,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1225:0:0"
                  },
                  "scope": 529,
                  "src": "1093:384:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 167,
                    "nodeType": "Block",
                    "src": "1758:185:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "expression": {
                                    "id": 155,
                                    "name": "inWaste",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 143,
                                    "src": "1809:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                      "typeString": "struct Common.WasteData memory"
                                    }
                                  },
                                  "id": 156,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "value",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 33,
                                  "src": "1809:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                {
                                  "expression": {
                                    "id": 157,
                                    "name": "inWaste",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 143,
                                    "src": "1833:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                      "typeString": "struct Common.WasteData memory"
                                    }
                                  },
                                  "id": 158,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "collector",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 35,
                                  "src": "1833:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "expression": {
                                    "id": 159,
                                    "name": "inWaste",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 143,
                                    "src": "1861:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                      "typeString": "struct Common.WasteData memory"
                                    }
                                  },
                                  "id": 160,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "generator",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 37,
                                  "src": "1861:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "expression": {
                                    "id": 161,
                                    "name": "inWaste",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 143,
                                    "src": "1889:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                      "typeString": "struct Common.WasteData memory"
                                    }
                                  },
                                  "id": 162,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "recycler",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 39,
                                  "src": "1889:16:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 163,
                                  "name": "state",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 146,
                                  "src": "1916:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_State_$5",
                                    "typeString": "enum Common.State"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_enum$_State_$5",
                                    "typeString": "enum Common.State"
                                  }
                                ],
                                "expression": {
                                  "id": 153,
                                  "name": "Common",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 71,
                                  "src": "1782:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_Common_$71_$",
                                    "typeString": "type(contract Common)"
                                  }
                                },
                                "id": 154,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "WasteData",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 43,
                                "src": "1782:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_struct$_WasteData_$43_storage_ptr_$",
                                  "typeString": "type(struct Common.WasteData storage pointer)"
                                }
                              },
                              "id": 164,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "structConstructorCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1782:148:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                "typeString": "struct Common.WasteData memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                "typeString": "struct Common.WasteData memory"
                              }
                            ],
                            "expression": {
                              "baseExpression": {
                                "id": 149,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 140,
                                "src": "1765:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_enum$_State_$5_$_t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_$",
                                  "typeString": "mapping(enum Common.State => struct Common.WasteData storage ref[] storage ref)"
                                }
                              },
                              "id": 151,
                              "indexExpression": {
                                "id": 150,
                                "name": "state",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 146,
                                "src": "1770:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_State_$5",
                                  "typeString": "enum Common.State"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1765:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_WasteData_$43_storage_$dyn_storage",
                                "typeString": "struct Common.WasteData storage ref[] storage ref"
                              }
                            },
                            "id": 152,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "1765:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_ptr_$_t_struct$_WasteData_$43_storage_$returns$__$bound_to$_t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_ptr_$",
                              "typeString": "function (struct Common.WasteData storage ref[] storage pointer,struct Common.WasteData storage ref)"
                            }
                          },
                          "id": 165,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1765:172:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 166,
                        "nodeType": "ExpressionStatement",
                        "src": "1765:172:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 133,
                    "nodeType": "StructuredDocumentation",
                    "src": "1483:112:0",
                    "text": "@dev Dual function: \no Recycles collected waste.\no Generate new waste."
                  },
                  "id": 168,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "portToMap",
                  "nameLocation": "1608:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 147,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 140,
                        "mutability": "mutable",
                        "name": "self",
                        "nameLocation": "1675:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 168,
                        "src": "1624:55:0",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_enum$_State_$5_$_t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_$",
                          "typeString": "mapping(enum Common.State => struct Common.WasteData[])"
                        },
                        "typeName": {
                          "id": 139,
                          "keyType": {
                            "id": 135,
                            "nodeType": "UserDefinedTypeName",
                            "pathNode": {
                              "id": 134,
                              "name": "Common.State",
                              "nodeType": "IdentifierPath",
                              "referencedDeclaration": 5,
                              "src": "1633:12:0"
                            },
                            "referencedDeclaration": 5,
                            "src": "1633:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_State_$5",
                              "typeString": "enum Common.State"
                            }
                          },
                          "nodeType": "Mapping",
                          "src": "1624:42:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_enum$_State_$5_$_t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_$",
                            "typeString": "mapping(enum Common.State => struct Common.WasteData[])"
                          },
                          "valueType": {
                            "baseType": {
                              "id": 137,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 136,
                                "name": "Common.WasteData",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 43,
                                "src": "1647:16:0"
                              },
                              "referencedDeclaration": 43,
                              "src": "1647:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_WasteData_$43_storage_ptr",
                                "typeString": "struct Common.WasteData"
                              }
                            },
                            "id": 138,
                            "nodeType": "ArrayTypeName",
                            "src": "1647:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_ptr",
                              "typeString": "struct Common.WasteData[]"
                            }
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 143,
                        "mutability": "mutable",
                        "name": "inWaste",
                        "nameLocation": "1711:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 168,
                        "src": "1687:31:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                          "typeString": "struct Common.WasteData"
                        },
                        "typeName": {
                          "id": 142,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 141,
                            "name": "Common.WasteData",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 43,
                            "src": "1687:16:0"
                          },
                          "referencedDeclaration": 43,
                          "src": "1687:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_WasteData_$43_storage_ptr",
                            "typeString": "struct Common.WasteData"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 146,
                        "mutability": "mutable",
                        "name": "state",
                        "nameLocation": "1738:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 168,
                        "src": "1725:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_State_$5",
                          "typeString": "enum Common.State"
                        },
                        "typeName": {
                          "id": 145,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 144,
                            "name": "Common.State",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 5,
                            "src": "1725:12:0"
                          },
                          "referencedDeclaration": 5,
                          "src": "1725:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_State_$5",
                            "typeString": "enum Common.State"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1617:131:0"
                  },
                  "returnParameters": {
                    "id": 148,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1758:0:0"
                  },
                  "scope": 529,
                  "src": "1599:344:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 203,
                    "nodeType": "Block",
                    "src": "2105:177:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "expression": {
                                    "id": 191,
                                    "name": "inWaste",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 178,
                                    "src": "2158:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                      "typeString": "struct Common.WasteData memory"
                                    }
                                  },
                                  "id": 192,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "value",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 33,
                                  "src": "2158:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                {
                                  "expression": {
                                    "id": 193,
                                    "name": "inWaste",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 178,
                                    "src": "2180:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                      "typeString": "struct Common.WasteData memory"
                                    }
                                  },
                                  "id": 194,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "collector",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 35,
                                  "src": "2180:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "expression": {
                                    "id": 195,
                                    "name": "inWaste",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 178,
                                    "src": "2206:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                      "typeString": "struct Common.WasteData memory"
                                    }
                                  },
                                  "id": 196,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "generator",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 37,
                                  "src": "2206:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "expression": {
                                    "id": 197,
                                    "name": "inWaste",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 178,
                                    "src": "2232:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                      "typeString": "struct Common.WasteData memory"
                                    }
                                  },
                                  "id": 198,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "recycler",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 39,
                                  "src": "2232:16:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 199,
                                  "name": "state",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 181,
                                  "src": "2257:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_State_$5",
                                    "typeString": "enum Common.State"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_enum$_State_$5",
                                    "typeString": "enum Common.State"
                                  }
                                ],
                                "expression": {
                                  "id": 189,
                                  "name": "Common",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 71,
                                  "src": "2133:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_Common_$71_$",
                                    "typeString": "type(contract Common)"
                                  }
                                },
                                "id": 190,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "WasteData",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 43,
                                "src": "2133:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_struct$_WasteData_$43_storage_ptr_$",
                                  "typeString": "type(struct Common.WasteData storage pointer)"
                                }
                              },
                              "id": 200,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "structConstructorCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2133:136:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                "typeString": "struct Common.WasteData memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                "typeString": "struct Common.WasteData memory"
                              }
                            ],
                            "expression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 184,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 173,
                                  "src": "2112:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage_ptr",
                                    "typeString": "struct Common.BinData storage ref[] storage pointer"
                                  }
                                },
                                "id": 186,
                                "indexExpression": {
                                  "id": 185,
                                  "name": "binId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 175,
                                  "src": "2117:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "2112:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_BinData_$63_storage",
                                  "typeString": "struct Common.BinData storage ref"
                                }
                              },
                              "id": 187,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "bin",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 60,
                              "src": "2112:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_WasteData_$43_storage_$dyn_storage",
                                "typeString": "struct Common.WasteData storage ref[] storage ref"
                              }
                            },
                            "id": 188,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "2112:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_ptr_$_t_struct$_WasteData_$43_storage_$returns$__$bound_to$_t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_ptr_$",
                              "typeString": "function (struct Common.WasteData storage ref[] storage pointer,struct Common.WasteData storage ref)"
                            }
                          },
                          "id": 201,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2112:164:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 202,
                        "nodeType": "ExpressionStatement",
                        "src": "2112:164:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 169,
                    "nodeType": "StructuredDocumentation",
                    "src": "1949:26:0",
                    "text": "@dev Moves waste to bin"
                  },
                  "id": 204,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "portToArray",
                  "nameLocation": "1988:11:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 182,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 173,
                        "mutability": "mutable",
                        "name": "self",
                        "nameLocation": "2025:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 204,
                        "src": "2000:29:0",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage_ptr",
                          "typeString": "struct Common.BinData[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 171,
                            "nodeType": "UserDefinedTypeName",
                            "pathNode": {
                              "id": 170,
                              "name": "Common.BinData",
                              "nodeType": "IdentifierPath",
                              "referencedDeclaration": 63,
                              "src": "2000:14:0"
                            },
                            "referencedDeclaration": 63,
                            "src": "2000:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_BinData_$63_storage_ptr",
                              "typeString": "struct Common.BinData"
                            }
                          },
                          "id": 172,
                          "nodeType": "ArrayTypeName",
                          "src": "2000:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage_ptr",
                            "typeString": "struct Common.BinData[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 175,
                        "mutability": "mutable",
                        "name": "binId",
                        "nameLocation": "2036:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 204,
                        "src": "2031:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 174,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "2031:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 178,
                        "mutability": "mutable",
                        "name": "inWaste",
                        "nameLocation": "2067:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 204,
                        "src": "2043:31:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                          "typeString": "struct Common.WasteData"
                        },
                        "typeName": {
                          "id": 177,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 176,
                            "name": "Common.WasteData",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 43,
                            "src": "2043:16:0"
                          },
                          "referencedDeclaration": 43,
                          "src": "2043:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_WasteData_$43_storage_ptr",
                            "typeString": "struct Common.WasteData"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 181,
                        "mutability": "mutable",
                        "name": "state",
                        "nameLocation": "2089:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 204,
                        "src": "2076:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_State_$5",
                          "typeString": "enum Common.State"
                        },
                        "typeName": {
                          "id": 180,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 179,
                            "name": "Common.State",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 5,
                            "src": "2076:12:0"
                          },
                          "referencedDeclaration": 5,
                          "src": "2076:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_State_$5",
                            "typeString": "enum Common.State"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1999:96:0"
                  },
                  "returnParameters": {
                    "id": 183,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2105:0:0"
                  },
                  "scope": 529,
                  "src": "1979:303:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 238,
                    "nodeType": "Block",
                    "src": "2541:76:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 229,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 223,
                            "name": "_waste",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 221,
                            "src": "2548:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                              "typeString": "struct Common.WasteData memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 224,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 212,
                                "src": "2557:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_enum$_State_$5_$_t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_$",
                                  "typeString": "mapping(enum Common.State => struct Common.WasteData storage ref[] storage ref)"
                                }
                              },
                              "id": 226,
                              "indexExpression": {
                                "id": 225,
                                "name": "state",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 217,
                                "src": "2562:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_State_$5",
                                  "typeString": "enum Common.State"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2557:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_WasteData_$43_storage_$dyn_storage",
                                "typeString": "struct Common.WasteData storage ref[] storage ref"
                              }
                            },
                            "id": 228,
                            "indexExpression": {
                              "id": 227,
                              "name": "wasteId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 214,
                              "src": "2569:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2557:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_WasteData_$43_storage",
                              "typeString": "struct Common.WasteData storage ref"
                            }
                          },
                          "src": "2548:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                            "typeString": "struct Common.WasteData memory"
                          }
                        },
                        "id": 230,
                        "nodeType": "ExpressionStatement",
                        "src": "2548:29:0"
                      },
                      {
                        "expression": {
                          "id": 236,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "delete",
                          "prefix": true,
                          "src": "2584:27:0",
                          "subExpression": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 231,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 212,
                                "src": "2591:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_enum$_State_$5_$_t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_$",
                                  "typeString": "mapping(enum Common.State => struct Common.WasteData storage ref[] storage ref)"
                                }
                              },
                              "id": 233,
                              "indexExpression": {
                                "id": 232,
                                "name": "state",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 217,
                                "src": "2596:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_State_$5",
                                  "typeString": "enum Common.State"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2591:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_WasteData_$43_storage_$dyn_storage",
                                "typeString": "struct Common.WasteData storage ref[] storage ref"
                              }
                            },
                            "id": 235,
                            "indexExpression": {
                              "id": 234,
                              "name": "wasteId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 214,
                              "src": "2603:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2591:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_WasteData_$43_storage",
                              "typeString": "struct Common.WasteData storage ref"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 237,
                        "nodeType": "ExpressionStatement",
                        "src": "2584:27:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 205,
                    "nodeType": "StructuredDocumentation",
                    "src": "2288:85:0",
                    "text": "@dev Removes waste at 'wasteId' from bin at 'binId' in bin array at hashmap 'self'"
                  },
                  "id": 239,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "popFromMapping",
                  "nameLocation": "2386:14:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 218,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 212,
                        "mutability": "mutable",
                        "name": "self",
                        "nameLocation": "2452:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 239,
                        "src": "2401:55:0",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_enum$_State_$5_$_t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_$",
                          "typeString": "mapping(enum Common.State => struct Common.WasteData[])"
                        },
                        "typeName": {
                          "id": 211,
                          "keyType": {
                            "id": 207,
                            "nodeType": "UserDefinedTypeName",
                            "pathNode": {
                              "id": 206,
                              "name": "Common.State",
                              "nodeType": "IdentifierPath",
                              "referencedDeclaration": 5,
                              "src": "2410:12:0"
                            },
                            "referencedDeclaration": 5,
                            "src": "2410:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_State_$5",
                              "typeString": "enum Common.State"
                            }
                          },
                          "nodeType": "Mapping",
                          "src": "2401:42:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_enum$_State_$5_$_t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_$",
                            "typeString": "mapping(enum Common.State => struct Common.WasteData[])"
                          },
                          "valueType": {
                            "baseType": {
                              "id": 209,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 208,
                                "name": "Common.WasteData",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 43,
                                "src": "2424:16:0"
                              },
                              "referencedDeclaration": 43,
                              "src": "2424:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_WasteData_$43_storage_ptr",
                                "typeString": "struct Common.WasteData"
                              }
                            },
                            "id": 210,
                            "nodeType": "ArrayTypeName",
                            "src": "2424:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_ptr",
                              "typeString": "struct Common.WasteData[]"
                            }
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 214,
                        "mutability": "mutable",
                        "name": "wasteId",
                        "nameLocation": "2463:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 239,
                        "src": "2458:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 213,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "2458:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 217,
                        "mutability": "mutable",
                        "name": "state",
                        "nameLocation": "2485:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 239,
                        "src": "2472:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_State_$5",
                          "typeString": "enum Common.State"
                        },
                        "typeName": {
                          "id": 216,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 215,
                            "name": "Common.State",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 5,
                            "src": "2472:12:0"
                          },
                          "referencedDeclaration": 5,
                          "src": "2472:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_State_$5",
                            "typeString": "enum Common.State"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2400:91:0"
                  },
                  "returnParameters": {
                    "id": 222,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 221,
                        "mutability": "mutable",
                        "name": "_waste",
                        "nameLocation": "2533:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 239,
                        "src": "2509:30:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                          "typeString": "struct Common.WasteData"
                        },
                        "typeName": {
                          "id": 220,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 219,
                            "name": "Common.WasteData",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 43,
                            "src": "2509:16:0"
                          },
                          "referencedDeclaration": 43,
                          "src": "2509:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_WasteData_$43_storage_ptr",
                            "typeString": "struct Common.WasteData"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2508:32:0"
                  },
                  "scope": 529,
                  "src": "2377:240:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 271,
                    "nodeType": "Block",
                    "src": "2829:84:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 261,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 254,
                            "name": "_waste",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 252,
                            "src": "2836:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                              "typeString": "struct Common.WasteData memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "baseExpression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 255,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 244,
                                  "src": "2845:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage_ptr",
                                    "typeString": "struct Common.BinData storage ref[] storage pointer"
                                  }
                                },
                                "id": 257,
                                "indexExpression": {
                                  "id": 256,
                                  "name": "binId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 246,
                                  "src": "2850:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "2845:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_BinData_$63_storage",
                                  "typeString": "struct Common.BinData storage ref"
                                }
                              },
                              "id": 258,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "bin",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 60,
                              "src": "2845:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_WasteData_$43_storage_$dyn_storage",
                                "typeString": "struct Common.WasteData storage ref[] storage ref"
                              }
                            },
                            "id": 260,
                            "indexExpression": {
                              "id": 259,
                              "name": "wasteId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 248,
                              "src": "2861:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2845:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_WasteData_$43_storage",
                              "typeString": "struct Common.WasteData storage ref"
                            }
                          },
                          "src": "2836:33:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                            "typeString": "struct Common.WasteData memory"
                          }
                        },
                        "id": 262,
                        "nodeType": "ExpressionStatement",
                        "src": "2836:33:0"
                      },
                      {
                        "expression": {
                          "id": 269,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "delete",
                          "prefix": true,
                          "src": "2876:31:0",
                          "subExpression": {
                            "baseExpression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 263,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 244,
                                  "src": "2883:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage_ptr",
                                    "typeString": "struct Common.BinData storage ref[] storage pointer"
                                  }
                                },
                                "id": 265,
                                "indexExpression": {
                                  "id": 264,
                                  "name": "binId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 246,
                                  "src": "2888:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "2883:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_BinData_$63_storage",
                                  "typeString": "struct Common.BinData storage ref"
                                }
                              },
                              "id": 266,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "bin",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 60,
                              "src": "2883:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_WasteData_$43_storage_$dyn_storage",
                                "typeString": "struct Common.WasteData storage ref[] storage ref"
                              }
                            },
                            "id": 268,
                            "indexExpression": {
                              "id": 267,
                              "name": "wasteId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 248,
                              "src": "2899:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2883:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_WasteData_$43_storage",
                              "typeString": "struct Common.WasteData storage ref"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 270,
                        "nodeType": "ExpressionStatement",
                        "src": "2876:31:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 240,
                    "nodeType": "StructuredDocumentation",
                    "src": "2623:74:0",
                    "text": "@dev Removes waste at 'wasteId' from bin at 'binId' in bin array 'self'"
                  },
                  "id": 272,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "popFromArray",
                  "nameLocation": "2710:12:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 249,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 244,
                        "mutability": "mutable",
                        "name": "self",
                        "nameLocation": "2748:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 272,
                        "src": "2723:29:0",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage_ptr",
                          "typeString": "struct Common.BinData[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 242,
                            "nodeType": "UserDefinedTypeName",
                            "pathNode": {
                              "id": 241,
                              "name": "Common.BinData",
                              "nodeType": "IdentifierPath",
                              "referencedDeclaration": 63,
                              "src": "2723:14:0"
                            },
                            "referencedDeclaration": 63,
                            "src": "2723:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_BinData_$63_storage_ptr",
                              "typeString": "struct Common.BinData"
                            }
                          },
                          "id": 243,
                          "nodeType": "ArrayTypeName",
                          "src": "2723:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage_ptr",
                            "typeString": "struct Common.BinData[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 246,
                        "mutability": "mutable",
                        "name": "binId",
                        "nameLocation": "2759:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 272,
                        "src": "2754:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 245,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "2754:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 248,
                        "mutability": "mutable",
                        "name": "wasteId",
                        "nameLocation": "2771:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 272,
                        "src": "2766:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 247,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "2766:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2722:57:0"
                  },
                  "returnParameters": {
                    "id": 253,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 252,
                        "mutability": "mutable",
                        "name": "_waste",
                        "nameLocation": "2821:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 272,
                        "src": "2797:30:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                          "typeString": "struct Common.WasteData"
                        },
                        "typeName": {
                          "id": 251,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 250,
                            "name": "Common.WasteData",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 43,
                            "src": "2797:16:0"
                          },
                          "referencedDeclaration": 43,
                          "src": "2797:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_WasteData_$43_storage_ptr",
                            "typeString": "struct Common.WasteData"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2796:32:0"
                  },
                  "scope": 529,
                  "src": "2701:212:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 336,
                    "nodeType": "Block",
                    "src": "3329:295:0",
                    "statements": [
                      {
                        "assignments": [
                          292
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 292,
                            "mutability": "mutable",
                            "name": "prevStatus",
                            "nameLocation": "3341:10:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 336,
                            "src": "3336:15:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 291,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "3336:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 298,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 294,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 281,
                              "src": "3370:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$",
                                "typeString": "mapping(enum Common.Category => mapping(address => struct Common.Profile storage ref))"
                              }
                            },
                            {
                              "id": 295,
                              "name": "who",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 283,
                              "src": "3376:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 296,
                              "name": "cat",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 288,
                              "src": "3381:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Category_$11",
                                "typeString": "enum Common.Category"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$",
                                "typeString": "mapping(enum Common.Category => mapping(address => struct Common.Profile storage ref))"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_enum$_Category_$11",
                                "typeString": "enum Common.Category"
                              }
                            ],
                            "id": 293,
                            "name": "_previousStatus",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 363,
                            "src": "3354:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$_$_t_address_$_t_enum$_Category_$11_$returns$_t_bool_$",
                              "typeString": "function (mapping(enum Common.Category => mapping(address => struct Common.Profile storage ref)),address,enum Common.Category) view returns (bool)"
                            }
                          },
                          "id": 297,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3354:31:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3336:49:0"
                      },
                      {
                        "condition": {
                          "id": 299,
                          "name": "value",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 285,
                          "src": "3395:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 334,
                          "nodeType": "Block",
                          "src": "3511:108:0",
                          "statements": [
                            {
                              "condition": {
                                "id": 318,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "!",
                                "prefix": true,
                                "src": "3523:11:0",
                                "subExpression": {
                                  "id": 317,
                                  "name": "prevStatus",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 292,
                                  "src": "3524:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 324,
                              "nodeType": "IfStatement",
                              "src": "3520:51:0",
                              "trueBody": {
                                "errorCall": {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "expression": {
                                      "id": 319,
                                      "name": "Common",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 71,
                                      "src": "3543:6:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_contract$_Common_$71_$",
                                        "typeString": "type(contract Common)"
                                      }
                                    },
                                    "id": 321,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "UserAlreadyNotExist",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 19,
                                    "src": "3543:26:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                      "typeString": "function () pure"
                                    }
                                  },
                                  "id": 322,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "3543:28:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_tuple$__$",
                                    "typeString": "tuple()"
                                  }
                                },
                                "id": 323,
                                "nodeType": "RevertStatement",
                                "src": "3536:35:0"
                              }
                            },
                            {
                              "expression": {
                                "id": 332,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "expression": {
                                    "baseExpression": {
                                      "baseExpression": {
                                        "id": 325,
                                        "name": "self",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 281,
                                        "src": "3580:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$",
                                          "typeString": "mapping(enum Common.Category => mapping(address => struct Common.Profile storage ref))"
                                        }
                                      },
                                      "id": 328,
                                      "indexExpression": {
                                        "id": 326,
                                        "name": "cat",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 288,
                                        "src": "3585:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_enum$_Category_$11",
                                          "typeString": "enum Common.Category"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "3580:9:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$",
                                        "typeString": "mapping(address => struct Common.Profile storage ref)"
                                      }
                                    },
                                    "id": 329,
                                    "indexExpression": {
                                      "id": 327,
                                      "name": "who",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 283,
                                      "src": "3590:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "3580:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Profile_$56_storage",
                                      "typeString": "struct Common.Profile storage ref"
                                    }
                                  },
                                  "id": 330,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberName": "approval",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 49,
                                  "src": "3580:23:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "hexValue": "66616c7365",
                                  "id": 331,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "bool",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3606:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "value": "false"
                                },
                                "src": "3580:31:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 333,
                              "nodeType": "ExpressionStatement",
                              "src": "3580:31:0"
                            }
                          ]
                        },
                        "id": 335,
                        "nodeType": "IfStatement",
                        "src": "3392:227:0",
                        "trueBody": {
                          "id": 316,
                          "nodeType": "Block",
                          "src": "3402:103:0",
                          "statements": [
                            {
                              "condition": {
                                "id": 300,
                                "name": "prevStatus",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 292,
                                "src": "3414:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 306,
                              "nodeType": "IfStatement",
                              "src": "3411:47:0",
                              "trueBody": {
                                "errorCall": {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "expression": {
                                      "id": 301,
                                      "name": "Common",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 71,
                                      "src": "3433:6:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_contract$_Common_$71_$",
                                        "typeString": "type(contract Common)"
                                      }
                                    },
                                    "id": 303,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "UserAlreadyExist",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 17,
                                    "src": "3433:23:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                      "typeString": "function () pure"
                                    }
                                  },
                                  "id": 304,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "3433:25:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_tuple$__$",
                                    "typeString": "tuple()"
                                  }
                                },
                                "id": 305,
                                "nodeType": "RevertStatement",
                                "src": "3426:32:0"
                              }
                            },
                            {
                              "expression": {
                                "id": 314,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "expression": {
                                    "baseExpression": {
                                      "baseExpression": {
                                        "id": 307,
                                        "name": "self",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 281,
                                        "src": "3467:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$",
                                          "typeString": "mapping(enum Common.Category => mapping(address => struct Common.Profile storage ref))"
                                        }
                                      },
                                      "id": 310,
                                      "indexExpression": {
                                        "id": 308,
                                        "name": "cat",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 288,
                                        "src": "3472:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_enum$_Category_$11",
                                          "typeString": "enum Common.Category"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "3467:9:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$",
                                        "typeString": "mapping(address => struct Common.Profile storage ref)"
                                      }
                                    },
                                    "id": 311,
                                    "indexExpression": {
                                      "id": 309,
                                      "name": "who",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 283,
                                      "src": "3477:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "3467:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Profile_$56_storage",
                                      "typeString": "struct Common.Profile storage ref"
                                    }
                                  },
                                  "id": 312,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberName": "approval",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 49,
                                  "src": "3467:23:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "hexValue": "74727565",
                                  "id": 313,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "bool",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3493:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "value": "true"
                                },
                                "src": "3467:30:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 315,
                              "nodeType": "ExpressionStatement",
                              "src": "3467:30:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 273,
                    "nodeType": "StructuredDocumentation",
                    "src": "2919:258:0",
                    "text": "@dev Sets collectors status to either true or false\n@param value - Value to set status to.\n@param who - User to set status for.\n@param self - storage.\nNote : If value is true, collector's status must be false vice versa."
                  },
                  "id": 337,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setStatus",
                  "nameLocation": "3190:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 289,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 281,
                        "mutability": "mutable",
                        "name": "self",
                        "nameLocation": "3268:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 337,
                        "src": "3200:72:0",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$",
                          "typeString": "mapping(enum Common.Category => mapping(address => struct Common.Profile))"
                        },
                        "typeName": {
                          "id": 280,
                          "keyType": {
                            "id": 275,
                            "nodeType": "UserDefinedTypeName",
                            "pathNode": {
                              "id": 274,
                              "name": "Common.Category",
                              "nodeType": "IdentifierPath",
                              "referencedDeclaration": 11,
                              "src": "3209:15:0"
                            },
                            "referencedDeclaration": 11,
                            "src": "3209:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_Category_$11",
                              "typeString": "enum Common.Category"
                            }
                          },
                          "nodeType": "Mapping",
                          "src": "3200:59:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$",
                            "typeString": "mapping(enum Common.Category => mapping(address => struct Common.Profile))"
                          },
                          "valueType": {
                            "id": 279,
                            "keyType": {
                              "id": 276,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "3234:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "Mapping",
                            "src": "3226:32:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$",
                              "typeString": "mapping(address => struct Common.Profile)"
                            },
                            "valueType": {
                              "id": 278,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 277,
                                "name": "Common.Profile",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 56,
                                "src": "3243:14:0"
                              },
                              "referencedDeclaration": 56,
                              "src": "3243:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Profile_$56_storage_ptr",
                                "typeString": "struct Common.Profile"
                              }
                            }
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 283,
                        "mutability": "mutable",
                        "name": "who",
                        "nameLocation": "3282:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 337,
                        "src": "3274:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 282,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3274:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 285,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "3292:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 337,
                        "src": "3287:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 284,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "3287:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 288,
                        "mutability": "mutable",
                        "name": "cat",
                        "nameLocation": "3315:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 337,
                        "src": "3299:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Category_$11",
                          "typeString": "enum Common.Category"
                        },
                        "typeName": {
                          "id": 287,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 286,
                            "name": "Common.Category",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 11,
                            "src": "3299:15:0"
                          },
                          "referencedDeclaration": 11,
                          "src": "3299:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Category_$11",
                            "typeString": "enum Common.Category"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3199:120:0"
                  },
                  "returnParameters": {
                    "id": 290,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3329:0:0"
                  },
                  "scope": 529,
                  "src": "3181:443:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 362,
                    "nodeType": "Block",
                    "src": "3790:43:0",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 355,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 345,
                                "src": "3804:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$",
                                  "typeString": "mapping(enum Common.Category => mapping(address => struct Common.Profile storage ref))"
                                }
                              },
                              "id": 357,
                              "indexExpression": {
                                "id": 356,
                                "name": "cat",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 350,
                                "src": "3809:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Category_$11",
                                  "typeString": "enum Common.Category"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3804:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$",
                                "typeString": "mapping(address => struct Common.Profile storage ref)"
                              }
                            },
                            "id": 359,
                            "indexExpression": {
                              "id": 358,
                              "name": "who",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 347,
                              "src": "3814:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "3804:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Profile_$56_storage",
                              "typeString": "struct Common.Profile storage ref"
                            }
                          },
                          "id": 360,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "approval",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 49,
                          "src": "3804:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 354,
                        "id": 361,
                        "nodeType": "Return",
                        "src": "3797:30:0"
                      }
                    ]
                  },
                  "id": 363,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_previousStatus",
                  "nameLocation": "3639:15:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 351,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 345,
                        "mutability": "mutable",
                        "name": "self",
                        "nameLocation": "3723:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 363,
                        "src": "3655:72:0",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$",
                          "typeString": "mapping(enum Common.Category => mapping(address => struct Common.Profile))"
                        },
                        "typeName": {
                          "id": 344,
                          "keyType": {
                            "id": 339,
                            "nodeType": "UserDefinedTypeName",
                            "pathNode": {
                              "id": 338,
                              "name": "Common.Category",
                              "nodeType": "IdentifierPath",
                              "referencedDeclaration": 11,
                              "src": "3664:15:0"
                            },
                            "referencedDeclaration": 11,
                            "src": "3664:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_Category_$11",
                              "typeString": "enum Common.Category"
                            }
                          },
                          "nodeType": "Mapping",
                          "src": "3655:59:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$",
                            "typeString": "mapping(enum Common.Category => mapping(address => struct Common.Profile))"
                          },
                          "valueType": {
                            "id": 343,
                            "keyType": {
                              "id": 340,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "3689:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "Mapping",
                            "src": "3681:32:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$",
                              "typeString": "mapping(address => struct Common.Profile)"
                            },
                            "valueType": {
                              "id": 342,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 341,
                                "name": "Common.Profile",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 56,
                                "src": "3698:14:0"
                              },
                              "referencedDeclaration": 56,
                              "src": "3698:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Profile_$56_storage_ptr",
                                "typeString": "struct Common.Profile"
                              }
                            }
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 347,
                        "mutability": "mutable",
                        "name": "who",
                        "nameLocation": "3737:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 363,
                        "src": "3729:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 346,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3729:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 350,
                        "mutability": "mutable",
                        "name": "cat",
                        "nameLocation": "3758:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 363,
                        "src": "3742:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Category_$11",
                          "typeString": "enum Common.Category"
                        },
                        "typeName": {
                          "id": 349,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 348,
                            "name": "Common.Category",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 11,
                            "src": "3742:15:0"
                          },
                          "referencedDeclaration": 11,
                          "src": "3742:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Category_$11",
                            "typeString": "enum Common.Category"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3654:108:0"
                  },
                  "returnParameters": {
                    "id": 354,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 353,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 363,
                        "src": "3784:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 352,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "3784:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3783:6:0"
                  },
                  "scope": 529,
                  "src": "3630:203:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 392,
                    "nodeType": "Block",
                    "src": "4081:82:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 378,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 375,
                            "name": "newId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 373,
                            "src": "4088:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 376,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 368,
                              "src": "4096:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage_ptr",
                                "typeString": "struct Common.BinData storage ref[] storage pointer"
                              }
                            },
                            "id": 377,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "4096:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4088:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 379,
                        "nodeType": "ExpressionStatement",
                        "src": "4088:19:0"
                      },
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 380,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 368,
                              "src": "4114:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage_ptr",
                                "typeString": "struct Common.BinData storage ref[] storage pointer"
                              }
                            },
                            "id": 382,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "4114:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_BinData_$63_storage_$dyn_storage_ptr_$returns$_t_struct$_BinData_$63_storage_$bound_to$_t_array$_t_struct$_BinData_$63_storage_$dyn_storage_ptr_$",
                              "typeString": "function (struct Common.BinData storage ref[] storage pointer) returns (struct Common.BinData storage ref)"
                            }
                          },
                          "id": 383,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4114:11:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_BinData_$63_storage",
                            "typeString": "struct Common.BinData storage ref"
                          }
                        },
                        "id": 384,
                        "nodeType": "ExpressionStatement",
                        "src": "4114:11:0"
                      },
                      {
                        "expression": {
                          "id": 390,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 385,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 368,
                                "src": "4132:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage_ptr",
                                  "typeString": "struct Common.BinData storage ref[] storage pointer"
                                }
                              },
                              "id": 387,
                              "indexExpression": {
                                "id": 386,
                                "name": "newId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 373,
                                "src": "4137:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4132:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_BinData_$63_storage",
                                "typeString": "struct Common.BinData storage ref"
                              }
                            },
                            "id": 388,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "owner",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 62,
                            "src": "4132:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 389,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 370,
                            "src": "4152:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "4132:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 391,
                        "nodeType": "ExpressionStatement",
                        "src": "4132:25:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 364,
                    "nodeType": "StructuredDocumentation",
                    "src": "3839:139:0",
                    "text": "@dev Registers new bin with owner.\n@param owner - Bin Owner\n@param self - Storage\n@return newId "
                  },
                  "id": 393,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "registerNewBin",
                  "nameLocation": "3991:14:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 371,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 368,
                        "mutability": "mutable",
                        "name": "self",
                        "nameLocation": "4031:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 393,
                        "src": "4006:29:0",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage_ptr",
                          "typeString": "struct Common.BinData[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 366,
                            "nodeType": "UserDefinedTypeName",
                            "pathNode": {
                              "id": 365,
                              "name": "Common.BinData",
                              "nodeType": "IdentifierPath",
                              "referencedDeclaration": 63,
                              "src": "4006:14:0"
                            },
                            "referencedDeclaration": 63,
                            "src": "4006:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_BinData_$63_storage_ptr",
                              "typeString": "struct Common.BinData"
                            }
                          },
                          "id": 367,
                          "nodeType": "ArrayTypeName",
                          "src": "4006:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage_ptr",
                            "typeString": "struct Common.BinData[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 370,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "4045:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 393,
                        "src": "4037:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 369,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4037:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4005:46:0"
                  },
                  "returnParameters": {
                    "id": 374,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 373,
                        "mutability": "mutable",
                        "name": "newId",
                        "nameLocation": "4074:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 393,
                        "src": "4069:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 372,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "4069:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4068:12:0"
                  },
                  "scope": 529,
                  "src": "3982:181:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 459,
                    "nodeType": "Block",
                    "src": "4415:338:0",
                    "statements": [
                      {
                        "assignments": [
                          404,
                          407
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 404,
                            "mutability": "mutable",
                            "name": "len",
                            "nameLocation": "4428:3:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 459,
                            "src": "4423:8:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 403,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "4423:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 407,
                            "mutability": "mutable",
                            "name": "wasteBin",
                            "nameLocation": "4455:8:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 459,
                            "src": "4433:30:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_BinData_$63_memory_ptr",
                              "typeString": "struct Common.BinData"
                            },
                            "typeName": {
                              "id": 406,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 405,
                                "name": "Common.BinData",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 63,
                                "src": "4433:14:0"
                              },
                              "referencedDeclaration": 63,
                              "src": "4433:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_BinData_$63_storage_ptr",
                                "typeString": "struct Common.BinData"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 414,
                        "initialValue": {
                          "components": [
                            {
                              "expression": {
                                "id": 408,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 398,
                                "src": "4469:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage_ptr",
                                  "typeString": "struct Common.BinData storage ref[] storage pointer"
                                }
                              },
                              "id": 409,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "src": "4469:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "baseExpression": {
                                "id": 410,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 398,
                                "src": "4482:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage_ptr",
                                  "typeString": "struct Common.BinData storage ref[] storage pointer"
                                }
                              },
                              "id": 412,
                              "indexExpression": {
                                "id": 411,
                                "name": "binId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 400,
                                "src": "4487:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4482:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_BinData_$63_storage",
                                "typeString": "struct Common.BinData storage ref"
                              }
                            }
                          ],
                          "id": 413,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "4468:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_uint256_$_t_struct$_BinData_$63_storage_$",
                            "typeString": "tuple(uint256,struct Common.BinData storage ref)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4422:72:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 419,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "expression": {
                                "id": 415,
                                "name": "wasteBin",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 407,
                                "src": "4504:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_BinData_$63_memory_ptr",
                                  "typeString": "struct Common.BinData memory"
                                }
                              },
                              "id": 416,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "bin",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 60,
                              "src": "4504:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_WasteData_$43_memory_ptr_$dyn_memory_ptr",
                                "typeString": "struct Common.WasteData memory[] memory"
                              }
                            },
                            "id": 417,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "4504:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 418,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4527:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "4504:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 425,
                        "nodeType": "IfStatement",
                        "src": "4501:53:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "id": 420,
                                "name": "Common",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 71,
                                "src": "4537:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_Common_$71_$",
                                  "typeString": "type(contract Common)"
                                }
                              },
                              "id": 422,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "EmptyBin",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 23,
                              "src": "4537:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                "typeString": "function () pure"
                              }
                            },
                            "id": 423,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4537:17:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$__$",
                              "typeString": "tuple()"
                            }
                          },
                          "id": 424,
                          "nodeType": "RevertStatement",
                          "src": "4530:24:0"
                        }
                      },
                      {
                        "body": {
                          "id": 452,
                          "nodeType": "Block",
                          "src": "4591:131:0",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_enum$_State_$5",
                                  "typeString": "enum Common.State"
                                },
                                "id": 444,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "baseExpression": {
                                      "expression": {
                                        "id": 436,
                                        "name": "wasteBin",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 407,
                                        "src": "4603:8:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_BinData_$63_memory_ptr",
                                          "typeString": "struct Common.BinData memory"
                                        }
                                      },
                                      "id": 437,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "bin",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 60,
                                      "src": "4603:12:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_WasteData_$43_memory_ptr_$dyn_memory_ptr",
                                        "typeString": "struct Common.WasteData memory[] memory"
                                      }
                                    },
                                    "id": 439,
                                    "indexExpression": {
                                      "id": 438,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 427,
                                      "src": "4616:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "4603:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                      "typeString": "struct Common.WasteData memory"
                                    }
                                  },
                                  "id": 440,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "state",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 42,
                                  "src": "4603:21:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_State_$5",
                                    "typeString": "enum Common.State"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "<",
                                "rightExpression": {
                                  "expression": {
                                    "expression": {
                                      "id": 441,
                                      "name": "Common",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 71,
                                      "src": "4627:6:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_contract$_Common_$71_$",
                                        "typeString": "type(contract Common)"
                                      }
                                    },
                                    "id": 442,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "State",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 5,
                                    "src": "4627:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_enum$_State_$5_$",
                                      "typeString": "type(enum Common.State)"
                                    }
                                  },
                                  "id": 443,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberName": "RECYCLED",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 4,
                                  "src": "4627:21:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_State_$5",
                                    "typeString": "enum Common.State"
                                  }
                                },
                                "src": "4603:45:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 451,
                              "nodeType": "IfStatement",
                              "src": "4600:115:0",
                              "trueBody": {
                                "id": 450,
                                "nodeType": "Block",
                                "src": "4650:65:0",
                                "statements": [
                                  {
                                    "errorCall": {
                                      "arguments": [],
                                      "expression": {
                                        "argumentTypes": [],
                                        "expression": {
                                          "id": 445,
                                          "name": "Common",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 71,
                                          "src": "4668:6:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_contract$_Common_$71_$",
                                            "typeString": "type(contract Common)"
                                          }
                                        },
                                        "id": 447,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "CannotDeleteBinInEngagedMode",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 25,
                                        "src": "4668:35:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                          "typeString": "function () pure"
                                        }
                                      },
                                      "id": 448,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "4668:37:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 449,
                                    "nodeType": "RevertStatement",
                                    "src": "4661:44:0"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 432,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 430,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 427,
                            "src": "4577:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "id": 431,
                            "name": "len",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 404,
                            "src": "4581:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4577:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 453,
                        "initializationExpression": {
                          "assignments": [
                            427
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 427,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "4570:1:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 453,
                              "src": "4565:6:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 426,
                                "name": "uint",
                                "nodeType": "ElementaryTypeName",
                                "src": "4565:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 429,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 428,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4574:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "4565:10:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 434,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "4586:3:0",
                            "subExpression": {
                              "id": 433,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 427,
                              "src": "4586:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 435,
                          "nodeType": "ExpressionStatement",
                          "src": "4586:3:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "4561:161:0"
                      },
                      {
                        "expression": {
                          "id": 457,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "delete",
                          "prefix": true,
                          "src": "4729:18:0",
                          "subExpression": {
                            "baseExpression": {
                              "id": 454,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 398,
                              "src": "4736:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage_ptr",
                                "typeString": "struct Common.BinData storage ref[] storage pointer"
                              }
                            },
                            "id": 456,
                            "indexExpression": {
                              "id": 455,
                              "name": "binId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 400,
                              "src": "4741:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "4736:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_BinData_$63_storage",
                              "typeString": "struct Common.BinData storage ref"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 458,
                        "nodeType": "ExpressionStatement",
                        "src": "4729:18:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 394,
                    "nodeType": "StructuredDocumentation",
                    "src": "4169:171:0",
                    "text": "@dev Removes bin from bin array.\n@notice binId must be less than the bin array at any time since arrays are zero-based.\n@param self - Storage"
                  },
                  "id": 460,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "removeBin",
                  "nameLocation": "4353:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 401,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 398,
                        "mutability": "mutable",
                        "name": "self",
                        "nameLocation": "4388:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 460,
                        "src": "4363:29:0",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage_ptr",
                          "typeString": "struct Common.BinData[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 396,
                            "nodeType": "UserDefinedTypeName",
                            "pathNode": {
                              "id": 395,
                              "name": "Common.BinData",
                              "nodeType": "IdentifierPath",
                              "referencedDeclaration": 63,
                              "src": "4363:14:0"
                            },
                            "referencedDeclaration": 63,
                            "src": "4363:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_BinData_$63_storage_ptr",
                              "typeString": "struct Common.BinData"
                            }
                          },
                          "id": 397,
                          "nodeType": "ArrayTypeName",
                          "src": "4363:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage_ptr",
                            "typeString": "struct Common.BinData[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 400,
                        "mutability": "mutable",
                        "name": "binId",
                        "nameLocation": "4399:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 460,
                        "src": "4394:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 399,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "4394:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4362:43:0"
                  },
                  "returnParameters": {
                    "id": 402,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4415:0:0"
                  },
                  "scope": 529,
                  "src": "4344:409:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 515,
                    "nodeType": "Block",
                    "src": "4896:190:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 487,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 476,
                            "name": "collector",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 470,
                            "src": "4903:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 486,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 483,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "baseExpression": {
                                      "id": 477,
                                      "name": "self",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 465,
                                      "src": "4916:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_enum$_Share_$15_$_t_uint8_$",
                                        "typeString": "mapping(enum Common.Share => uint8)"
                                      }
                                    },
                                    "id": 481,
                                    "indexExpression": {
                                      "expression": {
                                        "expression": {
                                          "id": 478,
                                          "name": "Common",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 71,
                                          "src": "4921:6:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_contract$_Common_$71_$",
                                            "typeString": "type(contract Common)"
                                          }
                                        },
                                        "id": 479,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "Share",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 15,
                                        "src": "4921:12:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_enum$_Share_$15_$",
                                          "typeString": "type(enum Common.Share)"
                                        }
                                      },
                                      "id": 480,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "memberName": "COLLECTOR",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 12,
                                      "src": "4921:22:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_enum$_Share_$15",
                                        "typeString": "enum Common.Share"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "4916:28:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "*",
                                  "rightExpression": {
                                    "id": 482,
                                    "name": "amount",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 467,
                                    "src": "4947:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "4916:37:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 484,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "4915:39:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "/",
                            "rightExpression": {
                              "hexValue": "313030",
                              "id": 485,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4957:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_100_by_1",
                                "typeString": "int_const 100"
                              },
                              "value": "100"
                            },
                            "src": "4915:45:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4903:57:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 488,
                        "nodeType": "ExpressionStatement",
                        "src": "4903:57:0"
                      },
                      {
                        "expression": {
                          "id": 500,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 489,
                            "name": "generator",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 472,
                            "src": "4967:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 499,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 496,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "baseExpression": {
                                      "id": 490,
                                      "name": "self",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 465,
                                      "src": "4980:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_enum$_Share_$15_$_t_uint8_$",
                                        "typeString": "mapping(enum Common.Share => uint8)"
                                      }
                                    },
                                    "id": 494,
                                    "indexExpression": {
                                      "expression": {
                                        "expression": {
                                          "id": 491,
                                          "name": "Common",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 71,
                                          "src": "4985:6:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_contract$_Common_$71_$",
                                            "typeString": "type(contract Common)"
                                          }
                                        },
                                        "id": 492,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "Share",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 15,
                                        "src": "4985:12:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_enum$_Share_$15_$",
                                          "typeString": "type(enum Common.Share)"
                                        }
                                      },
                                      "id": 493,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "memberName": "GENERATOR",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 13,
                                      "src": "4985:22:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_enum$_Share_$15",
                                        "typeString": "enum Common.Share"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "4980:28:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "*",
                                  "rightExpression": {
                                    "id": 495,
                                    "name": "amount",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 467,
                                    "src": "5011:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "4980:37:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 497,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "4979:39:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "/",
                            "rightExpression": {
                              "hexValue": "313030",
                              "id": 498,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5021:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_100_by_1",
                                "typeString": "int_const 100"
                              },
                              "value": "100"
                            },
                            "src": "4979:45:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4967:57:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 501,
                        "nodeType": "ExpressionStatement",
                        "src": "4967:57:0"
                      },
                      {
                        "expression": {
                          "id": 513,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 502,
                            "name": "team",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 474,
                            "src": "5031:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 512,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 509,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "baseExpression": {
                                      "id": 503,
                                      "name": "self",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 465,
                                      "src": "5039:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_enum$_Share_$15_$_t_uint8_$",
                                        "typeString": "mapping(enum Common.Share => uint8)"
                                      }
                                    },
                                    "id": 507,
                                    "indexExpression": {
                                      "expression": {
                                        "expression": {
                                          "id": 504,
                                          "name": "Common",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 71,
                                          "src": "5044:6:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_contract$_Common_$71_$",
                                            "typeString": "type(contract Common)"
                                          }
                                        },
                                        "id": 505,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "Share",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 15,
                                        "src": "5044:12:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_enum$_Share_$15_$",
                                          "typeString": "type(enum Common.Share)"
                                        }
                                      },
                                      "id": 506,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "memberName": "TEAM",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 14,
                                      "src": "5044:17:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_enum$_Share_$15",
                                        "typeString": "enum Common.Share"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "5039:23:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "*",
                                  "rightExpression": {
                                    "id": 508,
                                    "name": "amount",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 467,
                                    "src": "5065:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "5039:32:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 510,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "5038:34:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "/",
                            "rightExpression": {
                              "hexValue": "313030",
                              "id": 511,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5075:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_100_by_1",
                                "typeString": "int_const 100"
                              },
                              "value": "100"
                            },
                            "src": "5038:40:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5031:47:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 514,
                        "nodeType": "ExpressionStatement",
                        "src": "5031:47:0"
                      }
                    ]
                  },
                  "id": 516,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "split",
                  "nameLocation": "4768:5:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 468,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 465,
                        "mutability": "mutable",
                        "name": "self",
                        "nameLocation": "4812:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 516,
                        "src": "4774:42:0",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_enum$_Share_$15_$_t_uint8_$",
                          "typeString": "mapping(enum Common.Share => uint8)"
                        },
                        "typeName": {
                          "id": 464,
                          "keyType": {
                            "id": 462,
                            "nodeType": "UserDefinedTypeName",
                            "pathNode": {
                              "id": 461,
                              "name": "Common.Share",
                              "nodeType": "IdentifierPath",
                              "referencedDeclaration": 15,
                              "src": "4783:12:0"
                            },
                            "referencedDeclaration": 15,
                            "src": "4783:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_Share_$15",
                              "typeString": "enum Common.Share"
                            }
                          },
                          "nodeType": "Mapping",
                          "src": "4774:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_enum$_Share_$15_$_t_uint8_$",
                            "typeString": "mapping(enum Common.Share => uint8)"
                          },
                          "valueType": {
                            "id": 463,
                            "name": "uint8",
                            "nodeType": "ElementaryTypeName",
                            "src": "4797:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 467,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "4823:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 516,
                        "src": "4818:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 466,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "4818:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4773:57:0"
                  },
                  "returnParameters": {
                    "id": 475,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 470,
                        "mutability": "mutable",
                        "name": "collector",
                        "nameLocation": "4858:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 516,
                        "src": "4853:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 469,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "4853:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 472,
                        "mutability": "mutable",
                        "name": "generator",
                        "nameLocation": "4874:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 516,
                        "src": "4869:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 471,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "4869:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 474,
                        "mutability": "mutable",
                        "name": "team",
                        "nameLocation": "4890:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 516,
                        "src": "4885:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 473,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "4885:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4852:43:0"
                  },
                  "scope": 529,
                  "src": "4759:327:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 527,
                    "nodeType": "Block",
                    "src": "5138:35:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 523,
                                "name": "block",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -4,
                                "src": "5154:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_block",
                                  "typeString": "block"
                                }
                              },
                              "id": 524,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "timestamp",
                              "nodeType": "MemberAccess",
                              "src": "5154:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 522,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "5147:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint32_$",
                              "typeString": "type(uint32)"
                            },
                            "typeName": {
                              "id": 521,
                              "name": "uint32",
                              "nodeType": "ElementaryTypeName",
                              "src": "5147:6:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 525,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5147:23:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "functionReturnParameters": 520,
                        "id": 526,
                        "nodeType": "Return",
                        "src": "5140:30:0"
                      }
                    ]
                  },
                  "id": 528,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_now",
                  "nameLocation": "5101:4:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 517,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5105:2:0"
                  },
                  "returnParameters": {
                    "id": 520,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 519,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 528,
                        "src": "5130:6:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "typeName": {
                          "id": 518,
                          "name": "uint32",
                          "nodeType": "ElementaryTypeName",
                          "src": "5130:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5129:8:0"
                  },
                  "scope": 529,
                  "src": "5092:81:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 1737,
              "src": "931:4247:0",
              "usedErrors": []
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 530,
                "nodeType": "StructuredDocumentation",
                "src": "5182:72:0",
                "text": " @dev Interface of the ERC20 standard as defined in the EIP."
              },
              "fullyImplemented": false,
              "id": 605,
              "linearizedBaseContracts": [
                605
              ],
              "name": "IERC20",
              "nameLocation": "5266:6:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 531,
                    "nodeType": "StructuredDocumentation",
                    "src": "5280:163:0",
                    "text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
                  },
                  "id": 539,
                  "name": "Transfer",
                  "nameLocation": "5455:8:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 538,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 533,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "5480:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 539,
                        "src": "5464:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 532,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5464:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 535,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "5502:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 539,
                        "src": "5486:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 534,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5486:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 537,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "5514:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 539,
                        "src": "5506:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 536,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5506:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5463:57:0"
                  },
                  "src": "5449:72:0"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 540,
                    "nodeType": "StructuredDocumentation",
                    "src": "5529:151:0",
                    "text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
                  },
                  "id": 548,
                  "name": "Approval",
                  "nameLocation": "5692:8:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 547,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 542,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "5717:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 548,
                        "src": "5701:21:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 541,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5701:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 544,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "5740:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 548,
                        "src": "5724:23:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 543,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5724:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 546,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "5757:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 548,
                        "src": "5749:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 545,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5749:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5700:63:0"
                  },
                  "src": "5686:78:0"
                },
                {
                  "documentation": {
                    "id": 549,
                    "nodeType": "StructuredDocumentation",
                    "src": "5772:68:0",
                    "text": " @dev Returns the amount of tokens in existence."
                  },
                  "functionSelector": "18160ddd",
                  "id": 554,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "totalSupply",
                  "nameLocation": "5855:11:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 550,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5866:2:0"
                  },
                  "returnParameters": {
                    "id": 553,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 552,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 554,
                        "src": "5892:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 551,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5892:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5891:9:0"
                  },
                  "scope": 605,
                  "src": "5846:55:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 555,
                    "nodeType": "StructuredDocumentation",
                    "src": "5909:74:0",
                    "text": " @dev Returns the amount of tokens owned by `account`."
                  },
                  "functionSelector": "70a08231",
                  "id": 562,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "balanceOf",
                  "nameLocation": "5998:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 558,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 557,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "6016:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 562,
                        "src": "6008:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 556,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6008:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6007:17:0"
                  },
                  "returnParameters": {
                    "id": 561,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 560,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 562,
                        "src": "6048:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 559,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6048:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6047:9:0"
                  },
                  "scope": 605,
                  "src": "5989:68:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 563,
                    "nodeType": "StructuredDocumentation",
                    "src": "6065:208:0",
                    "text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
                  },
                  "functionSelector": "a9059cbb",
                  "id": 572,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transfer",
                  "nameLocation": "6288:8:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 568,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 565,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "6305:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 572,
                        "src": "6297:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 564,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6297:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 567,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "6317:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 572,
                        "src": "6309:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 566,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6309:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6296:28:0"
                  },
                  "returnParameters": {
                    "id": 571,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 570,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 572,
                        "src": "6343:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 569,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "6343:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6342:6:0"
                  },
                  "scope": 605,
                  "src": "6279:70:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 573,
                    "nodeType": "StructuredDocumentation",
                    "src": "6357:270:0",
                    "text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
                  },
                  "functionSelector": "dd62ed3e",
                  "id": 582,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "allowance",
                  "nameLocation": "6642:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 578,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 575,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "6660:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 582,
                        "src": "6652:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 574,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6652:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 577,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "6675:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 582,
                        "src": "6667:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 576,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6667:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6651:32:0"
                  },
                  "returnParameters": {
                    "id": 581,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 580,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 582,
                        "src": "6707:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 579,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6707:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6706:9:0"
                  },
                  "scope": 605,
                  "src": "6633:83:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 583,
                    "nodeType": "StructuredDocumentation",
                    "src": "6724:655:0",
                    "text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
                  },
                  "functionSelector": "095ea7b3",
                  "id": 592,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "approve",
                  "nameLocation": "7394:7:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 588,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 585,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "7410:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 592,
                        "src": "7402:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 584,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7402:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 587,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "7427:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 592,
                        "src": "7419:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 586,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7419:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7401:33:0"
                  },
                  "returnParameters": {
                    "id": 591,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 590,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 592,
                        "src": "7453:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 589,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "7453:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7452:6:0"
                  },
                  "scope": 605,
                  "src": "7385:74:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 593,
                    "nodeType": "StructuredDocumentation",
                    "src": "7467:295:0",
                    "text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
                  },
                  "functionSelector": "23b872dd",
                  "id": 604,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferFrom",
                  "nameLocation": "7777:12:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 600,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 595,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "7808:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 604,
                        "src": "7800:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 594,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7800:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 597,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "7831:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 604,
                        "src": "7823:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 596,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7823:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 599,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "7852:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 604,
                        "src": "7844:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 598,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7844:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7789:76:0"
                  },
                  "returnParameters": {
                    "id": 603,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 602,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 604,
                        "src": "7884:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 601,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "7884:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7883:6:0"
                  },
                  "scope": 605,
                  "src": "7768:122:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 1737,
              "src": "5256:2637:0",
              "usedErrors": []
            },
            {
              "abstract": true,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 606,
                "nodeType": "StructuredDocumentation",
                "src": "7899:505:0",
                "text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
              },
              "fullyImplemented": true,
              "id": 625,
              "linearizedBaseContracts": [
                625
              ],
              "name": "Context",
              "nameLocation": "8424:7:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 614,
                    "nodeType": "Block",
                    "src": "8501:36:0",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 611,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "8519:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 612,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "8519:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 610,
                        "id": 613,
                        "nodeType": "Return",
                        "src": "8512:17:0"
                      }
                    ]
                  },
                  "id": 615,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_msgSender",
                  "nameLocation": "8448:10:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 607,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "8458:2:0"
                  },
                  "returnParameters": {
                    "id": 610,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 609,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 615,
                        "src": "8492:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 608,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "8492:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8491:9:0"
                  },
                  "scope": 625,
                  "src": "8439:98:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 623,
                    "nodeType": "Block",
                    "src": "8612:34:0",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 620,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "8630:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 621,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "data",
                          "nodeType": "MemberAccess",
                          "src": "8630:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_calldata_ptr",
                            "typeString": "bytes calldata"
                          }
                        },
                        "functionReturnParameters": 619,
                        "id": 622,
                        "nodeType": "Return",
                        "src": "8623:15:0"
                      }
                    ]
                  },
                  "id": 624,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_msgData",
                  "nameLocation": "8554:8:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 616,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "8562:2:0"
                  },
                  "returnParameters": {
                    "id": 619,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 618,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 624,
                        "src": "8596:14:0",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 617,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "8596:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8595:16:0"
                  },
                  "scope": 625,
                  "src": "8545:101:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                }
              ],
              "scope": 1737,
              "src": "8406:243:0",
              "usedErrors": []
            },
            {
              "abstract": true,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 627,
                    "name": "Context",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 625,
                    "src": "9191:7:0"
                  },
                  "id": 628,
                  "nodeType": "InheritanceSpecifier",
                  "src": "9191:7:0"
                }
              ],
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 626,
                "nodeType": "StructuredDocumentation",
                "src": "8655:505:0",
                "text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
              },
              "fullyImplemented": true,
              "id": 735,
              "linearizedBaseContracts": [
                735,
                625
              ],
              "name": "Ownable",
              "nameLocation": "9180:7:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "id": 630,
                  "mutability": "mutable",
                  "name": "_owner",
                  "nameLocation": "9222:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 735,
                  "src": "9206:22:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 629,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9206:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "anonymous": false,
                  "id": 636,
                  "name": "OwnershipTransferred",
                  "nameLocation": "9243:20:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 635,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 632,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "previousOwner",
                        "nameLocation": "9280:13:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 636,
                        "src": "9264:29:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 631,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "9264:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 634,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nameLocation": "9311:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 636,
                        "src": "9295:24:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 633,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "9295:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9263:57:0"
                  },
                  "src": "9237:84:0"
                },
                {
                  "body": {
                    "id": 645,
                    "nodeType": "Block",
                    "src": "9442:51:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 641,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 615,
                                "src": "9472:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 642,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "9472:12:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 640,
                            "name": "_transferOwnership",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 734,
                            "src": "9453:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 643,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9453:32:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 644,
                        "nodeType": "ExpressionStatement",
                        "src": "9453:32:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 637,
                    "nodeType": "StructuredDocumentation",
                    "src": "9329:93:0",
                    "text": " @dev Initializes the contract setting the deployer as the initial owner."
                  },
                  "id": 646,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 638,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9439:2:0"
                  },
                  "returnParameters": {
                    "id": 639,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9442:0:0"
                  },
                  "scope": 735,
                  "src": "9428:65:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 653,
                    "nodeType": "Block",
                    "src": "9607:44:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 649,
                            "name": "_checkOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 677,
                            "src": "9618:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$__$",
                              "typeString": "function () view"
                            }
                          },
                          "id": 650,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9618:13:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 651,
                        "nodeType": "ExpressionStatement",
                        "src": "9618:13:0"
                      },
                      {
                        "id": 652,
                        "nodeType": "PlaceholderStatement",
                        "src": "9642:1:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 647,
                    "nodeType": "StructuredDocumentation",
                    "src": "9501:79:0",
                    "text": " @dev Throws if called by any account other than the owner."
                  },
                  "id": 654,
                  "name": "onlyOwner",
                  "nameLocation": "9595:9:0",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 648,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9604:2:0"
                  },
                  "src": "9586:65:0",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 662,
                    "nodeType": "Block",
                    "src": "9787:32:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 660,
                          "name": "_owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 630,
                          "src": "9805:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 659,
                        "id": 661,
                        "nodeType": "Return",
                        "src": "9798:13:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 655,
                    "nodeType": "StructuredDocumentation",
                    "src": "9659:67:0",
                    "text": " @dev Returns the address of the current owner."
                  },
                  "functionSelector": "8da5cb5b",
                  "id": 663,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "owner",
                  "nameLocation": "9741:5:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 656,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9746:2:0"
                  },
                  "returnParameters": {
                    "id": 659,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 658,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 663,
                        "src": "9778:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 657,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "9778:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9777:9:0"
                  },
                  "scope": 735,
                  "src": "9732:87:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 676,
                    "nodeType": "Block",
                    "src": "9942:87:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 672,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 668,
                                  "name": "owner",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 663,
                                  "src": "9961:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                    "typeString": "function () view returns (address)"
                                  }
                                },
                                "id": 669,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "9961:7:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 670,
                                  "name": "_msgSender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 615,
                                  "src": "9972:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                    "typeString": "function () view returns (address)"
                                  }
                                },
                                "id": 671,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "9972:12:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "9961:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
                              "id": 673,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9986:34:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
                                "typeString": "literal_string \"Ownable: caller is not the owner\""
                              },
                              "value": "Ownable: caller is not the owner"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
                                "typeString": "literal_string \"Ownable: caller is not the owner\""
                              }
                            ],
                            "id": 667,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "9953:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 674,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9953:68:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 675,
                        "nodeType": "ExpressionStatement",
                        "src": "9953:68:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 664,
                    "nodeType": "StructuredDocumentation",
                    "src": "9827:64:0",
                    "text": " @dev Throws if the sender is not the owner."
                  },
                  "id": 677,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_checkOwner",
                  "nameLocation": "9906:11:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 665,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9917:2:0"
                  },
                  "returnParameters": {
                    "id": 666,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9942:0:0"
                  },
                  "scope": 735,
                  "src": "9897:132:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 690,
                    "nodeType": "Block",
                    "src": "10434:49:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 686,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "10472:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 685,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "10464:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 684,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "10464:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 687,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "10464:10:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 683,
                            "name": "_transferOwnership",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 734,
                            "src": "10445:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 688,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10445:30:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 689,
                        "nodeType": "ExpressionStatement",
                        "src": "10445:30:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 678,
                    "nodeType": "StructuredDocumentation",
                    "src": "10037:337:0",
                    "text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
                  },
                  "functionSelector": "715018a6",
                  "id": 691,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 681,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 680,
                        "name": "onlyOwner",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 654,
                        "src": "10424:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "10424:9:0"
                    }
                  ],
                  "name": "renounceOwnership",
                  "nameLocation": "10389:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 679,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "10406:2:0"
                  },
                  "returnParameters": {
                    "id": 682,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "10434:0:0"
                  },
                  "scope": 735,
                  "src": "10380:103:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 713,
                    "nodeType": "Block",
                    "src": "10708:131:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 705,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 700,
                                "name": "newOwner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 694,
                                "src": "10727:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 703,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "10747:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 702,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "10739:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 701,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "10739:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 704,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "10739:10:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "10727:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
                              "id": 706,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "10751:40:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
                                "typeString": "literal_string \"Ownable: new owner is the zero address\""
                              },
                              "value": "Ownable: new owner is the zero address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
                                "typeString": "literal_string \"Ownable: new owner is the zero address\""
                              }
                            ],
                            "id": 699,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "10719:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 707,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10719:73:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 708,
                        "nodeType": "ExpressionStatement",
                        "src": "10719:73:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 710,
                              "name": "newOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 694,
                              "src": "10822:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 709,
                            "name": "_transferOwnership",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 734,
                            "src": "10803:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 711,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10803:28:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 712,
                        "nodeType": "ExpressionStatement",
                        "src": "10803:28:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 692,
                    "nodeType": "StructuredDocumentation",
                    "src": "10491:141:0",
                    "text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
                  },
                  "functionSelector": "f2fde38b",
                  "id": 714,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 697,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 696,
                        "name": "onlyOwner",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 654,
                        "src": "10698:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "10698:9:0"
                    }
                  ],
                  "name": "transferOwnership",
                  "nameLocation": "10647:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 695,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 694,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nameLocation": "10673:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 714,
                        "src": "10665:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 693,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "10665:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "10664:18:0"
                  },
                  "returnParameters": {
                    "id": 698,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "10708:0:0"
                  },
                  "scope": 735,
                  "src": "10638:201:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 733,
                    "nodeType": "Block",
                    "src": "11062:128:0",
                    "statements": [
                      {
                        "assignments": [
                          721
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 721,
                            "mutability": "mutable",
                            "name": "oldOwner",
                            "nameLocation": "11081:8:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 733,
                            "src": "11073:16:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 720,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "11073:7:0",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 723,
                        "initialValue": {
                          "id": 722,
                          "name": "_owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 630,
                          "src": "11092:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "11073:25:0"
                      },
                      {
                        "expression": {
                          "id": 726,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 724,
                            "name": "_owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 630,
                            "src": "11109:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 725,
                            "name": "newOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 717,
                            "src": "11118:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "11109:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 727,
                        "nodeType": "ExpressionStatement",
                        "src": "11109:17:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 729,
                              "name": "oldOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 721,
                              "src": "11163:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 730,
                              "name": "newOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 717,
                              "src": "11173:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 728,
                            "name": "OwnershipTransferred",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 636,
                            "src": "11142:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address)"
                            }
                          },
                          "id": 731,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11142:40:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 732,
                        "nodeType": "EmitStatement",
                        "src": "11137:45:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 715,
                    "nodeType": "StructuredDocumentation",
                    "src": "10847:146:0",
                    "text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
                  },
                  "id": 734,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_transferOwnership",
                  "nameLocation": "11008:18:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 718,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 717,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nameLocation": "11035:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 734,
                        "src": "11027:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 716,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "11027:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11026:18:0"
                  },
                  "returnParameters": {
                    "id": 719,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "11062:0:0"
                  },
                  "scope": 735,
                  "src": "10999:191:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                }
              ],
              "scope": 1737,
              "src": "9162:2031:0",
              "usedErrors": []
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 737,
                    "name": "Context",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 625,
                    "src": "12800:7:0"
                  },
                  "id": 738,
                  "nodeType": "InheritanceSpecifier",
                  "src": "12800:7:0"
                },
                {
                  "baseName": {
                    "id": 739,
                    "name": "Common",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 71,
                    "src": "12809:6:0"
                  },
                  "id": 740,
                  "nodeType": "InheritanceSpecifier",
                  "src": "12809:6:0"
                },
                {
                  "baseName": {
                    "id": 741,
                    "name": "Ownable",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 735,
                    "src": "12817:7:0"
                  },
                  "id": 742,
                  "nodeType": "InheritanceSpecifier",
                  "src": "12817:7:0"
                }
              ],
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 736,
                "nodeType": "StructuredDocumentation",
                "src": "11199:1571:0",
                "text": " @title Main\n @author Bobeu: https://github.com/bobeu\n A smart contract that will tokenize the disposal and collection of waste. \nUsers get a token when they dispose of their waste in a waste bin, collectors \nget token for collecting waste and taking them to the waste recyclers \nThe process of tokenization happens when the waste drops in the waste bin. Every\nwaste bin has a unique wallet ID which will receive the token at the end of evacuation.\nThe owners of the waste bin will have a DAO. \nWallet \nToken (iBoola token) which would be paired against either Avalanche, Celo or Polygon \nNew users get 10 $IBT after sign up \nCommunity of waste bins will have a DAO \nWaste generators get 10% collectors get 65 while the iBoola team gets 25% \nDecimals: use standard 18 decimals \nMintable: not mintable\nOwnership privilege :  30% locked for 5 years, 20% for dev team 45% for  initial circulation, \n5% for presale \nPSEUDO\n======\nParties:\no Waste generators.\no Collectors.\no Recyclers.\no When waste is disposed or evacuated, then reward collectors.\no Each waste bin has a unique identifer and an owner.\no On sign up, user gets 10 $IBT Token.\no Waste collectors own a DAO.\no Waste bin owners own a DAO.\no Reward sharing formula Note - It is configurable. The owner account is able to \nset each of these fields.\n- Waste generators 10%.\n- Collectors 65%.\n- Team 25%."
              },
              "fullyImplemented": true,
              "id": 1736,
              "linearizedBaseContracts": [
                1736,
                735,
                71,
                625
              ],
              "name": "IBoolaContractV",
              "nameLocation": "12781:15:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "documentation": {
                    "id": 743,
                    "nodeType": "StructuredDocumentation",
                    "src": "12834:26:0",
                    "text": "@dev New sign up reward"
                  },
                  "functionSelector": "f9404506",
                  "id": 745,
                  "mutability": "mutable",
                  "name": "newSignUpReward",
                  "nameLocation": "12878:15:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1736,
                  "src": "12866:27:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 744,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "12866:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "documentation": {
                    "id": 746,
                    "nodeType": "StructuredDocumentation",
                    "src": "12902:20:0",
                    "text": "@dev iBoola Token"
                  },
                  "functionSelector": "fc0c546a",
                  "id": 748,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "12943:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1736,
                  "src": "12928:20:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 747,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12928:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "documentation": {
                    "id": 749,
                    "nodeType": "StructuredDocumentation",
                    "src": "12957:37:0",
                    "text": "@dev Total waste generated to date"
                  },
                  "functionSelector": "ffc2105c",
                  "id": 751,
                  "mutability": "mutable",
                  "name": "totalWasteGenerated",
                  "nameLocation": "13015:19:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1736,
                  "src": "13000:34:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 750,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13000:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "documentation": {
                    "id": 752,
                    "nodeType": "StructuredDocumentation",
                    "src": "13043:24:0",
                    "text": "@dev Collector reward"
                  },
                  "functionSelector": "235eb9f5",
                  "id": 754,
                  "mutability": "mutable",
                  "name": "collectorReward",
                  "nameLocation": "13085:15:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1736,
                  "src": "13073:27:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 753,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "13073:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "documentation": {
                    "id": 755,
                    "nodeType": "StructuredDocumentation",
                    "src": "13109:36:0",
                    "text": "@dev Total bin registered to date"
                  },
                  "functionSelector": "1f2a4a3f",
                  "id": 757,
                  "mutability": "mutable",
                  "name": "binCounter",
                  "nameLocation": "13163:10:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1736,
                  "src": "13151:22:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 756,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "13151:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "documentation": {
                    "id": 758,
                    "nodeType": "StructuredDocumentation",
                    "src": "13182:31:0",
                    "text": "@dev Price of recycled waste"
                  },
                  "functionSelector": "a035b1fe",
                  "id": 760,
                  "mutability": "mutable",
                  "name": "price",
                  "nameLocation": "13231:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1736,
                  "src": "13219:17:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 759,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "13219:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "documentation": {
                    "id": 761,
                    "nodeType": "StructuredDocumentation",
                    "src": "13245:188:0",
                    "text": "@dev Array of bins \n{ Contain bins which contain collected wastes which contains wastedata}\n@notice Bins in this list are owned by addresses."
                  },
                  "functionSelector": "885c7b38",
                  "id": 765,
                  "mutability": "mutable",
                  "name": "bins",
                  "nameLocation": "13456:4:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1736,
                  "src": "13439:21:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage",
                    "typeString": "struct Common.BinData[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 763,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 762,
                        "name": "BinData",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 63,
                        "src": "13439:7:0"
                      },
                      "referencedDeclaration": 63,
                      "src": "13439:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_BinData_$63_storage_ptr",
                        "typeString": "struct Common.BinData"
                      }
                    },
                    "id": 764,
                    "nodeType": "ArrayTypeName",
                    "src": "13439:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage_ptr",
                      "typeString": "struct Common.BinData[]"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "c2f0c279",
                  "id": 770,
                  "mutability": "mutable",
                  "name": "formula",
                  "nameLocation": "13503:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1736,
                  "src": "13473:37:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_enum$_Share_$15_$_t_uint8_$",
                    "typeString": "mapping(enum Common.Share => uint8)"
                  },
                  "typeName": {
                    "id": 769,
                    "keyType": {
                      "id": 767,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 766,
                        "name": "Share",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 15,
                        "src": "13482:5:0"
                      },
                      "referencedDeclaration": 15,
                      "src": "13482:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_Share_$15",
                        "typeString": "enum Common.Share"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "13473:22:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_enum$_Share_$15_$_t_uint8_$",
                      "typeString": "mapping(enum Common.Share => uint8)"
                    },
                    "valueType": {
                      "id": 768,
                      "name": "uint8",
                      "nodeType": "ElementaryTypeName",
                      "src": "13489:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "documentation": {
                    "id": 771,
                    "nodeType": "StructuredDocumentation",
                    "src": "13525:222:0",
                    "text": "@dev Mapping of Generated and Recycled Waste State -> binId (binCounter) -> WasteData\nKeys type: \no State\no uint256\nvalue:\narray of struct(s) "
                  },
                  "id": 778,
                  "mutability": "mutable",
                  "name": "_garbages",
                  "nameLocation": "13790:9:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1736,
                  "src": "13753:46:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_enum$_State_$5_$_t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_$",
                    "typeString": "mapping(enum Common.State => struct Common.WasteData[])"
                  },
                  "typeName": {
                    "id": 777,
                    "keyType": {
                      "id": 773,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 772,
                        "name": "State",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 5,
                        "src": "13762:5:0"
                      },
                      "referencedDeclaration": 5,
                      "src": "13762:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_State_$5",
                        "typeString": "enum Common.State"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "13753:28:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_enum$_State_$5_$_t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_$",
                      "typeString": "mapping(enum Common.State => struct Common.WasteData[])"
                    },
                    "valueType": {
                      "baseType": {
                        "id": 775,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 774,
                          "name": "WasteData",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 43,
                          "src": "13769:9:0"
                        },
                        "referencedDeclaration": 43,
                        "src": "13769:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_WasteData_$43_storage_ptr",
                          "typeString": "struct Common.WasteData"
                        }
                      },
                      "id": 776,
                      "nodeType": "ArrayTypeName",
                      "src": "13769:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_ptr",
                        "typeString": "struct Common.WasteData[]"
                      }
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "documentation": {
                    "id": 779,
                    "nodeType": "StructuredDocumentation",
                    "src": "13812:172:0",
                    "text": "@dev Mapping of Waste State -> user -> profile\nKeys type: \no State\no address\nvalue:\nstruct "
                  },
                  "id": 787,
                  "mutability": "mutable",
                  "name": "profiles",
                  "nameLocation": "14036:8:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1736,
                  "src": "13990:54:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$",
                    "typeString": "mapping(enum Common.Category => mapping(address => struct Common.Profile))"
                  },
                  "typeName": {
                    "id": 786,
                    "keyType": {
                      "id": 781,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 780,
                        "name": "Category",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 11,
                        "src": "13999:8:0"
                      },
                      "referencedDeclaration": 11,
                      "src": "13999:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_Category_$11",
                        "typeString": "enum Common.Category"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "13990:45:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$",
                      "typeString": "mapping(enum Common.Category => mapping(address => struct Common.Profile))"
                    },
                    "valueType": {
                      "id": 785,
                      "keyType": {
                        "id": 782,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "14017:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "14009:25:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$",
                        "typeString": "mapping(address => struct Common.Profile)"
                      },
                      "valueType": {
                        "id": 784,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 783,
                          "name": "Profile",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 56,
                          "src": "14026:7:0"
                        },
                        "referencedDeclaration": 56,
                        "src": "14026:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Profile_$56_storage_ptr",
                          "typeString": "struct Common.Profile"
                        }
                      }
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "documentation": {
                    "id": 788,
                    "nodeType": "StructuredDocumentation",
                    "src": "14053:129:0",
                    "text": "@dev Sign up fees for different category.\n@notice - It can be configured to suit any category."
                  },
                  "functionSelector": "0095db2d",
                  "id": 793,
                  "mutability": "mutable",
                  "name": "signUpFees",
                  "nameLocation": "14223:10:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 1736,
                  "src": "14188:45:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_uint256_$",
                    "typeString": "mapping(enum Common.Category => uint256)"
                  },
                  "typeName": {
                    "id": 792,
                    "keyType": {
                      "id": 790,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 789,
                        "name": "Category",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 11,
                        "src": "14197:8:0"
                      },
                      "referencedDeclaration": 11,
                      "src": "14197:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_Category_$11",
                        "typeString": "enum Common.Category"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "14188:27:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_uint256_$",
                      "typeString": "mapping(enum Common.Category => uint256)"
                    },
                    "valueType": {
                      "id": 791,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "14207:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 844,
                    "nodeType": "Block",
                    "src": "14406:277:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 808,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 805,
                            "name": "binId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 796,
                            "src": "14420:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">=",
                          "rightExpression": {
                            "expression": {
                              "id": 806,
                              "name": "bins",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 765,
                              "src": "14429:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage",
                                "typeString": "struct Common.BinData storage ref[] storage ref"
                              }
                            },
                            "id": 807,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "14429:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "14420:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 812,
                        "nodeType": "IfStatement",
                        "src": "14417:46:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 809,
                              "name": "InvalidBinID",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 21,
                              "src": "14449:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                "typeString": "function () pure"
                              }
                            },
                            "id": 810,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "14449:14:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$__$",
                              "typeString": "tuple()"
                            }
                          },
                          "id": 811,
                          "nodeType": "RevertStatement",
                          "src": "14442:21:0"
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_enum$_State_$5",
                            "typeString": "enum Common.State"
                          },
                          "id": 816,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 813,
                            "name": "state",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 801,
                            "src": "14477:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_State_$5",
                              "typeString": "enum Common.State"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "expression": {
                              "id": 814,
                              "name": "State",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 5,
                              "src": "14486:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_State_$5_$",
                                "typeString": "type(enum Common.State)"
                              }
                            },
                            "id": 815,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "COLLECTED",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3,
                            "src": "14486:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_State_$5",
                              "typeString": "enum Common.State"
                            }
                          },
                          "src": "14477:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 829,
                        "nodeType": "IfStatement",
                        "src": "14474:117:0",
                        "trueBody": {
                          "id": 828,
                          "nodeType": "Block",
                          "src": "14503:88:0",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 823,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 817,
                                  "name": "wasteId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 798,
                                  "src": "14521:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">=",
                                "rightExpression": {
                                  "expression": {
                                    "expression": {
                                      "baseExpression": {
                                        "id": 818,
                                        "name": "bins",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 765,
                                        "src": "14532:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage",
                                          "typeString": "struct Common.BinData storage ref[] storage ref"
                                        }
                                      },
                                      "id": 820,
                                      "indexExpression": {
                                        "id": 819,
                                        "name": "binId",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 796,
                                        "src": "14537:5:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "14532:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_BinData_$63_storage",
                                        "typeString": "struct Common.BinData storage ref"
                                      }
                                    },
                                    "id": 821,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "bin",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 60,
                                    "src": "14532:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_WasteData_$43_storage_$dyn_storage",
                                      "typeString": "struct Common.WasteData storage ref[] storage ref"
                                    }
                                  },
                                  "id": 822,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "14532:22:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "14521:33:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 827,
                              "nodeType": "IfStatement",
                              "src": "14518:61:0",
                              "trueBody": {
                                "errorCall": {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "id": 824,
                                    "name": "InvalidWasteId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 27,
                                    "src": "14563:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                      "typeString": "function () pure"
                                    }
                                  },
                                  "id": 825,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "14563:16:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_tuple$__$",
                                    "typeString": "tuple()"
                                  }
                                },
                                "id": 826,
                                "nodeType": "RevertStatement",
                                "src": "14556:23:0"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_enum$_State_$5",
                                "typeString": "enum Common.State"
                              },
                              "id": 839,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "baseExpression": {
                                    "expression": {
                                      "baseExpression": {
                                        "id": 831,
                                        "name": "bins",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 765,
                                        "src": "14609:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage",
                                          "typeString": "struct Common.BinData storage ref[] storage ref"
                                        }
                                      },
                                      "id": 833,
                                      "indexExpression": {
                                        "id": 832,
                                        "name": "binId",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 796,
                                        "src": "14614:5:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "14609:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_BinData_$63_storage",
                                        "typeString": "struct Common.BinData storage ref"
                                      }
                                    },
                                    "id": 834,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "bin",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 60,
                                    "src": "14609:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_WasteData_$43_storage_$dyn_storage",
                                      "typeString": "struct Common.WasteData storage ref[] storage ref"
                                    }
                                  },
                                  "id": 836,
                                  "indexExpression": {
                                    "id": 835,
                                    "name": "wasteId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 798,
                                    "src": "14625:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "14609:24:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_WasteData_$43_storage",
                                    "typeString": "struct Common.WasteData storage ref"
                                  }
                                },
                                "id": 837,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "state",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 42,
                                "src": "14609:30:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_State_$5",
                                  "typeString": "enum Common.State"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 838,
                                "name": "state",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 801,
                                "src": "14643:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_State_$5",
                                  "typeString": "enum Common.State"
                                }
                              },
                              "src": "14609:39:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "id": 840,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 803,
                              "src": "14650:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 830,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "14601:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 841,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "14601:62:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 842,
                        "nodeType": "ExpressionStatement",
                        "src": "14601:62:0"
                      },
                      {
                        "id": 843,
                        "nodeType": "PlaceholderStatement",
                        "src": "14674:1:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 794,
                    "nodeType": "StructuredDocumentation",
                    "src": "14242:15:0",
                    "text": "@dev Rewards"
                  },
                  "id": 845,
                  "name": "validateWasteId",
                  "nameLocation": "14323:15:0",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 804,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 796,
                        "mutability": "mutable",
                        "name": "binId",
                        "nameLocation": "14344:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 845,
                        "src": "14339:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 795,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "14339:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 798,
                        "mutability": "mutable",
                        "name": "wasteId",
                        "nameLocation": "14356:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 845,
                        "src": "14351:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 797,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "14351:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 801,
                        "mutability": "mutable",
                        "name": "state",
                        "nameLocation": "14371:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 845,
                        "src": "14365:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_State_$5",
                          "typeString": "enum Common.State"
                        },
                        "typeName": {
                          "id": 800,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 799,
                            "name": "State",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 5,
                            "src": "14365:5:0"
                          },
                          "referencedDeclaration": 5,
                          "src": "14365:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_State_$5",
                            "typeString": "enum Common.State"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 803,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "14392:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 845,
                        "src": "14378:26:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 802,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "14378:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14338:67:0"
                  },
                  "src": "14314:369:0",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 863,
                    "nodeType": "Block",
                    "src": "14770:87:0",
                    "statements": [
                      {
                        "condition": {
                          "id": 857,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "14784:23:0",
                          "subExpression": {
                            "arguments": [
                              {
                                "id": 854,
                                "name": "cat",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 849,
                                "src": "14798:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Category_$11",
                                  "typeString": "enum Common.Category"
                                }
                              },
                              {
                                "id": 855,
                                "name": "who",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 851,
                                "src": "14803:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_enum$_Category_$11",
                                  "typeString": "enum Common.Category"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 853,
                              "name": "_getApproval",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1333,
                              "src": "14785:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_enum$_Category_$11_$_t_address_$returns$_t_bool_$",
                                "typeString": "function (enum Common.Category,address) view returns (bool)"
                              }
                            },
                            "id": 856,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "14785:22:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 861,
                        "nodeType": "IfStatement",
                        "src": "14781:56:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 858,
                              "name": "UserAlreadyNotExist",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 19,
                              "src": "14816:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                "typeString": "function () pure"
                              }
                            },
                            "id": 859,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "14816:21:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$__$",
                              "typeString": "tuple()"
                            }
                          },
                          "id": 860,
                          "nodeType": "RevertStatement",
                          "src": "14809:28:0"
                        }
                      },
                      {
                        "id": 862,
                        "nodeType": "PlaceholderStatement",
                        "src": "14848:1:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 846,
                    "nodeType": "StructuredDocumentation",
                    "src": "14691:26:0",
                    "text": "Checks user's existence"
                  },
                  "id": 864,
                  "name": "isApproved",
                  "nameLocation": "14732:10:0",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 852,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 849,
                        "mutability": "mutable",
                        "name": "cat",
                        "nameLocation": "14752:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 864,
                        "src": "14743:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Category_$11",
                          "typeString": "enum Common.Category"
                        },
                        "typeName": {
                          "id": 848,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 847,
                            "name": "Category",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 11,
                            "src": "14743:8:0"
                          },
                          "referencedDeclaration": 11,
                          "src": "14743:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Category_$11",
                            "typeString": "enum Common.Category"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 851,
                        "mutability": "mutable",
                        "name": "who",
                        "nameLocation": "14765:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 864,
                        "src": "14757:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 850,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "14757:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14742:27:0"
                  },
                  "src": "14723:134:0",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 877,
                    "nodeType": "Block",
                    "src": "14934:67:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              },
                              "id": 872,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 870,
                                "name": "cat",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 867,
                                "src": "14953:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "hexValue": "34",
                                "id": 871,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "14959:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_4_by_1",
                                  "typeString": "int_const 4"
                                },
                                "value": "4"
                              },
                              "src": "14953:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "496e76616c69642063617465676f7279",
                              "id": 873,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "14962:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c42ca90c935df80db9ecab8e34c935bcc35abb722f6ed440da8d67e0cbd0ec47",
                                "typeString": "literal_string \"Invalid category\""
                              },
                              "value": "Invalid category"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_c42ca90c935df80db9ecab8e34c935bcc35abb722f6ed440da8d67e0cbd0ec47",
                                "typeString": "literal_string \"Invalid category\""
                              }
                            ],
                            "id": 869,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "14945:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 874,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "14945:36:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 875,
                        "nodeType": "ExpressionStatement",
                        "src": "14945:36:0"
                      },
                      {
                        "id": 876,
                        "nodeType": "PlaceholderStatement",
                        "src": "14992:1:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 865,
                    "nodeType": "StructuredDocumentation",
                    "src": "14865:26:0",
                    "text": "@dev Validates category"
                  },
                  "id": 878,
                  "name": "validateCategory",
                  "nameLocation": "14906:16:0",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 868,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 867,
                        "mutability": "mutable",
                        "name": "cat",
                        "nameLocation": "14929:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 878,
                        "src": "14923:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 866,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "14923:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14922:11:0"
                  },
                  "src": "14897:104:0",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 926,
                    "nodeType": "Block",
                    "src": "15140:278:0",
                    "statements": [
                      {
                        "assignments": [
                          887,
                          889
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 887,
                            "mutability": "mutable",
                            "name": "low",
                            "nameLocation": "15158:3:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 926,
                            "src": "15152:9:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            "typeName": {
                              "id": 886,
                              "name": "uint8",
                              "nodeType": "ElementaryTypeName",
                              "src": "15152:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 889,
                            "mutability": "mutable",
                            "name": "high",
                            "nameLocation": "15169:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 926,
                            "src": "15163:10:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            "typeName": {
                              "id": 888,
                              "name": "uint8",
                              "nodeType": "ElementaryTypeName",
                              "src": "15163:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 893,
                        "initialValue": {
                          "components": [
                            {
                              "hexValue": "30",
                              "id": 890,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15178:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "hexValue": "3530",
                              "id": 891,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15181:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_50_by_1",
                                "typeString": "int_const 50"
                              },
                              "value": "50"
                            }
                          ],
                          "id": 892,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "15177:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_rational_0_by_1_$_t_rational_50_by_1_$",
                            "typeString": "tuple(int_const 0,int_const 50)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "15151:33:0"
                      },
                      {
                        "expression": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 898,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 894,
                                "name": "wastedata",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 884,
                                "src": "15195:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                                  "typeString": "string memory[] memory"
                                }
                              },
                              "id": 896,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "src": "15195:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 897,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15215:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "15195:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "arguments": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "id": 920,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 915,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "expression": {
                                      "id": 912,
                                      "name": "wastedata",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 884,
                                      "src": "15336:9:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                                        "typeString": "string memory[] memory"
                                      }
                                    },
                                    "id": 913,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "length",
                                    "nodeType": "MemberAccess",
                                    "src": "15336:16:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": ">",
                                  "rightExpression": {
                                    "id": 914,
                                    "name": "low",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 887,
                                    "src": "15355:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  "src": "15336:22:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "&&",
                                "rightExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 919,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "expression": {
                                      "id": 916,
                                      "name": "wastedata",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 884,
                                      "src": "15362:9:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                                        "typeString": "string memory[] memory"
                                      }
                                    },
                                    "id": 917,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "length",
                                    "nodeType": "MemberAccess",
                                    "src": "15362:16:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "<=",
                                  "rightExpression": {
                                    "id": 918,
                                    "name": "high",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 889,
                                    "src": "15382:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  "src": "15362:24:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "src": "15336:50:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              {
                                "hexValue": "696e76616c6964",
                                "id": 921,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "15388:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_ffd7db0f9d5cdeb49c4c9eba649d4dc6d852d64671e65488e57f58584992ac68",
                                  "typeString": "literal_string \"invalid\""
                                },
                                "value": "invalid"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                {
                                  "typeIdentifier": "t_stringliteral_ffd7db0f9d5cdeb49c4c9eba649d4dc6d852d64671e65488e57f58584992ac68",
                                  "typeString": "literal_string \"invalid\""
                                }
                              ],
                              "id": 911,
                              "name": "require",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [
                                -18,
                                -18
                              ],
                              "referencedDeclaration": -18,
                              "src": "15328:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                "typeString": "function (bool,string memory) pure"
                              }
                            },
                            "id": 922,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "15328:70:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$__$",
                              "typeString": "tuple()"
                            }
                          },
                          "id": 923,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "15195:203:0",
                          "trueExpression": {
                            "arguments": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "id": 908,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 903,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "expression": {
                                      "id": 900,
                                      "name": "wasteIDs",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 881,
                                      "src": "15241:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                        "typeString": "uint256[] memory"
                                      }
                                    },
                                    "id": 901,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "length",
                                    "nodeType": "MemberAccess",
                                    "src": "15241:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": ">",
                                  "rightExpression": {
                                    "id": 902,
                                    "name": "low",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 887,
                                    "src": "15259:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  "src": "15241:21:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "&&",
                                "rightExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 907,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "expression": {
                                      "id": 904,
                                      "name": "wasteIDs",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 881,
                                      "src": "15266:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                        "typeString": "uint256[] memory"
                                      }
                                    },
                                    "id": 905,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "length",
                                    "nodeType": "MemberAccess",
                                    "src": "15266:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "<=",
                                  "rightExpression": {
                                    "id": 906,
                                    "name": "high",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 889,
                                    "src": "15285:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  "src": "15266:23:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "src": "15241:48:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              {
                                "hexValue": "696e76616c6964",
                                "id": 909,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "15305:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_ffd7db0f9d5cdeb49c4c9eba649d4dc6d852d64671e65488e57f58584992ac68",
                                  "typeString": "literal_string \"invalid\""
                                },
                                "value": "invalid"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                {
                                  "typeIdentifier": "t_stringliteral_ffd7db0f9d5cdeb49c4c9eba649d4dc6d852d64671e65488e57f58584992ac68",
                                  "typeString": "literal_string \"invalid\""
                                }
                              ],
                              "id": 899,
                              "name": "require",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [
                                -18,
                                -18
                              ],
                              "referencedDeclaration": -18,
                              "src": "15219:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                "typeString": "function (bool,string memory) pure"
                              }
                            },
                            "id": 910,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "15219:106:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$__$",
                              "typeString": "tuple()"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 924,
                        "nodeType": "ExpressionStatement",
                        "src": "15195:203:0"
                      },
                      {
                        "id": 925,
                        "nodeType": "PlaceholderStatement",
                        "src": "15409:1:0"
                      }
                    ]
                  },
                  "id": 927,
                  "name": "validateSize",
                  "nameLocation": "15076:12:0",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 885,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 881,
                        "mutability": "mutable",
                        "name": "wasteIDs",
                        "nameLocation": "15103:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 927,
                        "src": "15089:22:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 879,
                            "name": "uint",
                            "nodeType": "ElementaryTypeName",
                            "src": "15089:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 880,
                          "nodeType": "ArrayTypeName",
                          "src": "15089:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                            "typeString": "uint256[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 884,
                        "mutability": "mutable",
                        "name": "wastedata",
                        "nameLocation": "15129:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 927,
                        "src": "15113:25:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                          "typeString": "string[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 882,
                            "name": "string",
                            "nodeType": "ElementaryTypeName",
                            "src": "15113:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage_ptr",
                              "typeString": "string"
                            }
                          },
                          "id": 883,
                          "nodeType": "ArrayTypeName",
                          "src": "15113:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                            "typeString": "string[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "15088:51:0"
                  },
                  "src": "15067:351:0",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 977,
                    "nodeType": "Block",
                    "src": "15455:261:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 934,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 932,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 748,
                            "src": "15467:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 933,
                            "name": "_token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 929,
                            "src": "15475:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "15467:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 935,
                        "nodeType": "ExpressionStatement",
                        "src": "15467:14:0"
                      },
                      {
                        "expression": {
                          "id": 943,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 936,
                            "name": "newSignUpReward",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 745,
                            "src": "15492:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_rational_10000000000000000000_by_1",
                              "typeString": "int_const 10000000000000000000"
                            },
                            "id": 942,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "leftExpression": {
                              "hexValue": "3130",
                              "id": 937,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15510:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_10_by_1",
                                "typeString": "int_const 10"
                              },
                              "value": "10"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                    "typeString": "int_const 1000000000000000000"
                                  },
                                  "id": 940,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "hexValue": "3130",
                                    "id": 938,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "15516:2:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_10_by_1",
                                      "typeString": "int_const 10"
                                    },
                                    "value": "10"
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "**",
                                  "rightExpression": {
                                    "hexValue": "3138",
                                    "id": 939,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "15522:2:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_18_by_1",
                                      "typeString": "int_const 18"
                                    },
                                    "value": "18"
                                  },
                                  "src": "15516:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                    "typeString": "int_const 1000000000000000000"
                                  }
                                }
                              ],
                              "id": 941,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "15515:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                "typeString": "int_const 1000000000000000000"
                              }
                            },
                            "src": "15510:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_10000000000000000000_by_1",
                              "typeString": "int_const 10000000000000000000"
                            }
                          },
                          "src": "15492:33:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 944,
                        "nodeType": "ExpressionStatement",
                        "src": "15492:33:0"
                      },
                      {
                        "expression": {
                          "id": 954,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "baseExpression": {
                                  "id": 945,
                                  "name": "profiles",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 787,
                                  "src": "15536:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$",
                                    "typeString": "mapping(enum Common.Category => mapping(address => struct Common.Profile storage ref))"
                                  }
                                },
                                "id": 950,
                                "indexExpression": {
                                  "expression": {
                                    "id": 946,
                                    "name": "Category",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 11,
                                    "src": "15545:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_enum$_Category_$11_$",
                                      "typeString": "type(enum Common.Category)"
                                    }
                                  },
                                  "id": 947,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberName": "BINOWNER",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 9,
                                  "src": "15545:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_Category_$11",
                                    "typeString": "enum Common.Category"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "15536:27:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$",
                                  "typeString": "mapping(address => struct Common.Profile storage ref)"
                                }
                              },
                              "id": 951,
                              "indexExpression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 948,
                                  "name": "_msgSender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 615,
                                  "src": "15564:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                    "typeString": "function () view returns (address)"
                                  }
                                },
                                "id": 949,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "15564:12:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "15536:41:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Profile_$56_storage",
                                "typeString": "struct Common.Profile storage ref"
                              }
                            },
                            "id": 952,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "approval",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 49,
                            "src": "15536:50:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 953,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "15589:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "15536:57:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 955,
                        "nodeType": "ExpressionStatement",
                        "src": "15536:57:0"
                      },
                      {
                        "expression": {
                          "id": 961,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 956,
                              "name": "formula",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 770,
                              "src": "15604:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_enum$_Share_$15_$_t_uint8_$",
                                "typeString": "mapping(enum Common.Share => uint8)"
                              }
                            },
                            "id": 959,
                            "indexExpression": {
                              "expression": {
                                "id": 957,
                                "name": "Share",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 15,
                                "src": "15612:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_enum$_Share_$15_$",
                                  "typeString": "type(enum Common.Share)"
                                }
                              },
                              "id": 958,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "COLLECTOR",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 12,
                              "src": "15612:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Share_$15",
                                "typeString": "enum Common.Share"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "15604:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "3635",
                            "id": 960,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "15631:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_65_by_1",
                              "typeString": "int_const 65"
                            },
                            "value": "65"
                          },
                          "src": "15604:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "id": 962,
                        "nodeType": "ExpressionStatement",
                        "src": "15604:29:0"
                      },
                      {
                        "expression": {
                          "id": 968,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 963,
                              "name": "formula",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 770,
                              "src": "15644:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_enum$_Share_$15_$_t_uint8_$",
                                "typeString": "mapping(enum Common.Share => uint8)"
                              }
                            },
                            "id": 966,
                            "indexExpression": {
                              "expression": {
                                "id": 964,
                                "name": "Share",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 15,
                                "src": "15652:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_enum$_Share_$15_$",
                                  "typeString": "type(enum Common.Share)"
                                }
                              },
                              "id": 965,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "GENERATOR",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 13,
                              "src": "15652:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Share_$15",
                                "typeString": "enum Common.Share"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "15644:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "3130",
                            "id": 967,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "15671:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_10_by_1",
                              "typeString": "int_const 10"
                            },
                            "value": "10"
                          },
                          "src": "15644:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "id": 969,
                        "nodeType": "ExpressionStatement",
                        "src": "15644:29:0"
                      },
                      {
                        "expression": {
                          "id": 975,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 970,
                              "name": "formula",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 770,
                              "src": "15684:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_enum$_Share_$15_$_t_uint8_$",
                                "typeString": "mapping(enum Common.Share => uint8)"
                              }
                            },
                            "id": 973,
                            "indexExpression": {
                              "expression": {
                                "id": 971,
                                "name": "Share",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 15,
                                "src": "15692:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_enum$_Share_$15_$",
                                  "typeString": "type(enum Common.Share)"
                                }
                              },
                              "id": 972,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "TEAM",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 14,
                              "src": "15692:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Share_$15",
                                "typeString": "enum Common.Share"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "15684:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "3235",
                            "id": 974,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "15706:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_25_by_1",
                              "typeString": "int_const 25"
                            },
                            "value": "25"
                          },
                          "src": "15684:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "id": 976,
                        "nodeType": "ExpressionStatement",
                        "src": "15684:24:0"
                      }
                    ]
                  },
                  "id": 978,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 930,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 929,
                        "mutability": "mutable",
                        "name": "_token",
                        "nameLocation": "15447:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 978,
                        "src": "15439:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 928,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "15439:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "15438:16:0"
                  },
                  "returnParameters": {
                    "id": 931,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "15455:0:0"
                  },
                  "scope": 1736,
                  "src": "15426:290:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1012,
                    "nodeType": "Block",
                    "src": "15875:225:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 991,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "!",
                              "prefix": true,
                              "src": "15893:56:0",
                              "subExpression": {
                                "expression": {
                                  "baseExpression": {
                                    "baseExpression": {
                                      "id": 983,
                                      "name": "profiles",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 787,
                                      "src": "15894:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$",
                                        "typeString": "mapping(enum Common.Category => mapping(address => struct Common.Profile storage ref))"
                                      }
                                    },
                                    "id": 986,
                                    "indexExpression": {
                                      "expression": {
                                        "id": 984,
                                        "name": "Category",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 11,
                                        "src": "15903:8:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_enum$_Category_$11_$",
                                          "typeString": "type(enum Common.Category)"
                                        }
                                      },
                                      "id": 985,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "memberName": "COLLECTOR",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 6,
                                      "src": "15903:18:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_enum$_Category_$11",
                                        "typeString": "enum Common.Category"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "15894:28:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$",
                                      "typeString": "mapping(address => struct Common.Profile storage ref)"
                                    }
                                  },
                                  "id": 989,
                                  "indexExpression": {
                                    "arguments": [],
                                    "expression": {
                                      "argumentTypes": [],
                                      "id": 987,
                                      "name": "_msgSender",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 615,
                                      "src": "15923:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                        "typeString": "function () view returns (address)"
                                      }
                                    },
                                    "id": 988,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "15923:12:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "15894:42:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Profile_$56_storage",
                                    "typeString": "struct Common.Profile storage ref"
                                  }
                                },
                                "id": 990,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "isRegistered",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 51,
                                "src": "15894:55:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416c7265616479207369676e207570",
                              "id": 992,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15951:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_0855ec215c237c3402a18339339aeeabd173180125b97094d2e4366ff55d9ec5",
                                "typeString": "literal_string \"Already sign up\""
                              },
                              "value": "Already sign up"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_0855ec215c237c3402a18339339aeeabd173180125b97094d2e4366ff55d9ec5",
                                "typeString": "literal_string \"Already sign up\""
                              }
                            ],
                            "id": 982,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "15885:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 993,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "15885:84:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 994,
                        "nodeType": "ExpressionStatement",
                        "src": "15885:84:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 998,
                              "name": "profiles",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 787,
                              "src": "16007:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$",
                                "typeString": "mapping(enum Common.Category => mapping(address => struct Common.Profile storage ref))"
                              }
                            },
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 999,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 615,
                                "src": "16017:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 1000,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "16017:12:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$",
                                "typeString": "mapping(enum Common.Category => mapping(address => struct Common.Profile storage ref))"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 995,
                              "name": "IBoolaLib",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 529,
                              "src": "15979:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IBoolaLib_$529_$",
                                "typeString": "type(library IBoolaLib)"
                              }
                            },
                            "id": 997,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "registerCollector",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 132,
                            "src": "15979:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$_$_t_address_$returns$__$",
                              "typeString": "function (mapping(enum Common.Category => mapping(address => struct Common.Profile storage ref)),address)"
                            }
                          },
                          "id": 1001,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "15979:51:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1002,
                        "nodeType": "ExpressionStatement",
                        "src": "15979:51:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 1007,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 615,
                                "src": "16062:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 1008,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "16062:12:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1009,
                              "name": "newSignUpReward",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 745,
                              "src": "16076:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 1004,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 748,
                                  "src": "16047:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 1003,
                                "name": "IERC20",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 605,
                                "src": "16040:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC20_$605_$",
                                  "typeString": "type(contract IERC20)"
                                }
                              },
                              "id": 1005,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "16040:13:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$605",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 1006,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "approve",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 592,
                            "src": "16040:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                              "typeString": "function (address,uint256) external returns (bool)"
                            }
                          },
                          "id": 1010,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "16040:52:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1011,
                        "nodeType": "ExpressionStatement",
                        "src": "16040:52:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 979,
                    "nodeType": "StructuredDocumentation",
                    "src": "15724:104:0",
                    "text": "@notice Sign up function. \no Caller must not already be a member. "
                  },
                  "functionSelector": "84b038df",
                  "id": 1013,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "signUpAsWasteCollector",
                  "nameLocation": "15843:22:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 980,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "15865:2:0"
                  },
                  "returnParameters": {
                    "id": 981,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "15875:0:0"
                  },
                  "scope": 1736,
                  "src": "15834:266:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1034,
                    "nodeType": "Block",
                    "src": "16300:87:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1026,
                              "name": "bins",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 765,
                              "src": "16336:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage",
                                "typeString": "struct Common.BinData storage ref[] storage ref"
                              }
                            },
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 1027,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 615,
                                "src": "16342:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 1028,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "16342:12:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage",
                                "typeString": "struct Common.BinData storage ref[] storage ref"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 1023,
                              "name": "IBoolaLib",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 529,
                              "src": "16311:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IBoolaLib_$529_$",
                                "typeString": "type(library IBoolaLib)"
                              }
                            },
                            "id": 1025,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "registerNewBin",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 393,
                            "src": "16311:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_BinData_$63_storage_$dyn_storage_ptr_$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (struct Common.BinData storage ref[] storage pointer,address) returns (uint256)"
                            }
                          },
                          "id": 1029,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "16311:44:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1030,
                        "nodeType": "ExpressionStatement",
                        "src": "16311:44:0"
                      },
                      {
                        "expression": {
                          "id": 1032,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "++",
                          "prefix": false,
                          "src": "16366:13:0",
                          "subExpression": {
                            "id": 1031,
                            "name": "binCounter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 757,
                            "src": "16366:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1033,
                        "nodeType": "ExpressionStatement",
                        "src": "16366:13:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1014,
                    "nodeType": "StructuredDocumentation",
                    "src": "16108:106:0",
                    "text": "@dev Adds new bin.\n@notice Caller must already be approves as BinOwner ."
                  },
                  "functionSelector": "ea77351f",
                  "id": 1035,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "expression": {
                            "id": 1017,
                            "name": "Category",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11,
                            "src": "16267:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Category_$11_$",
                              "typeString": "type(enum Common.Category)"
                            }
                          },
                          "id": 1018,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "BINOWNER",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 9,
                          "src": "16267:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Category_$11",
                            "typeString": "enum Common.Category"
                          }
                        },
                        {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 1019,
                            "name": "_msgSender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 615,
                            "src": "16286:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                              "typeString": "function () view returns (address)"
                            }
                          },
                          "id": 1020,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "16286:12:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "id": 1021,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1016,
                        "name": "isApproved",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 864,
                        "src": "16256:10:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "16256:43:0"
                    }
                  ],
                  "name": "addNewBin",
                  "nameLocation": "16229:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1015,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "16238:2:0"
                  },
                  "returnParameters": {
                    "id": 1022,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "16300:0:0"
                  },
                  "scope": 1736,
                  "src": "16220:167:0",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1074,
                    "nodeType": "Block",
                    "src": "16597:196:0",
                    "statements": [
                      {
                        "assignments": [
                          1048
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1048,
                            "mutability": "mutable",
                            "name": "_owner",
                            "nameLocation": "16616:6:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1074,
                            "src": "16608:14:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 1047,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "16608:7:0",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1052,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1050,
                              "name": "binId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1038,
                              "src": "16638:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1049,
                            "name": "_getBinOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1113,
                            "src": "16625:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                              "typeString": "function (uint256) view returns (address)"
                            }
                          },
                          "id": 1051,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "16625:19:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "16608:36:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 1057,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1053,
                              "name": "_msgSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 615,
                              "src": "16658:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 1054,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "16658:12:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1055,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 663,
                              "src": "16674:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 1056,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "16674:7:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "16658:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1066,
                        "nodeType": "IfStatement",
                        "src": "16655:77:0",
                        "trueBody": {
                          "expression": {
                            "arguments": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 1062,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "id": 1059,
                                    "name": "_msgSender",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 615,
                                    "src": "16691:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                      "typeString": "function () view returns (address)"
                                    }
                                  },
                                  "id": 1060,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "16691:12:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "id": 1061,
                                  "name": "_owner",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1048,
                                  "src": "16707:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "16691:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              {
                                "hexValue": "4e6f7420417574686f72697a6564",
                                "id": 1063,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "16715:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_593fd4f5418ae095969b093812245f49eb950b9775e5afd767614f342e26d4f2",
                                  "typeString": "literal_string \"Not Authorized\""
                                },
                                "value": "Not Authorized"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                {
                                  "typeIdentifier": "t_stringliteral_593fd4f5418ae095969b093812245f49eb950b9775e5afd767614f342e26d4f2",
                                  "typeString": "literal_string \"Not Authorized\""
                                }
                              ],
                              "id": 1058,
                              "name": "require",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [
                                -18,
                                -18
                              ],
                              "referencedDeclaration": -18,
                              "src": "16683:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                "typeString": "function (bool,string memory) pure"
                              }
                            },
                            "id": 1064,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "16683:49:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$__$",
                              "typeString": "tuple()"
                            }
                          },
                          "id": 1065,
                          "nodeType": "ExpressionStatement",
                          "src": "16683:49:0"
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1070,
                              "name": "bins",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 765,
                              "src": "16773:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage",
                                "typeString": "struct Common.BinData storage ref[] storage ref"
                              }
                            },
                            {
                              "id": 1071,
                              "name": "binId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1038,
                              "src": "16779:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage",
                                "typeString": "struct Common.BinData storage ref[] storage ref"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 1067,
                              "name": "IBoolaLib",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 529,
                              "src": "16753:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IBoolaLib_$529_$",
                                "typeString": "type(library IBoolaLib)"
                              }
                            },
                            "id": 1069,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "removeBin",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 460,
                            "src": "16753:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_BinData_$63_storage_$dyn_storage_ptr_$_t_uint256_$returns$__$",
                              "typeString": "function (struct Common.BinData storage ref[] storage pointer,uint256)"
                            }
                          },
                          "id": 1072,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "16753:32:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1073,
                        "nodeType": "ExpressionStatement",
                        "src": "16753:32:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1036,
                    "nodeType": "StructuredDocumentation",
                    "src": "16395:114:0",
                    "text": "@dev Removes bin at binId.\n@notice Caller must already be approves as BinOwner ."
                  },
                  "functionSelector": "93051d95",
                  "id": 1075,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "expression": {
                            "id": 1041,
                            "name": "Category",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11,
                            "src": "16564:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Category_$11_$",
                              "typeString": "type(enum Common.Category)"
                            }
                          },
                          "id": 1042,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "BINOWNER",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 9,
                          "src": "16564:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Category_$11",
                            "typeString": "enum Common.Category"
                          }
                        },
                        {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 1043,
                            "name": "_msgSender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 615,
                            "src": "16583:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                              "typeString": "function () view returns (address)"
                            }
                          },
                          "id": 1044,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "16583:12:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "id": 1045,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1040,
                        "name": "isApproved",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 864,
                        "src": "16553:10:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "16553:43:0"
                    }
                  ],
                  "name": "removeBin",
                  "nameLocation": "16524:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1039,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1038,
                        "mutability": "mutable",
                        "name": "binId",
                        "nameLocation": "16539:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1075,
                        "src": "16534:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1037,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "16534:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "16533:12:0"
                  },
                  "returnParameters": {
                    "id": 1046,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "16597:0:0"
                  },
                  "scope": 1736,
                  "src": "16515:278:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1098,
                    "nodeType": "Block",
                    "src": "17004:107:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              },
                              "id": 1088,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1086,
                                "name": "_category",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1078,
                                "src": "17023:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "hexValue": "33",
                                "id": 1087,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "17035:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_3_by_1",
                                  "typeString": "int_const 3"
                                },
                                "value": "3"
                              },
                              "src": "17023:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "496e76616c69642073656c656365746f72",
                              "id": 1089,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "17038:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_f5bbd90151df77045995fef44fa489fd73d41063f4d63aeaef7d4ef2cc0fb065",
                                "typeString": "literal_string \"Invalid selecetor\""
                              },
                              "value": "Invalid selecetor"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_f5bbd90151df77045995fef44fa489fd73d41063f4d63aeaef7d4ef2cc0fb065",
                                "typeString": "literal_string \"Invalid selecetor\""
                              }
                            ],
                            "id": 1085,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "17015:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1090,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "17015:43:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1091,
                        "nodeType": "ExpressionStatement",
                        "src": "17015:43:0"
                      },
                      {
                        "expression": {
                          "baseExpression": {
                            "id": 1092,
                            "name": "_garbages",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 778,
                            "src": "17076:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_enum$_State_$5_$_t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_$",
                              "typeString": "mapping(enum Common.State => struct Common.WasteData storage ref[] storage ref)"
                            }
                          },
                          "id": 1096,
                          "indexExpression": {
                            "arguments": [
                              {
                                "id": 1094,
                                "name": "_category",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1078,
                                "src": "17092:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              ],
                              "id": 1093,
                              "name": "State",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 5,
                              "src": "17086:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_State_$5_$",
                                "typeString": "type(enum Common.State)"
                              }
                            },
                            "id": 1095,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "17086:16:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_State_$5",
                              "typeString": "enum Common.State"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "17076:27:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_WasteData_$43_storage_$dyn_storage",
                            "typeString": "struct Common.WasteData storage ref[] storage ref"
                          }
                        },
                        "functionReturnParameters": 1084,
                        "id": 1097,
                        "nodeType": "Return",
                        "src": "17069:34:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1076,
                    "nodeType": "StructuredDocumentation",
                    "src": "16801:122:0",
                    "text": "@dev Returns list of wastes under each 'State'\ni.e Generated waste data, Collected waste data, ...rest"
                  },
                  "functionSelector": "a741c0df",
                  "id": 1099,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "garbages",
                  "nameLocation": "16938:8:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1079,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1078,
                        "mutability": "mutable",
                        "name": "_category",
                        "nameLocation": "16953:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1099,
                        "src": "16947:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 1077,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "16947:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "16946:17:0"
                  },
                  "returnParameters": {
                    "id": 1084,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1083,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1099,
                        "src": "16984:18:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_WasteData_$43_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct Common.WasteData[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1081,
                            "nodeType": "UserDefinedTypeName",
                            "pathNode": {
                              "id": 1080,
                              "name": "WasteData",
                              "nodeType": "IdentifierPath",
                              "referencedDeclaration": 43,
                              "src": "16984:9:0"
                            },
                            "referencedDeclaration": 43,
                            "src": "16984:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_WasteData_$43_storage_ptr",
                              "typeString": "struct Common.WasteData"
                            }
                          },
                          "id": 1082,
                          "nodeType": "ArrayTypeName",
                          "src": "16984:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_ptr",
                            "typeString": "struct Common.WasteData[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "16983:20:0"
                  },
                  "scope": 1736,
                  "src": "16929:182:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1112,
                    "nodeType": "Block",
                    "src": "17228:43:0",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "baseExpression": {
                              "id": 1107,
                              "name": "bins",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 765,
                              "src": "17246:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage",
                                "typeString": "struct Common.BinData storage ref[] storage ref"
                              }
                            },
                            "id": 1109,
                            "indexExpression": {
                              "id": 1108,
                              "name": "binId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1102,
                              "src": "17251:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "17246:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_BinData_$63_storage",
                              "typeString": "struct Common.BinData storage ref"
                            }
                          },
                          "id": 1110,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "owner",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 62,
                          "src": "17246:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 1106,
                        "id": 1111,
                        "nodeType": "Return",
                        "src": "17239:24:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1100,
                    "nodeType": "StructuredDocumentation",
                    "src": "17119:38:0",
                    "text": "@dev Return owner of bin at binId. "
                  },
                  "id": 1113,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_getBinOwner",
                  "nameLocation": "17172:12:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1103,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1102,
                        "mutability": "mutable",
                        "name": "binId",
                        "nameLocation": "17190:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1113,
                        "src": "17185:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1101,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "17185:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "17184:12:0"
                  },
                  "returnParameters": {
                    "id": 1106,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1105,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1113,
                        "src": "17219:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1104,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "17219:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "17218:9:0"
                  },
                  "scope": 1736,
                  "src": "17163:108:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1137,
                    "nodeType": "Block",
                    "src": "17514:79:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1129,
                              "name": "profiles",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 787,
                              "src": "17545:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$",
                                "typeString": "mapping(enum Common.Category => mapping(address => struct Common.Profile storage ref))"
                              }
                            },
                            {
                              "id": 1130,
                              "name": "who",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1116,
                              "src": "17555:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "hexValue": "74727565",
                              "id": 1131,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "17560:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "true"
                            },
                            {
                              "arguments": [
                                {
                                  "id": 1133,
                                  "name": "category",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1118,
                                  "src": "17575:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  }
                                ],
                                "id": 1132,
                                "name": "Category",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 11,
                                "src": "17566:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_enum$_Category_$11_$",
                                  "typeString": "type(enum Common.Category)"
                                }
                              },
                              "id": 1134,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "17566:18:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Category_$11",
                                "typeString": "enum Common.Category"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$",
                                "typeString": "mapping(enum Common.Category => mapping(address => struct Common.Profile storage ref))"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_enum$_Category_$11",
                                "typeString": "enum Common.Category"
                              }
                            ],
                            "expression": {
                              "id": 1126,
                              "name": "IBoolaLib",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 529,
                              "src": "17525:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IBoolaLib_$529_$",
                                "typeString": "type(library IBoolaLib)"
                              }
                            },
                            "id": 1128,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "setStatus",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 337,
                            "src": "17525:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$_$_t_address_$_t_bool_$_t_enum$_Category_$11_$returns$__$",
                              "typeString": "function (mapping(enum Common.Category => mapping(address => struct Common.Profile storage ref)),address,bool,enum Common.Category)"
                            }
                          },
                          "id": 1135,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "17525:60:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1136,
                        "nodeType": "ExpressionStatement",
                        "src": "17525:60:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1114,
                    "nodeType": "StructuredDocumentation",
                    "src": "17279:133:0",
                    "text": "@dev Whitelist user\nNote Admin privilege.\ncat should reference the Category enum."
                  },
                  "functionSelector": "31b59ed7",
                  "id": 1138,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 1121,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1120,
                        "name": "onlyOwner",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 654,
                        "src": "17477:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "17477:9:0"
                    },
                    {
                      "arguments": [
                        {
                          "id": 1123,
                          "name": "category",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1118,
                          "src": "17504:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        }
                      ],
                      "id": 1124,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1122,
                        "name": "validateCategory",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 878,
                        "src": "17487:16:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "17487:26:0"
                    }
                  ],
                  "name": "whitelistuser",
                  "nameLocation": "17427:13:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1119,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1116,
                        "mutability": "mutable",
                        "name": "who",
                        "nameLocation": "17449:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1138,
                        "src": "17441:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1115,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "17441:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1118,
                        "mutability": "mutable",
                        "name": "category",
                        "nameLocation": "17460:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1138,
                        "src": "17454:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 1117,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "17454:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "17440:29:0"
                  },
                  "returnParameters": {
                    "id": 1125,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "17514:0:0"
                  },
                  "scope": 1736,
                  "src": "17418:175:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1162,
                    "nodeType": "Block",
                    "src": "17835:80:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1154,
                              "name": "profiles",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 787,
                              "src": "17866:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$",
                                "typeString": "mapping(enum Common.Category => mapping(address => struct Common.Profile storage ref))"
                              }
                            },
                            {
                              "id": 1155,
                              "name": "who",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1141,
                              "src": "17876:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "hexValue": "66616c7365",
                              "id": 1156,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "17881:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "false"
                            },
                            {
                              "arguments": [
                                {
                                  "id": 1158,
                                  "name": "category",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1143,
                                  "src": "17897:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  }
                                ],
                                "id": 1157,
                                "name": "Category",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 11,
                                "src": "17888:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_enum$_Category_$11_$",
                                  "typeString": "type(enum Common.Category)"
                                }
                              },
                              "id": 1159,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "17888:18:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Category_$11",
                                "typeString": "enum Common.Category"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$",
                                "typeString": "mapping(enum Common.Category => mapping(address => struct Common.Profile storage ref))"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_enum$_Category_$11",
                                "typeString": "enum Common.Category"
                              }
                            ],
                            "expression": {
                              "id": 1151,
                              "name": "IBoolaLib",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 529,
                              "src": "17846:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IBoolaLib_$529_$",
                                "typeString": "type(library IBoolaLib)"
                              }
                            },
                            "id": 1153,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "setStatus",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 337,
                            "src": "17846:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$_$_t_address_$_t_bool_$_t_enum$_Category_$11_$returns$__$",
                              "typeString": "function (mapping(enum Common.Category => mapping(address => struct Common.Profile storage ref)),address,bool,enum Common.Category)"
                            }
                          },
                          "id": 1160,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "17846:61:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1161,
                        "nodeType": "ExpressionStatement",
                        "src": "17846:61:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1139,
                    "nodeType": "StructuredDocumentation",
                    "src": "17601:133:0",
                    "text": "@dev Blacklist user\nNote Admin privilege.\ncat should reference the Category enum."
                  },
                  "functionSelector": "e47c294d",
                  "id": 1163,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 1146,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1145,
                        "name": "onlyOwner",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 654,
                        "src": "17799:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "17799:9:0"
                    },
                    {
                      "arguments": [
                        {
                          "id": 1148,
                          "name": "category",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1143,
                          "src": "17826:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        }
                      ],
                      "id": 1149,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1147,
                        "name": "validateCategory",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 878,
                        "src": "17809:16:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "17809:26:0"
                    }
                  ],
                  "name": "blacklistUser",
                  "nameLocation": "17749:13:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1144,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1141,
                        "mutability": "mutable",
                        "name": "who",
                        "nameLocation": "17771:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1163,
                        "src": "17763:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1140,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "17763:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1143,
                        "mutability": "mutable",
                        "name": "category",
                        "nameLocation": "17782:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1163,
                        "src": "17776:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 1142,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "17776:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "17762:29:0"
                  },
                  "returnParameters": {
                    "id": 1150,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "17835:0:0"
                  },
                  "scope": 1736,
                  "src": "17740:175:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1188,
                    "nodeType": "Block",
                    "src": "18156:110:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              },
                              "id": 1176,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1174,
                                "name": "category",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1166,
                                "src": "18175:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "hexValue": "34",
                                "id": 1175,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "18186:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_4_by_1",
                                  "typeString": "int_const 4"
                                },
                                "value": "4"
                              },
                              "src": "18175:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "496e76616c69642063617465676f7279",
                              "id": 1177,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "18189:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c42ca90c935df80db9ecab8e34c935bcc35abb722f6ed440da8d67e0cbd0ec47",
                                "typeString": "literal_string \"Invalid category\""
                              },
                              "value": "Invalid category"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_c42ca90c935df80db9ecab8e34c935bcc35abb722f6ed440da8d67e0cbd0ec47",
                                "typeString": "literal_string \"Invalid category\""
                              }
                            ],
                            "id": 1173,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "18167:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1178,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "18167:41:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1179,
                        "nodeType": "ExpressionStatement",
                        "src": "18167:41:0"
                      },
                      {
                        "expression": {
                          "id": 1186,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 1180,
                              "name": "signUpFees",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 793,
                              "src": "18219:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_uint256_$",
                                "typeString": "mapping(enum Common.Category => uint256)"
                              }
                            },
                            "id": 1184,
                            "indexExpression": {
                              "arguments": [
                                {
                                  "id": 1182,
                                  "name": "category",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1166,
                                  "src": "18239:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  }
                                ],
                                "id": 1181,
                                "name": "Category",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 11,
                                "src": "18230:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_enum$_Category_$11_$",
                                  "typeString": "type(enum Common.Category)"
                                }
                              },
                              "id": 1183,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "18230:18:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_Category_$11",
                                "typeString": "enum Common.Category"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "18219:30:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1185,
                            "name": "newFee",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1168,
                            "src": "18252:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "18219:39:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1187,
                        "nodeType": "ExpressionStatement",
                        "src": "18219:39:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1164,
                    "nodeType": "StructuredDocumentation",
                    "src": "17923:165:0",
                    "text": "@dev Set new fee\n@notice To perfectly select the right category,\ncategory parameter should not be greater than 4."
                  },
                  "functionSelector": "8c6aa3f5",
                  "id": 1189,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 1171,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1170,
                        "name": "onlyOwner",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 654,
                        "src": "18146:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "18146:9:0"
                    }
                  ],
                  "name": "setFee",
                  "nameLocation": "18103:6:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1169,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1166,
                        "mutability": "mutable",
                        "name": "category",
                        "nameLocation": "18116:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1189,
                        "src": "18110:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 1165,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "18110:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1168,
                        "mutability": "mutable",
                        "name": "newFee",
                        "nameLocation": "18131:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1189,
                        "src": "18126:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1167,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "18126:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "18109:29:0"
                  },
                  "returnParameters": {
                    "id": 1172,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "18156:0:0"
                  },
                  "scope": 1736,
                  "src": "18094:172:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1244,
                    "nodeType": "Block",
                    "src": "18627:434:0",
                    "statements": [
                      {
                        "assignments": [
                          1203
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1203,
                            "mutability": "mutable",
                            "name": "state",
                            "nameLocation": "18644:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1244,
                            "src": "18638:11:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_State_$5",
                              "typeString": "enum Common.State"
                            },
                            "typeName": {
                              "id": 1202,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1201,
                                "name": "State",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 5,
                                "src": "18638:5:0"
                              },
                              "referencedDeclaration": 5,
                              "src": "18638:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_State_$5",
                                "typeString": "enum Common.State"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1206,
                        "initialValue": {
                          "expression": {
                            "id": 1204,
                            "name": "State",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5,
                            "src": "18652:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_State_$5_$",
                              "typeString": "type(enum Common.State)"
                            }
                          },
                          "id": 1205,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "GENERATED",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2,
                          "src": "18652:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_State_$5",
                            "typeString": "enum Common.State"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "18638:29:0"
                      },
                      {
                        "expression": {
                          "id": 1208,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "++",
                          "prefix": false,
                          "src": "18678:22:0",
                          "subExpression": {
                            "id": 1207,
                            "name": "totalWasteGenerated",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 751,
                            "src": "18678:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1209,
                        "nodeType": "ExpressionStatement",
                        "src": "18678:22:0"
                      },
                      {
                        "assignments": [
                          1211
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1211,
                            "mutability": "mutable",
                            "name": "nonce",
                            "nameLocation": "18716:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1244,
                            "src": "18711:10:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1210,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "18711:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1213,
                        "initialValue": {
                          "id": 1212,
                          "name": "totalWasteGenerated",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 751,
                          "src": "18724:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "18711:32:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1217,
                              "name": "_garbages",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 778,
                              "src": "18788:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_enum$_State_$5_$_t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_$",
                                "typeString": "mapping(enum Common.State => struct Common.WasteData storage ref[] storage ref)"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "id": 1224,
                                              "name": "_data",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1192,
                                              "src": "18875:5:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              }
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_string_memory_ptr",
                                                "typeString": "string memory"
                                              }
                                            ],
                                            "id": 1223,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "lValueRequested": false,
                                            "nodeType": "ElementaryTypeNameExpression",
                                            "src": "18869:5:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                              "typeString": "type(bytes storage pointer)"
                                            },
                                            "typeName": {
                                              "id": 1222,
                                              "name": "bytes",
                                              "nodeType": "ElementaryTypeName",
                                              "src": "18869:5:0",
                                              "typeDescriptions": {}
                                            }
                                          },
                                          "id": 1225,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "typeConversion",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "18869:12:0",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes_memory_ptr",
                                            "typeString": "bytes memory"
                                          }
                                        },
                                        {
                                          "id": 1226,
                                          "name": "nonce",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1211,
                                          "src": "18883:5:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_bytes_memory_ptr",
                                            "typeString": "bytes memory"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "expression": {
                                          "id": 1220,
                                          "name": "abi",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -1,
                                          "src": "18852:3:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_magic_abi",
                                            "typeString": "abi"
                                          }
                                        },
                                        "id": 1221,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "memberName": "encodePacked",
                                        "nodeType": "MemberAccess",
                                        "src": "18852:16:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                          "typeString": "function () pure returns (bytes memory)"
                                        }
                                      },
                                      "id": 1227,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "18852:37:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    ],
                                    "id": 1219,
                                    "name": "keccak256",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -8,
                                    "src": "18842:9:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                      "typeString": "function (bytes memory) pure returns (bytes32)"
                                    }
                                  },
                                  "id": 1228,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "18842:48:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                {
                                  "arguments": [
                                    {
                                      "hexValue": "30",
                                      "id": 1231,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "18918:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      }
                                    ],
                                    "id": 1230,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "18910:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 1229,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "18910:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 1232,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "18910:10:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "id": 1233,
                                    "name": "_msgSender",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 615,
                                    "src": "18940:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                      "typeString": "function () view returns (address)"
                                    }
                                  },
                                  "id": 1234,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "18940:12:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "arguments": [
                                    {
                                      "hexValue": "30",
                                      "id": 1237,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "18980:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      }
                                    ],
                                    "id": 1236,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "18972:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 1235,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "18972:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 1238,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "18972:10:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 1239,
                                  "name": "state",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1203,
                                  "src": "19001:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_State_$5",
                                    "typeString": "enum Common.State"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_enum$_State_$5",
                                    "typeString": "enum Common.State"
                                  }
                                ],
                                "id": 1218,
                                "name": "WasteData",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 43,
                                "src": "18814:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_struct$_WasteData_$43_storage_ptr_$",
                                  "typeString": "type(struct Common.WasteData storage pointer)"
                                }
                              },
                              "id": 1240,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "structConstructorCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "18814:207:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                "typeString": "struct Common.WasteData memory"
                              }
                            },
                            {
                              "id": 1241,
                              "name": "state",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1203,
                              "src": "19037:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_State_$5",
                                "typeString": "enum Common.State"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_mapping$_t_enum$_State_$5_$_t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_$",
                                "typeString": "mapping(enum Common.State => struct Common.WasteData storage ref[] storage ref)"
                              },
                              {
                                "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                "typeString": "struct Common.WasteData memory"
                              },
                              {
                                "typeIdentifier": "t_enum$_State_$5",
                                "typeString": "enum Common.State"
                              }
                            ],
                            "expression": {
                              "id": 1214,
                              "name": "IBoolaLib",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 529,
                              "src": "18754:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IBoolaLib_$529_$",
                                "typeString": "type(library IBoolaLib)"
                              }
                            },
                            "id": 1216,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "portToMap",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 168,
                            "src": "18754:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_mapping$_t_enum$_State_$5_$_t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_$_$_t_struct$_WasteData_$43_memory_ptr_$_t_enum$_State_$5_$returns$__$",
                              "typeString": "function (mapping(enum Common.State => struct Common.WasteData storage ref[] storage ref),struct Common.WasteData memory,enum Common.State)"
                            }
                          },
                          "id": 1242,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "18754:299:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1243,
                        "nodeType": "ExpressionStatement",
                        "src": "18754:299:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1190,
                    "nodeType": "StructuredDocumentation",
                    "src": "18274:251:0",
                    "text": "@dev Generates new waste. \n@notice Each waste is unique to another.\nNote To successfully generate waste, bin id must be provided.\nThis represents the destination where wastes are dumped."
                  },
                  "functionSelector": "b7588280",
                  "id": 1245,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "expression": {
                            "id": 1195,
                            "name": "Category",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11,
                            "src": "18593:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Category_$11_$",
                              "typeString": "type(enum Common.Category)"
                            }
                          },
                          "id": 1196,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "GENERATOR",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 7,
                          "src": "18593:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Category_$11",
                            "typeString": "enum Common.Category"
                          }
                        },
                        {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 1197,
                            "name": "_msgSender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 615,
                            "src": "18613:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                              "typeString": "function () view returns (address)"
                            }
                          },
                          "id": 1198,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "18613:12:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "id": 1199,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1194,
                        "name": "isApproved",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 864,
                        "src": "18582:10:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "18582:44:0"
                    }
                  ],
                  "name": "generateWaste",
                  "nameLocation": "18540:13:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1193,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1192,
                        "mutability": "mutable",
                        "name": "_data",
                        "nameLocation": "18568:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1245,
                        "src": "18554:19:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1191,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "18554:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "18553:21:0"
                  },
                  "returnParameters": {
                    "id": 1200,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "18627:0:0"
                  },
                  "scope": 1736,
                  "src": "18531:530:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1280,
                    "nodeType": "Block",
                    "src": "19129:156:0",
                    "statements": [
                      {
                        "assignments": [
                          1255
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1255,
                            "mutability": "mutable",
                            "name": "wasteIds",
                            "nameLocation": "19154:8:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1280,
                            "src": "19140:22:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                              "typeString": "uint256[]"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 1253,
                                "name": "uint",
                                "nodeType": "ElementaryTypeName",
                                "src": "19140:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1254,
                              "nodeType": "ArrayTypeName",
                              "src": "19140:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                                "typeString": "uint256[]"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1261,
                        "initialValue": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 1259,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "19176:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 1258,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "19165:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
                              "typeString": "function (uint256) pure returns (uint256[] memory)"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 1256,
                                "name": "uint",
                                "nodeType": "ElementaryTypeName",
                                "src": "19169:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1257,
                              "nodeType": "ArrayTypeName",
                              "src": "19169:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                                "typeString": "uint256[]"
                              }
                            }
                          },
                          "id": 1260,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "19165:13:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                            "typeString": "uint256[] memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "19140:38:0"
                      },
                      {
                        "assignments": [
                          1266
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1266,
                            "mutability": "mutable",
                            "name": "wastedata",
                            "nameLocation": "19205:9:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1280,
                            "src": "19189:25:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                              "typeString": "string[]"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 1264,
                                "name": "string",
                                "nodeType": "ElementaryTypeName",
                                "src": "19189:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_storage_ptr",
                                  "typeString": "string"
                                }
                              },
                              "id": 1265,
                              "nodeType": "ArrayTypeName",
                              "src": "19189:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                                "typeString": "string[]"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1272,
                        "initialValue": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 1270,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "19230:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 1269,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "19217:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_string_memory_ptr_$dyn_memory_ptr_$",
                              "typeString": "function (uint256) pure returns (string memory[] memory)"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 1267,
                                "name": "string",
                                "nodeType": "ElementaryTypeName",
                                "src": "19221:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_storage_ptr",
                                  "typeString": "string"
                                }
                              },
                              "id": 1268,
                              "nodeType": "ArrayTypeName",
                              "src": "19221:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                                "typeString": "string[]"
                              }
                            }
                          },
                          "id": 1271,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "19217:15:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                            "typeString": "string memory[] memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "19189:43:0"
                      },
                      {
                        "expression": {
                          "id": 1278,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1273,
                            "name": "empty",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1249,
                            "src": "19243:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Empty_$70_memory_ptr",
                              "typeString": "struct Common.Empty memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 1275,
                                "name": "wasteIds",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1255,
                                "src": "19257:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                  "typeString": "uint256[] memory"
                                }
                              },
                              {
                                "id": 1276,
                                "name": "wastedata",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1266,
                                "src": "19267:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                                  "typeString": "string memory[] memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                  "typeString": "uint256[] memory"
                                },
                                {
                                  "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                                  "typeString": "string memory[] memory"
                                }
                              ],
                              "id": 1274,
                              "name": "Empty",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 70,
                              "src": "19251:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_struct$_Empty_$70_storage_ptr_$",
                                "typeString": "type(struct Common.Empty storage pointer)"
                              }
                            },
                            "id": 1277,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "structConstructorCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "19251:26:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Empty_$70_memory_ptr",
                              "typeString": "struct Common.Empty memory"
                            }
                          },
                          "src": "19243:34:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Empty_$70_memory_ptr",
                            "typeString": "struct Common.Empty memory"
                          }
                        },
                        "id": 1279,
                        "nodeType": "ExpressionStatement",
                        "src": "19243:34:0"
                      }
                    ]
                  },
                  "id": 1281,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_empty",
                  "nameLocation": "19078:6:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1246,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "19084:2:0"
                  },
                  "returnParameters": {
                    "id": 1250,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1249,
                        "mutability": "mutable",
                        "name": "empty",
                        "nameLocation": "19122:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1281,
                        "src": "19109:18:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Empty_$70_memory_ptr",
                          "typeString": "struct Common.Empty"
                        },
                        "typeName": {
                          "id": 1248,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 1247,
                            "name": "Empty",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 70,
                            "src": "19109:5:0"
                          },
                          "referencedDeclaration": 70,
                          "src": "19109:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Empty_$70_storage_ptr",
                            "typeString": "struct Common.Empty"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "19108:20:0"
                  },
                  "scope": 1736,
                  "src": "19069:216:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1313,
                    "nodeType": "Block",
                    "src": "19434:104:0",
                    "statements": [
                      {
                        "body": {
                          "id": 1311,
                          "nodeType": "Block",
                          "src": "19482:49:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "baseExpression": {
                                      "id": 1306,
                                      "name": "data",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1285,
                                      "src": "19511:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                                        "typeString": "string memory[] memory"
                                      }
                                    },
                                    "id": 1308,
                                    "indexExpression": {
                                      "id": 1307,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1295,
                                      "src": "19516:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "19511:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  ],
                                  "id": 1305,
                                  "name": "generateWaste",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1245,
                                  "src": "19497:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (string memory)"
                                  }
                                },
                                "id": 1309,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "19497:22:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1310,
                              "nodeType": "ExpressionStatement",
                              "src": "19497:22:0"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1301,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1298,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1295,
                            "src": "19460:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "id": 1299,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1285,
                              "src": "19464:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                                "typeString": "string memory[] memory"
                              }
                            },
                            "id": 1300,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "19464:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "19460:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1312,
                        "initializationExpression": {
                          "assignments": [
                            1295
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1295,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "19455:1:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 1312,
                              "src": "19450:6:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1294,
                                "name": "uint",
                                "nodeType": "ElementaryTypeName",
                                "src": "19450:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1297,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1296,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "19457:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "19450:8:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 1303,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "19477:3:0",
                            "subExpression": {
                              "id": 1302,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1295,
                              "src": "19477:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1304,
                          "nodeType": "ExpressionStatement",
                          "src": "19477:3:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "19445:86:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1282,
                    "nodeType": "StructuredDocumentation",
                    "src": "19293:37:0",
                    "text": "@dev Generates multiple waste data"
                  },
                  "functionSelector": "955ef11a",
                  "id": 1314,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "expression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1288,
                              "name": "_empty",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1281,
                              "src": "19409:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_Empty_$70_memory_ptr_$",
                                "typeString": "function () pure returns (struct Common.Empty memory)"
                              }
                            },
                            "id": 1289,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "19409:8:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Empty_$70_memory_ptr",
                              "typeString": "struct Common.Empty memory"
                            }
                          },
                          "id": 1290,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "wasteIds",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 66,
                          "src": "19409:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                            "typeString": "uint256[] memory"
                          }
                        },
                        {
                          "id": 1291,
                          "name": "data",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1285,
                          "src": "19428:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                            "typeString": "string memory[] memory"
                          }
                        }
                      ],
                      "id": 1292,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1287,
                        "name": "validateSize",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 927,
                        "src": "19396:12:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "19396:37:0"
                    }
                  ],
                  "name": "generateMultipleWaste",
                  "nameLocation": "19345:21:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1286,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1285,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "19383:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1314,
                        "src": "19367:20:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                          "typeString": "string[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1283,
                            "name": "string",
                            "nodeType": "ElementaryTypeName",
                            "src": "19367:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage_ptr",
                              "typeString": "string"
                            }
                          },
                          "id": 1284,
                          "nodeType": "ArrayTypeName",
                          "src": "19367:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                            "typeString": "string[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "19366:22:0"
                  },
                  "returnParameters": {
                    "id": 1293,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "19434:0:0"
                  },
                  "scope": 1736,
                  "src": "19336:202:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1332,
                    "nodeType": "Block",
                    "src": "19787:53:0",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 1325,
                                "name": "profiles",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 787,
                                "src": "19805:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$",
                                  "typeString": "mapping(enum Common.Category => mapping(address => struct Common.Profile storage ref))"
                                }
                              },
                              "id": 1327,
                              "indexExpression": {
                                "id": 1326,
                                "name": "cat",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1318,
                                "src": "19814:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_Category_$11",
                                  "typeString": "enum Common.Category"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "19805:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$",
                                "typeString": "mapping(address => struct Common.Profile storage ref)"
                              }
                            },
                            "id": 1329,
                            "indexExpression": {
                              "id": 1328,
                              "name": "who",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1320,
                              "src": "19819:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "19805:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Profile_$56_storage",
                              "typeString": "struct Common.Profile storage ref"
                            }
                          },
                          "id": 1330,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "approval",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 49,
                          "src": "19805:27:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 1324,
                        "id": 1331,
                        "nodeType": "Return",
                        "src": "19798:34:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1315,
                    "nodeType": "StructuredDocumentation",
                    "src": "19546:158:0",
                    "text": "@dev Gets approval for user 'who'\n@param cat - Category of user e.g COLLECTOR etc\n@param who - Address of user."
                  },
                  "id": 1333,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_getApproval",
                  "nameLocation": "19719:12:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1321,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1318,
                        "mutability": "mutable",
                        "name": "cat",
                        "nameLocation": "19741:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1333,
                        "src": "19732:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Category_$11",
                          "typeString": "enum Common.Category"
                        },
                        "typeName": {
                          "id": 1317,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 1316,
                            "name": "Category",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 11,
                            "src": "19732:8:0"
                          },
                          "referencedDeclaration": 11,
                          "src": "19732:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Category_$11",
                            "typeString": "enum Common.Category"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1320,
                        "mutability": "mutable",
                        "name": "who",
                        "nameLocation": "19754:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1333,
                        "src": "19746:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1319,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "19746:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "19731:27:0"
                  },
                  "returnParameters": {
                    "id": 1324,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1323,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1333,
                        "src": "19781:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1322,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "19781:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "19780:6:0"
                  },
                  "scope": 1736,
                  "src": "19710:130:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1418,
                    "nodeType": "Block",
                    "src": "20418:470:0",
                    "statements": [
                      {
                        "assignments": [
                          1356
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1356,
                            "mutability": "mutable",
                            "name": "outWaste",
                            "nameLocation": "20446:8:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1418,
                            "src": "20429:25:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                              "typeString": "struct Common.WasteData"
                            },
                            "typeName": {
                              "id": 1355,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1354,
                                "name": "WasteData",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 43,
                                "src": "20429:9:0"
                              },
                              "referencedDeclaration": 43,
                              "src": "20429:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_WasteData_$43_storage_ptr",
                                "typeString": "struct Common.WasteData"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1363,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1359,
                              "name": "bins",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 765,
                              "src": "20480:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage",
                                "typeString": "struct Common.BinData storage ref[] storage ref"
                              }
                            },
                            {
                              "id": 1360,
                              "name": "binId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1336,
                              "src": "20486:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1361,
                              "name": "wasteId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1338,
                              "src": "20493:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage",
                                "typeString": "struct Common.BinData storage ref[] storage ref"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 1357,
                              "name": "IBoolaLib",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 529,
                              "src": "20457:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IBoolaLib_$529_$",
                                "typeString": "type(library IBoolaLib)"
                              }
                            },
                            "id": 1358,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "popFromArray",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 272,
                            "src": "20457:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_BinData_$63_storage_$dyn_storage_ptr_$_t_uint256_$_t_uint256_$returns$_t_struct$_WasteData_$43_memory_ptr_$",
                              "typeString": "function (struct Common.BinData storage ref[] storage pointer,uint256,uint256) returns (struct Common.WasteData memory)"
                            }
                          },
                          "id": 1362,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "20457:44:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                            "typeString": "struct Common.WasteData memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "20429:72:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1367,
                              "name": "_garbages",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 778,
                              "src": "20532:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_enum$_State_$5_$_t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_$",
                                "typeString": "mapping(enum Common.State => struct Common.WasteData storage ref[] storage ref)"
                              }
                            },
                            {
                              "id": 1368,
                              "name": "outWaste",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1356,
                              "src": "20543:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                "typeString": "struct Common.WasteData memory"
                              }
                            },
                            {
                              "expression": {
                                "id": 1369,
                                "name": "State",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 5,
                                "src": "20553:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_enum$_State_$5_$",
                                  "typeString": "type(enum Common.State)"
                                }
                              },
                              "id": 1370,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "RECYCLED",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 4,
                              "src": "20553:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_State_$5",
                                "typeString": "enum Common.State"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_mapping$_t_enum$_State_$5_$_t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_$",
                                "typeString": "mapping(enum Common.State => struct Common.WasteData storage ref[] storage ref)"
                              },
                              {
                                "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                "typeString": "struct Common.WasteData memory"
                              },
                              {
                                "typeIdentifier": "t_enum$_State_$5",
                                "typeString": "enum Common.State"
                              }
                            ],
                            "expression": {
                              "id": 1364,
                              "name": "IBoolaLib",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 529,
                              "src": "20512:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IBoolaLib_$529_$",
                                "typeString": "type(library IBoolaLib)"
                              }
                            },
                            "id": 1366,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "portToMap",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 168,
                            "src": "20512:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_mapping$_t_enum$_State_$5_$_t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_$_$_t_struct$_WasteData_$43_memory_ptr_$_t_enum$_State_$5_$returns$__$",
                              "typeString": "function (mapping(enum Common.State => struct Common.WasteData storage ref[] storage ref),struct Common.WasteData memory,enum Common.State)"
                            }
                          },
                          "id": 1371,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "20512:56:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1372,
                        "nodeType": "ExpressionStatement",
                        "src": "20512:56:0"
                      },
                      {
                        "assignments": [
                          1374
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1374,
                            "mutability": "mutable",
                            "name": "amount",
                            "nameLocation": "20584:6:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1418,
                            "src": "20579:11:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1373,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "20579:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1376,
                        "initialValue": {
                          "id": 1375,
                          "name": "collectorReward",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 754,
                          "src": "20593:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "20579:29:0"
                      },
                      {
                        "assignments": [
                          1378,
                          1380,
                          1382
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1378,
                            "mutability": "mutable",
                            "name": "collector",
                            "nameLocation": "20627:9:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1418,
                            "src": "20622:14:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1377,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "20622:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 1380,
                            "mutability": "mutable",
                            "name": "generator",
                            "nameLocation": "20643:9:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1418,
                            "src": "20638:14:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1379,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "20638:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 1382,
                            "mutability": "mutable",
                            "name": "team",
                            "nameLocation": "20659:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1418,
                            "src": "20654:9:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1381,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "20654:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1388,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1385,
                              "name": "formula",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 770,
                              "src": "20683:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_enum$_Share_$15_$_t_uint8_$",
                                "typeString": "mapping(enum Common.Share => uint8)"
                              }
                            },
                            {
                              "id": 1386,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1374,
                              "src": "20692:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_mapping$_t_enum$_Share_$15_$_t_uint8_$",
                                "typeString": "mapping(enum Common.Share => uint8)"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 1383,
                              "name": "IBoolaLib",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 529,
                              "src": "20667:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IBoolaLib_$529_$",
                                "typeString": "type(library IBoolaLib)"
                              }
                            },
                            "id": 1384,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "split",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 516,
                            "src": "20667:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_mapping$_t_enum$_Share_$15_$_t_uint8_$_$_t_uint256_$returns$_t_uint256_$_t_uint256_$_t_uint256_$",
                              "typeString": "function (mapping(enum Common.Share => uint8),uint256) view returns (uint256,uint256,uint256)"
                            }
                          },
                          "id": 1387,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "20667:32:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$",
                            "typeString": "tuple(uint256,uint256,uint256)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "20621:78:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 1393,
                                "name": "outWaste",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1356,
                                "src": "20732:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                  "typeString": "struct Common.WasteData memory"
                                }
                              },
                              "id": 1394,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "collector",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 35,
                              "src": "20732:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1395,
                              "name": "collector",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1378,
                              "src": "20752:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 1390,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 748,
                                  "src": "20717:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 1389,
                                "name": "IERC20",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 605,
                                "src": "20710:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC20_$605_$",
                                  "typeString": "type(contract IERC20)"
                                }
                              },
                              "id": 1391,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "20710:13:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$605",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 1392,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "approve",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 592,
                            "src": "20710:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                              "typeString": "function (address,uint256) external returns (bool)"
                            }
                          },
                          "id": 1396,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "20710:52:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1397,
                        "nodeType": "ExpressionStatement",
                        "src": "20710:52:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 1402,
                                "name": "outWaste",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1356,
                                "src": "20795:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                  "typeString": "struct Common.WasteData memory"
                                }
                              },
                              "id": 1403,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "generator",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 37,
                              "src": "20795:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1404,
                              "name": "generator",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1380,
                              "src": "20815:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 1399,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 748,
                                  "src": "20780:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 1398,
                                "name": "IERC20",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 605,
                                "src": "20773:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC20_$605_$",
                                  "typeString": "type(contract IERC20)"
                                }
                              },
                              "id": 1400,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "20773:13:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$605",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 1401,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "approve",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 592,
                            "src": "20773:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                              "typeString": "function (address,uint256) external returns (bool)"
                            }
                          },
                          "id": 1405,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "20773:52:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1406,
                        "nodeType": "ExpressionStatement",
                        "src": "20773:52:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 1413,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "20866:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IBoolaContractV_$1736",
                                    "typeString": "contract IBoolaContractV"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_IBoolaContractV_$1736",
                                    "typeString": "contract IBoolaContractV"
                                  }
                                ],
                                "id": 1412,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "20858:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 1411,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "20858:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 1414,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "20858:13:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1415,
                              "name": "team",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1382,
                              "src": "20873:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 1408,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 748,
                                  "src": "20843:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 1407,
                                "name": "IERC20",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 605,
                                "src": "20836:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC20_$605_$",
                                  "typeString": "type(contract IERC20)"
                                }
                              },
                              "id": 1409,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "20836:13:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$605",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 1410,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "approve",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 592,
                            "src": "20836:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                              "typeString": "function (address,uint256) external returns (bool)"
                            }
                          },
                          "id": 1416,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "20836:42:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1417,
                        "nodeType": "ExpressionStatement",
                        "src": "20836:42:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1334,
                    "nodeType": "StructuredDocumentation",
                    "src": "19848:394:0",
                    "text": "@dev Collect waste.\nNote : Only generated waste can be collected\n@param binId - Bin where the waste is located.\n@param wasteId - Which waste to collect.\nNote - Every waste is unique to another.\nTo make purchase of manure easy, wastes are recycled\nin 50s."
                  },
                  "id": 1419,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "expression": {
                            "id": 1341,
                            "name": "Category",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11,
                            "src": "20311:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Category_$11_$",
                              "typeString": "type(enum Common.Category)"
                            }
                          },
                          "id": 1342,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "RECYCLER",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 8,
                          "src": "20311:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Category_$11",
                            "typeString": "enum Common.Category"
                          }
                        },
                        {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 1343,
                            "name": "_msgSender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 615,
                            "src": "20330:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                              "typeString": "function () view returns (address)"
                            }
                          },
                          "id": 1344,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "20330:12:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "id": 1345,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1340,
                        "name": "isApproved",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 864,
                        "src": "20300:10:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "20300:43:0"
                    },
                    {
                      "arguments": [
                        {
                          "id": 1347,
                          "name": "binId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1336,
                          "src": "20360:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 1348,
                          "name": "wasteId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1338,
                          "src": "20367:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "expression": {
                            "id": 1349,
                            "name": "State",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5,
                            "src": "20376:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_State_$5_$",
                              "typeString": "type(enum Common.State)"
                            }
                          },
                          "id": 1350,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "COLLECTED",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3,
                          "src": "20376:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_State_$5",
                            "typeString": "enum Common.State"
                          }
                        },
                        {
                          "hexValue": "496e76616c696420776173746520706f696e746572",
                          "id": 1351,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "20393:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_abad94b6453a098656ff9e059ac305e98d85667a0f3abab2d5b73772b5e607f0",
                            "typeString": "literal_string \"Invalid waste pointer\""
                          },
                          "value": "Invalid waste pointer"
                        }
                      ],
                      "id": 1352,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1346,
                        "name": "validateWasteId",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 845,
                        "src": "20344:15:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "20344:73:0"
                    }
                  ],
                  "name": "recycle",
                  "nameLocation": "20257:7:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1339,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1336,
                        "mutability": "mutable",
                        "name": "binId",
                        "nameLocation": "20270:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1419,
                        "src": "20265:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1335,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "20265:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1338,
                        "mutability": "mutable",
                        "name": "wasteId",
                        "nameLocation": "20282:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1419,
                        "src": "20277:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1337,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "20277:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "20264:26:0"
                  },
                  "returnParameters": {
                    "id": 1353,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "20418:0:0"
                  },
                  "scope": 1736,
                  "src": "20248:640:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1454,
                    "nodeType": "Block",
                    "src": "21074:115:0",
                    "statements": [
                      {
                        "body": {
                          "id": 1452,
                          "nodeType": "Block",
                          "src": "21128:54:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 1446,
                                    "name": "binId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1422,
                                    "src": "21151:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "baseExpression": {
                                      "id": 1447,
                                      "name": "wasteIds",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1425,
                                      "src": "21158:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                        "typeString": "uint256[] memory"
                                      }
                                    },
                                    "id": 1449,
                                    "indexExpression": {
                                      "id": 1448,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1435,
                                      "src": "21167:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "21158:11:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 1445,
                                  "name": "recycle",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1419,
                                  "src": "21143:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                                    "typeString": "function (uint256,uint256)"
                                  }
                                },
                                "id": 1450,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "21143:27:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1451,
                              "nodeType": "ExpressionStatement",
                              "src": "21143:27:0"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1441,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1438,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1435,
                            "src": "21102:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "id": 1439,
                              "name": "wasteIds",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1425,
                              "src": "21106:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                "typeString": "uint256[] memory"
                              }
                            },
                            "id": 1440,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "21106:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "21102:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1453,
                        "initializationExpression": {
                          "assignments": [
                            1435
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1435,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "21095:1:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 1453,
                              "src": "21090:6:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1434,
                                "name": "uint",
                                "nodeType": "ElementaryTypeName",
                                "src": "21090:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1437,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1436,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "21099:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "21090:10:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 1443,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "21123:3:0",
                            "subExpression": {
                              "id": 1442,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1435,
                              "src": "21123:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1444,
                          "nodeType": "ExpressionStatement",
                          "src": "21123:3:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "21085:97:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1420,
                    "nodeType": "StructuredDocumentation",
                    "src": "20896:61:0",
                    "text": "@notice Can recycle wastes greater than 0 but less than 51"
                  },
                  "functionSelector": "0bdd7063",
                  "id": 1455,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 1428,
                          "name": "wasteIds",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1425,
                          "src": "21044:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                            "typeString": "uint256[] memory"
                          }
                        },
                        {
                          "expression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1429,
                              "name": "_empty",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1281,
                              "src": "21054:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_Empty_$70_memory_ptr_$",
                                "typeString": "function () pure returns (struct Common.Empty memory)"
                              }
                            },
                            "id": 1430,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "21054:8:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Empty_$70_memory_ptr",
                              "typeString": "struct Common.Empty memory"
                            }
                          },
                          "id": 1431,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "wastedata",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 69,
                          "src": "21054:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                            "typeString": "string memory[] memory"
                          }
                        }
                      ],
                      "id": 1432,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1427,
                        "name": "validateSize",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 927,
                        "src": "21031:12:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "21031:42:0"
                    }
                  ],
                  "name": "recycleMultiple",
                  "nameLocation": "20972:15:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1426,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1422,
                        "mutability": "mutable",
                        "name": "binId",
                        "nameLocation": "20993:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1455,
                        "src": "20988:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1421,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "20988:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1425,
                        "mutability": "mutable",
                        "name": "wasteIds",
                        "nameLocation": "21014:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1455,
                        "src": "21000:22:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1423,
                            "name": "uint",
                            "nodeType": "ElementaryTypeName",
                            "src": "21000:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1424,
                          "nodeType": "ArrayTypeName",
                          "src": "21000:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                            "typeString": "uint256[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "20987:36:0"
                  },
                  "returnParameters": {
                    "id": 1433,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "21074:0:0"
                  },
                  "scope": 1736,
                  "src": "20963:226:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1493,
                    "nodeType": "Block",
                    "src": "21358:220:0",
                    "statements": [
                      {
                        "assignments": [
                          1460
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1460,
                            "mutability": "mutable",
                            "name": "rewardBal",
                            "nameLocation": "21374:9:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1493,
                            "src": "21369:14:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1459,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "21369:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1472,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 1467,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "21418:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IBoolaContractV_$1736",
                                    "typeString": "contract IBoolaContractV"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_IBoolaContractV_$1736",
                                    "typeString": "contract IBoolaContractV"
                                  }
                                ],
                                "id": 1466,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "21410:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 1465,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "21410:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 1468,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "21410:13:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 1469,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 615,
                                "src": "21424:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 1470,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "21424:12:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 1462,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 748,
                                  "src": "21393:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 1461,
                                "name": "IERC20",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 605,
                                "src": "21386:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC20_$605_$",
                                  "typeString": "type(contract IERC20)"
                                }
                              },
                              "id": 1463,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "21386:13:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$605",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 1464,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "allowance",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 582,
                            "src": "21386:23:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address,address) view external returns (uint256)"
                            }
                          },
                          "id": 1471,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "21386:51:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "21369:68:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1475,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1473,
                            "name": "rewardBal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1460,
                            "src": "21451:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1474,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "21464:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "21451:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1479,
                        "nodeType": "IfStatement",
                        "src": "21448:45:0",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1476,
                              "name": "NothingToWithdraw",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 29,
                              "src": "21474:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                "typeString": "function () pure"
                              }
                            },
                            "id": 1477,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "21474:19:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$__$",
                              "typeString": "tuple()"
                            }
                          },
                          "id": 1478,
                          "nodeType": "RevertStatement",
                          "src": "21467:26:0"
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 1486,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "21539:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IBoolaContractV_$1736",
                                    "typeString": "contract IBoolaContractV"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_IBoolaContractV_$1736",
                                    "typeString": "contract IBoolaContractV"
                                  }
                                ],
                                "id": 1485,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "21531:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 1484,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "21531:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 1487,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "21531:13:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 1488,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 615,
                                "src": "21546:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 1489,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "21546:12:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1490,
                              "name": "rewardBal",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1460,
                              "src": "21560:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 1481,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 748,
                                  "src": "21511:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 1480,
                                "name": "IERC20",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 605,
                                "src": "21504:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC20_$605_$",
                                  "typeString": "type(contract IERC20)"
                                }
                              },
                              "id": 1482,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "21504:13:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$605",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 1483,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "transferFrom",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 604,
                            "src": "21504:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                              "typeString": "function (address,address,uint256) external returns (bool)"
                            }
                          },
                          "id": 1491,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "21504:66:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1492,
                        "nodeType": "ExpressionStatement",
                        "src": "21504:66:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1456,
                    "nodeType": "StructuredDocumentation",
                    "src": "21199:126:0",
                    "text": "@notice Withdraw reward if any {IBoola Token}\nNote - Caller must have previous reward otherwise it fails."
                  },
                  "functionSelector": "3ccfd60b",
                  "id": 1494,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "withdraw",
                  "nameLocation": "21340:8:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1457,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "21348:2:0"
                  },
                  "returnParameters": {
                    "id": 1458,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "21358:0:0"
                  },
                  "scope": 1736,
                  "src": "21331:247:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1548,
                    "nodeType": "Block",
                    "src": "22097:273:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "baseExpression": {
                                  "baseExpression": {
                                    "id": 1516,
                                    "name": "profiles",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 787,
                                    "src": "22116:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$",
                                      "typeString": "mapping(enum Common.Category => mapping(address => struct Common.Profile storage ref))"
                                    }
                                  },
                                  "id": 1519,
                                  "indexExpression": {
                                    "expression": {
                                      "id": 1517,
                                      "name": "Category",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 11,
                                      "src": "22125:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_enum$_Category_$11_$",
                                        "typeString": "type(enum Common.Category)"
                                      }
                                    },
                                    "id": 1518,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "memberName": "COLLECTOR",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 6,
                                    "src": "22125:18:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_enum$_Category_$11",
                                      "typeString": "enum Common.Category"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "22116:28:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$",
                                    "typeString": "mapping(address => struct Common.Profile storage ref)"
                                  }
                                },
                                "id": 1522,
                                "indexExpression": {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "id": 1520,
                                    "name": "_msgSender",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 615,
                                    "src": "22145:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                      "typeString": "function () view returns (address)"
                                    }
                                  },
                                  "id": 1521,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "22145:12:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "22116:42:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Profile_$56_storage",
                                  "typeString": "struct Common.Profile storage ref"
                                }
                              },
                              "id": 1523,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "isRegistered",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 51,
                              "src": "22116:55:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4e6f7420616c6c6f776564",
                              "id": 1524,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "22172:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_98bb0d434888d1b812a0a4194c9568f0648e9ed0f8cbde68f7f17a68afe7b6cd",
                                "typeString": "literal_string \"Not allowed\""
                              },
                              "value": "Not allowed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_98bb0d434888d1b812a0a4194c9568f0648e9ed0f8cbde68f7f17a68afe7b6cd",
                                "typeString": "literal_string \"Not allowed\""
                              }
                            ],
                            "id": 1515,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "22108:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1525,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "22108:78:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1526,
                        "nodeType": "ExpressionStatement",
                        "src": "22108:78:0"
                      },
                      {
                        "assignments": [
                          1529
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1529,
                            "mutability": "mutable",
                            "name": "outWaste",
                            "nameLocation": "22216:8:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1548,
                            "src": "22199:25:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                              "typeString": "struct Common.WasteData"
                            },
                            "typeName": {
                              "id": 1528,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1527,
                                "name": "WasteData",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 43,
                                "src": "22199:9:0"
                              },
                              "referencedDeclaration": 43,
                              "src": "22199:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_WasteData_$43_storage_ptr",
                                "typeString": "struct Common.WasteData"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1537,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1532,
                              "name": "_garbages",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 778,
                              "src": "22252:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_enum$_State_$5_$_t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_$",
                                "typeString": "mapping(enum Common.State => struct Common.WasteData storage ref[] storage ref)"
                              }
                            },
                            {
                              "id": 1533,
                              "name": "wasteId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1499,
                              "src": "22263:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "id": 1534,
                                "name": "State",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 5,
                                "src": "22272:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_enum$_State_$5_$",
                                  "typeString": "type(enum Common.State)"
                                }
                              },
                              "id": 1535,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "GENERATED",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 2,
                              "src": "22272:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_State_$5",
                                "typeString": "enum Common.State"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_mapping$_t_enum$_State_$5_$_t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_$",
                                "typeString": "mapping(enum Common.State => struct Common.WasteData storage ref[] storage ref)"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_enum$_State_$5",
                                "typeString": "enum Common.State"
                              }
                            ],
                            "expression": {
                              "id": 1530,
                              "name": "IBoolaLib",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 529,
                              "src": "22227:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IBoolaLib_$529_$",
                                "typeString": "type(library IBoolaLib)"
                              }
                            },
                            "id": 1531,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "popFromMapping",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 239,
                            "src": "22227:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_mapping$_t_enum$_State_$5_$_t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_$_$_t_uint256_$_t_enum$_State_$5_$returns$_t_struct$_WasteData_$43_memory_ptr_$",
                              "typeString": "function (mapping(enum Common.State => struct Common.WasteData storage ref[] storage ref),uint256,enum Common.State) returns (struct Common.WasteData memory)"
                            }
                          },
                          "id": 1536,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "22227:61:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                            "typeString": "struct Common.WasteData memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "22199:89:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1541,
                              "name": "bins",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 765,
                              "src": "22321:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage",
                                "typeString": "struct Common.BinData storage ref[] storage ref"
                              }
                            },
                            {
                              "id": 1542,
                              "name": "binId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1497,
                              "src": "22327:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1543,
                              "name": "outWaste",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1529,
                              "src": "22334:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                "typeString": "struct Common.WasteData memory"
                              }
                            },
                            {
                              "expression": {
                                "id": 1544,
                                "name": "State",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 5,
                                "src": "22344:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_enum$_State_$5_$",
                                  "typeString": "type(enum Common.State)"
                                }
                              },
                              "id": 1545,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "COLLECTED",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3,
                              "src": "22344:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_State_$5",
                                "typeString": "enum Common.State"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_array$_t_struct$_BinData_$63_storage_$dyn_storage",
                                "typeString": "struct Common.BinData storage ref[] storage ref"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                "typeString": "struct Common.WasteData memory"
                              },
                              {
                                "typeIdentifier": "t_enum$_State_$5",
                                "typeString": "enum Common.State"
                              }
                            ],
                            "expression": {
                              "id": 1538,
                              "name": "IBoolaLib",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 529,
                              "src": "22299:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IBoolaLib_$529_$",
                                "typeString": "type(library IBoolaLib)"
                              }
                            },
                            "id": 1540,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "portToArray",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 204,
                            "src": "22299:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_BinData_$63_storage_$dyn_storage_ptr_$_t_uint256_$_t_struct$_WasteData_$43_memory_ptr_$_t_enum$_State_$5_$returns$__$",
                              "typeString": "function (struct Common.BinData storage ref[] storage pointer,uint256,struct Common.WasteData memory,enum Common.State)"
                            }
                          },
                          "id": 1546,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "22299:61:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1547,
                        "nodeType": "ExpressionStatement",
                        "src": "22299:61:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1495,
                    "nodeType": "StructuredDocumentation",
                    "src": "21586:329:0",
                    "text": "@dev Collect waste for disposal. \nNote: Caller must be an approved waste collector.\nmust supply the following:\no @param binId - Location of bin to deposit collected waste. ie bin index\no @param wasteId - Identifier for waste collected."
                  },
                  "functionSelector": "c3864cce",
                  "id": 1549,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "expression": {
                            "id": 1502,
                            "name": "Category",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11,
                            "src": "21989:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Category_$11_$",
                              "typeString": "type(enum Common.Category)"
                            }
                          },
                          "id": 1503,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "COLLECTOR",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 6,
                          "src": "21989:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Category_$11",
                            "typeString": "enum Common.Category"
                          }
                        },
                        {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 1504,
                            "name": "_msgSender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 615,
                            "src": "22009:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                              "typeString": "function () view returns (address)"
                            }
                          },
                          "id": 1505,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "22009:12:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "id": 1506,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1501,
                        "name": "isApproved",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 864,
                        "src": "21978:10:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "21978:44:0"
                    },
                    {
                      "arguments": [
                        {
                          "id": 1508,
                          "name": "binId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1497,
                          "src": "22039:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 1509,
                          "name": "wasteId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1499,
                          "src": "22046:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "expression": {
                            "id": 1510,
                            "name": "State",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5,
                            "src": "22055:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_State_$5_$",
                              "typeString": "type(enum Common.State)"
                            }
                          },
                          "id": 1511,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "GENERATED",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2,
                          "src": "22055:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_State_$5",
                            "typeString": "enum Common.State"
                          }
                        },
                        {
                          "hexValue": "496e76616c696420776173746520706f696e746572",
                          "id": 1512,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "22072:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_abad94b6453a098656ff9e059ac305e98d85667a0f3abab2d5b73772b5e607f0",
                            "typeString": "literal_string \"Invalid waste pointer\""
                          },
                          "value": "Invalid waste pointer"
                        }
                      ],
                      "id": 1513,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1507,
                        "name": "validateWasteId",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 845,
                        "src": "22023:15:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "22023:73:0"
                    }
                  ],
                  "name": "collectWaste",
                  "nameLocation": "21932:12:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1500,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1497,
                        "mutability": "mutable",
                        "name": "binId",
                        "nameLocation": "21950:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1549,
                        "src": "21945:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1496,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "21945:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1499,
                        "mutability": "mutable",
                        "name": "wasteId",
                        "nameLocation": "21962:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1549,
                        "src": "21957:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1498,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "21957:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "21944:26:0"
                  },
                  "returnParameters": {
                    "id": 1514,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "22097:0:0"
                  },
                  "scope": 1736,
                  "src": "21923:447:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1583,
                    "nodeType": "Block",
                    "src": "22558:120:0",
                    "statements": [
                      {
                        "body": {
                          "id": 1581,
                          "nodeType": "Block",
                          "src": "22612:59:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 1575,
                                    "name": "binId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1551,
                                    "src": "22640:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "baseExpression": {
                                      "id": 1576,
                                      "name": "wasteIds",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1554,
                                      "src": "22647:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                        "typeString": "uint256[] memory"
                                      }
                                    },
                                    "id": 1578,
                                    "indexExpression": {
                                      "id": 1577,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1564,
                                      "src": "22656:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "22647:11:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 1574,
                                  "name": "collectWaste",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1549,
                                  "src": "22627:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                                    "typeString": "function (uint256,uint256)"
                                  }
                                },
                                "id": 1579,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "22627:32:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1580,
                              "nodeType": "ExpressionStatement",
                              "src": "22627:32:0"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1570,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1567,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1564,
                            "src": "22586:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "id": 1568,
                              "name": "wasteIds",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1554,
                              "src": "22590:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                "typeString": "uint256[] memory"
                              }
                            },
                            "id": 1569,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "22590:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "22586:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1582,
                        "initializationExpression": {
                          "assignments": [
                            1564
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1564,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "22579:1:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 1582,
                              "src": "22574:6:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1563,
                                "name": "uint",
                                "nodeType": "ElementaryTypeName",
                                "src": "22574:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1566,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1565,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "22583:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "22574:10:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 1572,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "22607:3:0",
                            "subExpression": {
                              "id": 1571,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1564,
                              "src": "22607:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1573,
                          "nodeType": "ExpressionStatement",
                          "src": "22607:3:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "22569:102:0"
                      }
                    ]
                  },
                  "functionSelector": "41311bc3",
                  "id": 1584,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 1557,
                          "name": "wasteIds",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1554,
                          "src": "22529:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                            "typeString": "uint256[] memory"
                          }
                        },
                        {
                          "expression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1558,
                              "name": "_empty",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1281,
                              "src": "22538:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_Empty_$70_memory_ptr_$",
                                "typeString": "function () pure returns (struct Common.Empty memory)"
                              }
                            },
                            "id": 1559,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "22538:8:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Empty_$70_memory_ptr",
                              "typeString": "struct Common.Empty memory"
                            }
                          },
                          "id": 1560,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "wastedata",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 69,
                          "src": "22538:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                            "typeString": "string memory[] memory"
                          }
                        }
                      ],
                      "id": 1561,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1556,
                        "name": "validateSize",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 927,
                        "src": "22516:12:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "22516:41:0"
                    }
                  ],
                  "name": "collectMultipleWaste",
                  "nameLocation": "22452:20:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1555,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1551,
                        "mutability": "mutable",
                        "name": "binId",
                        "nameLocation": "22478:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1584,
                        "src": "22473:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1550,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "22473:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1554,
                        "mutability": "mutable",
                        "name": "wasteIds",
                        "nameLocation": "22499:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1584,
                        "src": "22485:22:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1552,
                            "name": "uint",
                            "nodeType": "ElementaryTypeName",
                            "src": "22485:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1553,
                          "nodeType": "ArrayTypeName",
                          "src": "22485:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                            "typeString": "uint256[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "22472:36:0"
                  },
                  "returnParameters": {
                    "id": 1562,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "22558:0:0"
                  },
                  "scope": 1736,
                  "src": "22443:235:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1695,
                    "nodeType": "Block",
                    "src": "22958:807:0",
                    "statements": [
                      {
                        "assignments": [
                          1591
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1591,
                            "mutability": "mutable",
                            "name": "len",
                            "nameLocation": "22974:3:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1695,
                            "src": "22969:8:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1590,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "22969:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1597,
                        "initialValue": {
                          "expression": {
                            "baseExpression": {
                              "id": 1592,
                              "name": "_garbages",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 778,
                              "src": "22980:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_enum$_State_$5_$_t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_$",
                                "typeString": "mapping(enum Common.State => struct Common.WasteData storage ref[] storage ref)"
                              }
                            },
                            "id": 1595,
                            "indexExpression": {
                              "expression": {
                                "id": 1593,
                                "name": "State",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 5,
                                "src": "22990:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_enum$_State_$5_$",
                                  "typeString": "type(enum Common.State)"
                                }
                              },
                              "id": 1594,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "RECYCLED",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 4,
                              "src": "22990:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_State_$5",
                                "typeString": "enum Common.State"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "22980:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_WasteData_$43_storage_$dyn_storage",
                              "typeString": "struct Common.WasteData storage ref[] storage ref"
                            }
                          },
                          "id": 1596,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "22980:32:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "22969:43:0"
                      },
                      {
                        "assignments": [
                          1599
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1599,
                            "mutability": "mutable",
                            "name": "actualVolume",
                            "nameLocation": "23028:12:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1695,
                            "src": "23023:17:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1598,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "23023:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1600,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "23023:17:0"
                      },
                      {
                        "assignments": [
                          1603
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1603,
                            "mutability": "mutable",
                            "name": "_s",
                            "nameLocation": "23057:2:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1695,
                            "src": "23051:8:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_State_$5",
                              "typeString": "enum Common.State"
                            },
                            "typeName": {
                              "id": 1602,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1601,
                                "name": "State",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 5,
                                "src": "23051:5:0"
                              },
                              "referencedDeclaration": 5,
                              "src": "23051:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_State_$5",
                                "typeString": "enum Common.State"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1606,
                        "initialValue": {
                          "expression": {
                            "id": 1604,
                            "name": "State",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5,
                            "src": "23062:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_State_$5_$",
                              "typeString": "type(enum Common.State)"
                            }
                          },
                          "id": 1605,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "RECYCLED",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 4,
                          "src": "23062:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_State_$5",
                            "typeString": "enum Common.State"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "23051:25:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 1614,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1610,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 1608,
                                  "name": "len",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1591,
                                  "src": "23095:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "hexValue": "30",
                                  "id": 1609,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "23101:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "23095:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "&&",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1613,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 1611,
                                  "name": "len",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1591,
                                  "src": "23106:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">=",
                                "rightExpression": {
                                  "id": 1612,
                                  "name": "volume",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1587,
                                  "src": "23113:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "23106:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "23095:24:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4e6f7420617661696c61626c65",
                              "id": 1615,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "23121:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_b9c8b0a781ee5b87f71931d50074d05dd76b7be959de5062a78ccee2fb412519",
                                "typeString": "literal_string \"Not available\""
                              },
                              "value": "Not available"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_b9c8b0a781ee5b87f71931d50074d05dd76b7be959de5062a78ccee2fb412519",
                                "typeString": "literal_string \"Not available\""
                              }
                            ],
                            "id": 1607,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "23087:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1616,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "23087:50:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1617,
                        "nodeType": "ExpressionStatement",
                        "src": "23087:50:0"
                      },
                      {
                        "body": {
                          "id": 1679,
                          "nodeType": "Block",
                          "src": "23181:468:0",
                          "statements": [
                            {
                              "assignments": [
                                1630
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1630,
                                  "mutability": "mutable",
                                  "name": "wd",
                                  "nameLocation": "23213:2:0",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 1679,
                                  "src": "23196:19:0",
                                  "stateVariable": false,
                                  "storageLocation": "memory",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                    "typeString": "struct Common.WasteData"
                                  },
                                  "typeName": {
                                    "id": 1629,
                                    "nodeType": "UserDefinedTypeName",
                                    "pathNode": {
                                      "id": 1628,
                                      "name": "WasteData",
                                      "nodeType": "IdentifierPath",
                                      "referencedDeclaration": 43,
                                      "src": "23196:9:0"
                                    },
                                    "referencedDeclaration": 43,
                                    "src": "23196:9:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_WasteData_$43_storage_ptr",
                                      "typeString": "struct Common.WasteData"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1636,
                              "initialValue": {
                                "baseExpression": {
                                  "baseExpression": {
                                    "id": 1631,
                                    "name": "_garbages",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 778,
                                    "src": "23218:9:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_enum$_State_$5_$_t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_$",
                                      "typeString": "mapping(enum Common.State => struct Common.WasteData storage ref[] storage ref)"
                                    }
                                  },
                                  "id": 1633,
                                  "indexExpression": {
                                    "id": 1632,
                                    "name": "_s",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1603,
                                    "src": "23228:2:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_enum$_State_$5",
                                      "typeString": "enum Common.State"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "23218:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_WasteData_$43_storage_$dyn_storage",
                                    "typeString": "struct Common.WasteData storage ref[] storage ref"
                                  }
                                },
                                "id": 1635,
                                "indexExpression": {
                                  "id": 1634,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1619,
                                  "src": "23232:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "23218:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_WasteData_$43_storage",
                                  "typeString": "struct Common.WasteData storage ref"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "23196:38:0"
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 1643,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 1637,
                                    "name": "wd",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1630,
                                    "src": "23252:2:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                      "typeString": "struct Common.WasteData memory"
                                    }
                                  },
                                  "id": 1638,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "recycler",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 39,
                                  "src": "23252:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "!=",
                                "rightExpression": {
                                  "arguments": [
                                    {
                                      "hexValue": "30",
                                      "id": 1641,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "23275:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      }
                                    ],
                                    "id": 1640,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "23267:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 1639,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "23267:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 1642,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "23267:10:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "23252:25:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 1678,
                              "nodeType": "IfStatement",
                              "src": "23249:389:0",
                              "trueBody": {
                                "id": 1677,
                                "nodeType": "Block",
                                "src": "23279:359:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "id": 1645,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "UnaryOperation",
                                      "operator": "++",
                                      "prefix": false,
                                      "src": "23298:15:0",
                                      "subExpression": {
                                        "id": 1644,
                                        "name": "actualVolume",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1599,
                                        "src": "23298:12:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1646,
                                    "nodeType": "ExpressionStatement",
                                    "src": "23298:15:0"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "expression": {
                                                "id": 1657,
                                                "name": "wd",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1630,
                                                "src": "23417:2:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                                  "typeString": "struct Common.WasteData memory"
                                                }
                                              },
                                              "id": 1658,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "value",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 33,
                                              "src": "23417:8:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bytes32",
                                                "typeString": "bytes32"
                                              }
                                            },
                                            {
                                              "expression": {
                                                "id": 1659,
                                                "name": "wd",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1630,
                                                "src": "23448:2:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                                  "typeString": "struct Common.WasteData memory"
                                                }
                                              },
                                              "id": 1660,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "collector",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 35,
                                              "src": "23448:12:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            },
                                            {
                                              "expression": {
                                                "id": 1661,
                                                "name": "wd",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1630,
                                                "src": "23483:2:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                                  "typeString": "struct Common.WasteData memory"
                                                }
                                              },
                                              "id": 1662,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "generator",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 37,
                                              "src": "23483:12:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            },
                                            {
                                              "expression": {
                                                "id": 1663,
                                                "name": "wd",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1630,
                                                "src": "23518:2:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                                  "typeString": "struct Common.WasteData memory"
                                                }
                                              },
                                              "id": 1664,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "recycler",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 39,
                                              "src": "23518:11:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            },
                                            {
                                              "expression": {
                                                "id": 1665,
                                                "name": "wd",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1630,
                                                "src": "23552:2:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                                  "typeString": "struct Common.WasteData memory"
                                                }
                                              },
                                              "id": 1666,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "state",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 42,
                                              "src": "23552:8:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_enum$_State_$5",
                                                "typeString": "enum Common.State"
                                              }
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_bytes32",
                                                "typeString": "bytes32"
                                              },
                                              {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              },
                                              {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              },
                                              {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              },
                                              {
                                                "typeIdentifier": "t_enum$_State_$5",
                                                "typeString": "enum Common.State"
                                              }
                                            ],
                                            "id": 1656,
                                            "name": "WasteData",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 43,
                                            "src": "23385:9:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_type$_t_struct$_WasteData_$43_storage_ptr_$",
                                              "typeString": "type(struct Common.WasteData storage pointer)"
                                            }
                                          },
                                          "id": 1667,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "structConstructorCall",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "23385:194:0",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                            "typeString": "struct Common.WasteData memory"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_struct$_WasteData_$43_memory_ptr",
                                            "typeString": "struct Common.WasteData memory"
                                          }
                                        ],
                                        "expression": {
                                          "expression": {
                                            "baseExpression": {
                                              "baseExpression": {
                                                "id": 1647,
                                                "name": "profiles",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 787,
                                                "src": "23332:8:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_mapping$_t_enum$_Category_$11_$_t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$_$",
                                                  "typeString": "mapping(enum Common.Category => mapping(address => struct Common.Profile storage ref))"
                                                }
                                              },
                                              "id": 1652,
                                              "indexExpression": {
                                                "expression": {
                                                  "id": 1648,
                                                  "name": "Category",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 11,
                                                  "src": "23341:8:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_type$_t_enum$_Category_$11_$",
                                                    "typeString": "type(enum Common.Category)"
                                                  }
                                                },
                                                "id": 1649,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "lValueRequested": false,
                                                "memberName": "SOLD",
                                                "nodeType": "MemberAccess",
                                                "referencedDeclaration": 10,
                                                "src": "23341:13:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_enum$_Category_$11",
                                                  "typeString": "enum Common.Category"
                                                }
                                              },
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "nodeType": "IndexAccess",
                                              "src": "23332:23:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Profile_$56_storage_$",
                                                "typeString": "mapping(address => struct Common.Profile storage ref)"
                                              }
                                            },
                                            "id": 1653,
                                            "indexExpression": {
                                              "arguments": [],
                                              "expression": {
                                                "argumentTypes": [],
                                                "id": 1650,
                                                "name": "_msgSender",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 615,
                                                "src": "23356:10:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                                  "typeString": "function () view returns (address)"
                                                }
                                              },
                                              "id": 1651,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "kind": "functionCall",
                                              "lValueRequested": false,
                                              "names": [],
                                              "nodeType": "FunctionCall",
                                              "src": "23356:12:0",
                                              "tryCall": false,
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "23332:37:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_Profile_$56_storage",
                                              "typeString": "struct Common.Profile storage ref"
                                            }
                                          },
                                          "id": 1654,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "purchased",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 55,
                                          "src": "23332:47:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_struct$_WasteData_$43_storage_$dyn_storage",
                                            "typeString": "struct Common.WasteData storage ref[] storage ref"
                                          }
                                        },
                                        "id": 1655,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "push",
                                        "nodeType": "MemberAccess",
                                        "src": "23332:52:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_ptr_$_t_struct$_WasteData_$43_storage_$returns$__$bound_to$_t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_ptr_$",
                                          "typeString": "function (struct Common.WasteData storage ref[] storage pointer,struct Common.WasteData storage ref)"
                                        }
                                      },
                                      "id": 1668,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "23332:248:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 1669,
                                    "nodeType": "ExpressionStatement",
                                    "src": "23332:248:0"
                                  },
                                  {
                                    "expression": {
                                      "id": 1675,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "UnaryOperation",
                                      "operator": "delete",
                                      "prefix": true,
                                      "src": "23599:23:0",
                                      "subExpression": {
                                        "baseExpression": {
                                          "baseExpression": {
                                            "id": 1670,
                                            "name": "_garbages",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 778,
                                            "src": "23606:9:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_enum$_State_$5_$_t_array$_t_struct$_WasteData_$43_storage_$dyn_storage_$",
                                              "typeString": "mapping(enum Common.State => struct Common.WasteData storage ref[] storage ref)"
                                            }
                                          },
                                          "id": 1672,
                                          "indexExpression": {
                                            "id": 1671,
                                            "name": "_s",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1603,
                                            "src": "23616:2:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_enum$_State_$5",
                                              "typeString": "enum Common.State"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "23606:13:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_struct$_WasteData_$43_storage_$dyn_storage",
                                            "typeString": "struct Common.WasteData storage ref[] storage ref"
                                          }
                                        },
                                        "id": 1674,
                                        "indexExpression": {
                                          "id": 1673,
                                          "name": "i",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1619,
                                          "src": "23620:1:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "nodeType": "IndexAccess",
                                        "src": "23606:16:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_WasteData_$43_storage",
                                          "typeString": "struct Common.WasteData storage ref"
                                        }
                                      },
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 1676,
                                    "nodeType": "ExpressionStatement",
                                    "src": "23599:23:0"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1624,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1622,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1619,
                            "src": "23164:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "id": 1623,
                            "name": "volume",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1587,
                            "src": "23168:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "23164:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1680,
                        "initializationExpression": {
                          "assignments": [
                            1619
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1619,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "23157:1:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 1680,
                              "src": "23152:6:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1618,
                                "name": "uint",
                                "nodeType": "ElementaryTypeName",
                                "src": "23152:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1621,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1620,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "23161:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "23152:10:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 1626,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "23176:3:0",
                            "subExpression": {
                              "id": 1625,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1619,
                              "src": "23176:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1627,
                          "nodeType": "ExpressionStatement",
                          "src": "23176:3:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "23148:501:0"
                      },
                      {
                        "assignments": [
                          1682
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1682,
                            "mutability": "mutable",
                            "name": "amtToPay",
                            "nameLocation": "23664:8:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1695,
                            "src": "23659:13:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1681,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "23659:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1686,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1685,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1683,
                            "name": "price",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 760,
                            "src": "23675:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "id": 1684,
                            "name": "actualVolume",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1599,
                            "src": "23683:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "23675:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "23659:36:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1691,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 1688,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "23714:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1689,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "value",
                                "nodeType": "MemberAccess",
                                "src": "23714:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 1690,
                                "name": "amtToPay",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1682,
                                "src": "23727:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "23714:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4956616c7565",
                              "id": 1692,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "23737:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c6f5816ffca9f3bdafc2c13d983135d2a105150b42711b53975c78544de1fc78",
                                "typeString": "literal_string \"IValue\""
                              },
                              "value": "IValue"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_c6f5816ffca9f3bdafc2c13d983135d2a105150b42711b53975c78544de1fc78",
                                "typeString": "literal_string \"IValue\""
                              }
                            ],
                            "id": 1687,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "23706:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1693,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "23706:40:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1694,
                        "nodeType": "ExpressionStatement",
                        "src": "23706:40:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1585,
                    "nodeType": "StructuredDocumentation",
                    "src": "22686:217:0",
                    "text": "@notice Buy recycled waste in form of manure\nNOTE: Only recycled waste can be bought.\nIf available manure cannot cover requested volume, buyer simply \npurchased available volume."
                  },
                  "functionSelector": "c437a2f0",
                  "id": 1696,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "buyRecycled",
                  "nameLocation": "22918:11:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1588,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1587,
                        "mutability": "mutable",
                        "name": "volume",
                        "nameLocation": "22935:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1696,
                        "src": "22930:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1586,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "22930:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "22929:13:0"
                  },
                  "returnParameters": {
                    "id": 1589,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "22958:0:0"
                  },
                  "scope": 1736,
                  "src": "22909:856:0",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1708,
                    "nodeType": "Block",
                    "src": "23871:35:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 1706,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1704,
                            "name": "price",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 760,
                            "src": "23882:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1705,
                            "name": "newPrice",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1699,
                            "src": "23890:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "23882:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1707,
                        "nodeType": "ExpressionStatement",
                        "src": "23882:16:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1697,
                    "nodeType": "StructuredDocumentation",
                    "src": "23773:42:0",
                    "text": "@dev Sets new price for recycled waste."
                  },
                  "functionSelector": "91b7f5ed",
                  "id": 1709,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 1702,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1701,
                        "name": "onlyOwner",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 654,
                        "src": "23861:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "23861:9:0"
                    }
                  ],
                  "name": "setPrice",
                  "nameLocation": "23830:8:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1700,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1699,
                        "mutability": "mutable",
                        "name": "newPrice",
                        "nameLocation": "23844:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1709,
                        "src": "23839:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1698,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "23839:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "23838:15:0"
                  },
                  "returnParameters": {
                    "id": 1703,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "23871:0:0"
                  },
                  "scope": 1736,
                  "src": "23821:85:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1721,
                    "nodeType": "Block",
                    "src": "24037:46:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 1719,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1717,
                            "name": "newSignUpReward",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 745,
                            "src": "24048:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1718,
                            "name": "newReward",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1712,
                            "src": "24066:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "24048:27:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1720,
                        "nodeType": "ExpressionStatement",
                        "src": "24048:27:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1710,
                    "nodeType": "StructuredDocumentation",
                    "src": "23916:58:0",
                    "text": "@dev Sets new sign up reward. Note With access modifier"
                  },
                  "functionSelector": "f2d03e15",
                  "id": 1722,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 1715,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1714,
                        "name": "onlyOwner",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 654,
                        "src": "24028:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "24028:9:0"
                    }
                  ],
                  "name": "setSignUpReward",
                  "nameLocation": "23989:15:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1713,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1712,
                        "mutability": "mutable",
                        "name": "newReward",
                        "nameLocation": "24010:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1722,
                        "src": "24005:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1711,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "24005:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "24004:16:0"
                  },
                  "returnParameters": {
                    "id": 1716,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "24037:0:0"
                  },
                  "scope": 1736,
                  "src": "23980:103:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1734,
                    "nodeType": "Block",
                    "src": "24217:46:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 1732,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1730,
                            "name": "collectorReward",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 754,
                            "src": "24228:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1731,
                            "name": "newReward",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1725,
                            "src": "24246:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "24228:27:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1733,
                        "nodeType": "ExpressionStatement",
                        "src": "24228:27:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1723,
                    "nodeType": "StructuredDocumentation",
                    "src": "24091:58:0",
                    "text": "@dev Sets new sign up reward. Note With access modifier"
                  },
                  "functionSelector": "72938a14",
                  "id": 1735,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 1728,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1727,
                        "name": "onlyOwner",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 654,
                        "src": "24208:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "24208:9:0"
                    }
                  ],
                  "name": "setCollectorUpReward",
                  "nameLocation": "24164:20:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1726,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1725,
                        "mutability": "mutable",
                        "name": "newReward",
                        "nameLocation": "24190:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1735,
                        "src": "24185:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1724,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "24185:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "24184:16:0"
                  },
                  "returnParameters": {
                    "id": 1729,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "24217:0:0"
                  },
                  "scope": 1736,
                  "src": "24155:108:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                }
              ],
              "scope": 1737,
              "src": "12772:11498:0",
              "usedErrors": [
                17,
                19,
                21,
                23,
                25,
                27,
                29,
                31
              ]
            }
          ],
          "src": "39:24233:0"
        },
        "id": 0
      }
    }
  }
}
